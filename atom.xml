<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wzmyyj</title>
  
  <subtitle>Let life be beautiful like summer flowers.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wzmyyj.top/"/>
  <updated>2020-07-21T05:00:26.681Z</updated>
  <id>https://wzmyyj.top/</id>
  
  <author>
    <name>wzmyyj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IM中群消息发送者信息刷新方案</title>
    <link href="https://wzmyyj.top/2020/07/21/android_10/"/>
    <id>https://wzmyyj.top/2020/07/21/android_10/</id>
    <published>2020-07-21T11:20:30.000Z</published>
    <updated>2020-07-21T05:00:26.681Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在IM项目（Android）中，聊天页面，进入会展示历史消息，而历史消息存下来的发送者信息可能并不是最新的，所以需要去刷新数据。单聊场景只需要刷新对方一个人信息，实现较为简单。但是到群聊，发送者众多，不可能每次进入页面都去获取全部成员的信息（数量大，获取缓慢），所以需要制定策略去实现好的效果。</p><a id="more"></a><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p><strong>期望：</strong></p><ol><li>只去刷新显示在屏幕上的发送者信息。</li><li>每个发送者只需要刷新一次。（做个缓存）</li><li>屏幕滚动很快，中途显示的不去刷新。</li><li>如果其他地方缓存过了这个成员，就不再去获取。</li><li>群成员信息修改，及时刷新缓存数据。</li></ol><h3 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h3><p><strong>设计：</strong></p><ol><li>在recycler的onBindVH里收集消息列表里的发送者的ID（imAccount)。</li><li>收集到数据池（只收集不是最新数据的，防止反复收集），对imAccount去重，大小为10。利用LRU的缓存淘汰imAccount。</li><li>静置0.5秒后开始将缓存池内容发射请求。（即屏幕停止了滑动，或滑动没时新的item添加到屏幕）。</li><li>每个imAccount对应一个锁对象，保证异步下同一个imAccount只会请求一次。</li><li>结合群成员信息做缓存。（群成员缓存获取过了，如进过群成员页等， 就不再去请求，直接使用缓存里的数据）</li><li>刷新成功一个imAccount则会把整个列表里同一个发送者的信息都刷新掉。</li><li>数据刷新成功，回调刷新UI列表。需要绑定聊天页面生命周期。</li><li>收到群成员信息修改通知消息，修改缓存数据。</li></ol><p><strong>流程图：</strong><br><img src="https://upload-images.jianshu.io/upload_images/3262738-a0012923f3cec79f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240/format/webp" alt="Sander流程图.jpg"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>该部分功能需要结合成员缓存功能。请看：<a href="https://www.jianshu.com/p/4571d9b01b95" target="_blank" rel="noopener">IM项目中群成员获取与缓存策略</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SenderHelper</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>() : DefaultLifecycleObserver &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> const <span class="keyword">val</span> CACHE_MAX_SIZE = <span class="number">10</span></span><br><span class="line">        <span class="keyword">private</span> const <span class="keyword">val</span> COUNT_DOWN_DELAY = <span class="number">500</span>L</span><br><span class="line">        <span class="comment">// 保证一对一的关系。</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">val</span> map = WeakHashMap&lt;LifecycleOwner, SenderHelper&gt;()</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">with</span><span class="params">(owner: <span class="type">LifecycleOwner</span>, observer: <span class="type">Observer</span>&lt;<span class="type">List</span>&lt;<span class="type">String</span>&gt;&gt;)</span></span>: SenderHelper &#123;</span><br><span class="line">            <span class="keyword">return</span> map[owner] ?: SenderHelper().apply &#123;</span><br><span class="line">                map[owner] = <span class="keyword">this</span></span><br><span class="line">                with(owner, observer)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">(owner: <span class="type">LifecycleOwner</span>)</span></span>: SenderHelper? &#123;</span><br><span class="line">            <span class="keyword">return</span> map[owner]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">(sessionId: <span class="type">String</span>)</span></span>: SenderHelper? &#123;</span><br><span class="line">            <span class="keyword">return</span> map.values.find &#123; it.sessionId == sessionId &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调的 liveData。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> liveData = MutableLiveData&lt;List&lt;String&gt;&gt;()</span><br><span class="line">    <span class="comment">// rx。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> compositeDisposable = CompositeDisposable()</span><br><span class="line">    <span class="comment">// 入参缓存池。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> cache = LruCache&lt;String, <span class="built_in">Unit</span>&gt;(CACHE_MAX_SIZE)</span><br><span class="line">    <span class="comment">// 结果列表。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> resultList = CopyOnWriteArrayList&lt;String&gt;()</span><br><span class="line">    <span class="comment">// 锁对象 map。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> lockMap = ConcurrentHashMap&lt;String, Lock&gt;()</span><br><span class="line">    <span class="comment">// data。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> groupCode: String = <span class="string">""</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> sessionId: String = <span class="string">""</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> dataList: (<span class="built_in">Unit</span>) -&gt; List&lt;SenderModel&gt;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> memberSet <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        MemberHelper.getIfAbsent(groupCode)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> handler = Handler()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> runnable = Runnable &#123;</span><br><span class="line">        cache.snapshot().keys.apply &#123;</span><br><span class="line">            forEach &#123; k -&gt; cache.remove(k) &#125;</span><br><span class="line">            task(<span class="keyword">this</span>.toList())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">init</span><span class="params">(sessionId: <span class="type">String</span>, groupCode: <span class="type">String</span>, dataList: (<span class="type">Unit</span>)</span></span> -&gt; List&lt;SenderModel&gt;) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sessionId = sessionId</span><br><span class="line">        <span class="keyword">this</span>.groupCode = groupCode</span><br><span class="line">        <span class="keyword">this</span>.dataList = dataList</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取最新数据。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bind</span><span class="params">(sender: <span class="type">SenderModel</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 如果是自己，直接返回。</span></span><br><span class="line">        <span class="keyword">if</span> (sender.isSelf || sender.imAccount.isEmpty()) <span class="keyword">return</span></span><br><span class="line">        <span class="comment">// 如果最新，直接返回。</span></span><br><span class="line">        memberSet.<span class="keyword">get</span>(sender.imAccount)?.let &#123;</span><br><span class="line">            <span class="keyword">if</span> (compare(sender, it).falseRun &#123; changeListAndPost(it) &#125;) <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存入缓存池。</span></span><br><span class="line">        cache.<span class="keyword">get</span>(sender.imAccount) ?: cache.put(sender.imAccount, <span class="built_in">Unit</span>)</span><br><span class="line">        countDown()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主动刷新名称。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">updateNickname</span><span class="params">(imAccount: <span class="type">String</span>, nickname: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        memberSet.<span class="keyword">get</span>(imAccount)?.let &#123;</span><br><span class="line">            it.nickName = nickname</span><br><span class="line">            changeListAndPost(it)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主动刷新身份。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">updateGroupRole</span><span class="params">(imAccount: <span class="type">String</span>, groupRole: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        memberSet.<span class="keyword">get</span>(imAccount)?.let &#123;</span><br><span class="line">            it.groupRole = groupRole</span><br><span class="line">            changeListAndPost(it)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">(owner: <span class="type">LifecycleOwner</span>)</span></span> &#123;</span><br><span class="line">        compositeDisposable.clear()</span><br><span class="line">        handler.removeCallbacksAndMessages(<span class="literal">null</span>)</span><br><span class="line">        map.remove(owner)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//---------private method-----------//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定生命周期和观察。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">with</span><span class="params">(owner: <span class="type">LifecycleOwner</span>, observer: <span class="type">Observer</span>&lt;<span class="type">List</span>&lt;<span class="type">String</span>&gt;&gt;)</span></span> &#123;</span><br><span class="line">        owner.lifecycle.addObserver(<span class="keyword">this</span>)</span><br><span class="line">        liveData.observe(owner, observer)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延时计时。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">countDown</span><span class="params">()</span></span> &#123;</span><br><span class="line">        handler.removeCallbacksAndMessages(<span class="literal">null</span>)</span><br><span class="line">        handler.postDelayed(runnable, COUNT_DOWN_DELAY)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">task</span><span class="params">(imAccountList: <span class="type">List</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">        Observable</span><br><span class="line">                .fromIterable(imAccountList)</span><br><span class="line">                .flatMap &#123; work(it) &#125;</span><br><span class="line">                .doFinally &#123;</span><br><span class="line">                    <span class="keyword">if</span> (resultList.isNotEmpty()) &#123;</span><br><span class="line">                        liveData.postValue(ArrayList(resultList))</span><br><span class="line">                        resultList.clear()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                .subscribe(&#123;&#125;, &#123;&#125;)</span><br><span class="line">                .addToComposite()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作。各自开辟子线程。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">work</span><span class="params">(imAccount: <span class="type">String</span>)</span></span>: Observable&lt;*&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.just(imAccount)</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .flatMap &#123;</span><br><span class="line">                    synchronized(getLock(it).lock) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (memberSet.<span class="keyword">get</span>(it) == <span class="literal">null</span>) &#123;</span><br><span class="line">                            netWork(it)</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            Observable.just(it)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网络操作。与工作同一个线程。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">netWork</span><span class="params">(imAccount: <span class="type">String</span>)</span></span>: Observable&lt;*&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> MemberHelper</span><br><span class="line">                .loadMember(sessionId, imAccount)</span><br><span class="line">                .filter &#123; it.status &amp;&amp; it.entry != <span class="literal">null</span> &#125;</span><br><span class="line">                .map &#123; it.entry!! &#125;</span><br><span class="line">                .doOnNext &#123;</span><br><span class="line">                    resultList.add(it.imAccount.orEmpty())</span><br><span class="line">                    memberSet.put(it)</span><br><span class="line">                    updateDb(it)</span><br><span class="line">                    changeList(it)</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 更新数据库数据。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateDb</span><span class="params">(bean: <span class="type">MemberBean</span>)</span></span> &#123;</span><br><span class="line">        ...修改数据库实现不重要...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷洗数据及发送数据变化信号。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">changeListAndPost</span><span class="params">(bean: <span class="type">MemberBean</span>)</span></span> &#123;</span><br><span class="line">        changeList(bean).trueRun &#123; liveData.postValue(arrayListOf(bean.imAccount.orEmpty())) &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新列表数据。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">changeList</span><span class="params">(bean: <span class="type">MemberBean</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> isChange: <span class="built_in">Boolean</span></span><br><span class="line">        dataList()</span><br><span class="line">                .filter &#123; it.imAccount == bean.imAccount &amp;&amp; compare(it, bean).not() &#125;</span><br><span class="line">                .apply &#123; isChange = <span class="keyword">this</span>.isNotEmpty() &#125;</span><br><span class="line">                .forEach &#123;</span><br><span class="line">                    it.nickName = bean.nickName.orEmpty()</span><br><span class="line">                    it.avatar = bean.avatar?.toLoadUrl().orEmpty()</span><br><span class="line">                    it.setGroupRole(bean.groupRole)</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">return</span> isChange</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较是否最新了。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">compare</span><span class="params">(sender: <span class="type">SenderModel</span>, bean: <span class="type">MemberBean</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (bean.groupRole == sender.groupRole</span><br><span class="line">                &amp;&amp; bean.nickName == sender.nickName</span><br><span class="line">                &amp;&amp; bean.avatar?.toLoadUrl() == sender.avatar)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 锁。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Lock</span></span>(<span class="keyword">val</span> lock: Any = Any())</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getLock</span><span class="params">(imAccount: <span class="type">String</span>)</span></span>: Lock &#123;</span><br><span class="line">        <span class="keyword">return</span> lockMap[imAccount] ?: Lock().apply &#123; lockMap[imAccount] = <span class="keyword">this</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add 到复合体。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> Disposable.<span class="title">addToComposite</span><span class="params">()</span></span> &#123;</span><br><span class="line">        compositeDisposable.add(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用：</strong></p><p>初始化：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">SenderHelper</span></span><br><span class="line">                <span class="selector-class">.with</span>(lifecyclerOwner, Observer &#123; <span class="selector-tag">updateList</span>() &#125;)</span><br><span class="line">                <span class="selector-class">.init</span>(sessionId, groupCode) &#123; <span class="selector-tag">getSenderList</span>() &#125;</span><br></pre></td></tr></table></figure></p><p>在recyclerView适配器的onBindVH处：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">SenderHelper</span><span class="selector-class">.get</span>(<span class="selector-tag">lifecyclerOwner</span>)?<span class="selector-class">.bind</span>(<span class="selector-tag">sender</span>)</span><br></pre></td></tr></table></figure></p><p>收到消息主动刷新缓存：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新名称。</span></span><br><span class="line">SenderHelper.<span class="built_in">get</span>(sessionId)?.updateNickname(imAccount,nickName）</span><br><span class="line"><span class="comment">// 更新身份。</span></span><br><span class="line">SenderHelper.<span class="built_in">get</span>(sessionId)?.updateGroupRole(imAccount,groupRole）</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>要点：</p><ol><li>收集最新进入的 imAccount，最多10个。</li><li>静置 0.5 秒，将收集的数据分别请求。</li><li>同一个 imAccount 只能请求一次。</li><li>绑定生命周期，一对一关系。</li><li>与群成员缓存结合。</li></ol><p><strong>PS</strong>：从这个方案中，可以扩展到列表内容局部数据请求接口刷新的场景。<br><img src="https://upload-images.jianshu.io/upload_images/3262738-889937b6d17e2893.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配一张图"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;在IM项目（Android）中，聊天页面，进入会展示历史消息，而历史消息存下来的发送者信息可能并不是最新的，所以需要去刷新数据。单聊场景只需要刷新对方一个人信息，实现较为简单。但是到群聊，发送者众多，不可能每次进入页面都去获取全部成员的信息（数量大，获取缓慢），所以需要制定策略去实现好的效果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://wzmyyj.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>IM中按名称拼音字母分组排序</title>
    <link href="https://wzmyyj.top/2020/07/21/android_9/"/>
    <id>https://wzmyyj.top/2020/07/21/android_9/</id>
    <published>2020-07-21T02:20:30.000Z</published>
    <updated>2020-07-21T04:33:54.130Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>在IM项目（Android项目）中，例如群成员列表，通讯录（仿微信）等等。往往会按名称首字母分组并排序。从而方便用户检索。</p><a id="more"></a><h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><p>先上一张UI效果图：</p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-e908a560c36504f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果t"></p><h3 id="分析需求"><a href="#分析需求" class="headerlink" title="分析需求"></a>分析需求</h3><ol><li>每个item需要按首字母分组，群主和管理员单独一组。A～Z以外的字符放入‘#’这组。</li><li>每组内按文字拼音排序。</li><li>每组之间有分隔标题。</li><li>右侧 SideBar （自定义View）快速检索。</li></ol><p><strong>注</strong>：SideBar自定义View并非本文重点。当作有这个View就是了，文末会给代码，自己去实现更好哈😊。</p><h3 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h3><h4 id="按字母分组："><a href="#按字母分组：" class="headerlink" title="按字母分组："></a>按字母分组：</h4><p>针对需求1，2。写一个通用的类去做这个时。（尽量与具体业务解耦，也方便日后总结。）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> LatterSetUtil &#123;</span><br><span class="line">    <span class="comment">// "★" 代表特殊分类。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> LETTERS = arrayOf(<span class="string">"★"</span>, <span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>, <span class="string">"F"</span>, <span class="string">"G"</span>, <span class="string">"H"</span>, <span class="string">"I"</span>,</span><br><span class="line">            <span class="string">"J"</span>, <span class="string">"K"</span>, <span class="string">"L"</span>, <span class="string">"M"</span>, <span class="string">"N"</span>, <span class="string">"O"</span>, <span class="string">"P"</span>, <span class="string">"Q"</span>, <span class="string">"R"</span>, <span class="string">"S"</span>, <span class="string">"T"</span>, <span class="string">"U"</span>, <span class="string">"V"</span>,</span><br><span class="line">            <span class="string">"W"</span>, <span class="string">"X"</span>, <span class="string">"Y"</span>, <span class="string">"Z"</span>, <span class="string">"#"</span>)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容器。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Container</span>&lt;<span class="type">T : ILetter</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">internal</span> <span class="keyword">val</span> map: HashMap&lt;String, ArrayList&lt;T&gt;&gt; = HashMap()</span><br><span class="line">        init &#123;</span><br><span class="line">            <span class="comment">// 建立字母分组map。</span></span><br><span class="line">            <span class="keyword">for</span> (s <span class="keyword">in</span> LETTERS) &#123;</span><br><span class="line">                map[s] = ArrayList()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 排序后的列表。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">getSortList</span><span class="params">(sort: (<span class="type">ArrayList</span>&lt;<span class="type">T</span>&gt;)</span></span> -&gt; <span class="built_in">Unit</span>, addLetter: <span class="built_in">Boolean</span> = <span class="literal">true</span>): List&lt;Any&gt; &#123;</span><br><span class="line">            <span class="keyword">val</span> resultList = ArrayList&lt;Any&gt;()</span><br><span class="line">            <span class="comment">// 将分组结果排成列表。</span></span><br><span class="line">            <span class="keyword">for</span> (s <span class="keyword">in</span> LETTERS) &#123;</span><br><span class="line">                <span class="keyword">val</span> list = map[s]</span><br><span class="line">                <span class="comment">// 集合非空才能加入。</span></span><br><span class="line">                <span class="keyword">if</span> (list.isNullOrEmpty()) <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> (addLetter) &#123;</span><br><span class="line">                    resultList.add(Letter(s, list.size))</span><br><span class="line">                &#125;</span><br><span class="line">                sort(list)</span><br><span class="line">                resultList.addAll(list)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> resultList</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Letter</span></span>(<span class="keyword">val</span> letter: String, <span class="keyword">val</span> size: <span class="built_in">Int</span>)</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">ILetter</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取首字母。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">getFirstLetter</span><span class="params">()</span></span>: String = <span class="string">"#"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按字母分组。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataList 数据源。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : ILetter&gt;</span> <span class="title">getContainer</span><span class="params">(dataList: <span class="type">List</span>&lt;<span class="type">T</span>&gt;)</span></span>: Container&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> c = Container&lt;T&gt;()</span><br><span class="line">        <span class="comment">// 默认放入"#"集合。</span></span><br><span class="line">        <span class="keyword">val</span> defList = c.map[<span class="string">"#"</span>] ?: <span class="keyword">return</span> c</span><br><span class="line">        <span class="comment">// 将原数据分组。</span></span><br><span class="line">        <span class="keyword">for</span> (ifl <span class="keyword">in</span> dataList) &#123;</span><br><span class="line">            <span class="comment">// 获取首字母。</span></span><br><span class="line">            <span class="keyword">val</span> s = ifl.getFirstLetter()</span><br><span class="line">            <span class="keyword">val</span> list = c.map[s] ?: defList</span><br><span class="line">            <span class="comment">// 加入对应字母的小组。</span></span><br><span class="line">            list.add(ifl)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用：</strong></p><ol><li>数据源需要实现LatterSetUtil.ILetter接口。</li><li>放入数据源（list）返回一个容器对象。里面是已经按字母分好组的集合。</li><li>调用getSortList方法，返回一个list。外部指定组内排序规则，每组之前会插一个Letter记录首字母和这组元素的数量。</li></ol><h4 id="获取首字母"><a href="#获取首字母" class="headerlink" title="获取首字母"></a>获取首字母</h4><p> 根据中文获取首字母，原先，自己写了个根据汉字编码规律，按字符区间去判断首字母的方法。能覆盖大多场景，但是很快就被测试找出了反例😓。于是采用现有的“汉语拼音”库：pinyin4j。<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">implementation</span> <span class="string">'com.belerweb:pinyin4j:2.5.1'</span></span><br></pre></td></tr></table></figure></p><p>代码：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class FirstLetterUtil &#123;</span><br><span class="line">    <span class="comment">// 根据一个包含汉字的字符串返回一个汉字拼音首字母的字符串 最重要的一个方法.</span></span><br><span class="line">    @NonNull</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> first(@Nullable <span class="keyword">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">str</span> == <span class="keyword">null</span> || <span class="built_in">str</span>.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"#"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">char</span> ch = <span class="built_in">str</span>.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (ch &gt;= <span class="string">'a'</span> &amp;&amp; ch &lt;= <span class="string">'z'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">char</span>) (ch - <span class="string">'a'</span> + <span class="string">'A'</span>) + <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ch &gt;= <span class="string">'A'</span> &amp;&amp; ch &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ch + <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HanyuPinyinOutputFormat defaultFormat = <span class="keyword">new</span> HanyuPinyinOutputFormat();</span><br><span class="line">            <span class="comment">// 设置大小写格式</span></span><br><span class="line">            defaultFormat.setCaseType(HanyuPinyinCaseType.UPPERCASE);</span><br><span class="line">            <span class="comment">// 设置声调格式：</span></span><br><span class="line">            defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</span><br><span class="line">            <span class="keyword">if</span> (Character.toString(ch).matches(<span class="string">"[\\u4E00-\\u9FA5]+"</span>)) &#123;</span><br><span class="line">                <span class="keyword">String</span>[] array = PinyinHelper.toHanyuPinyinStringArray(ch, defaultFormat);</span><br><span class="line">                <span class="keyword">if</span> (array != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> array[<span class="number">0</span>].charAt(<span class="number">0</span>) + <span class="string">""</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"#"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PS</strong>：HanyuPinyin：汉语拼音。。。。汗😓。。<br><img src="https://upload-images.jianshu.io/upload_images/3262738-d968108c115ff330.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配一张图"></p><p><strong>使用：</strong></p><p>让MemberVhModel实现<code>LatterSetUtil.ILetter</code>接口，<code>getFirstLetter()</code>实现为返回<code>this.latter</code>。latter属性在设置名称时赋值（利用FirstLetterUtil）。</p><p><strong>注</strong>：不直接在getFirstLetter()方法返回<code>FirstLetterUtil.first(name)</code>。是因为FirstLetterUtil的这个方法效率并不是很高，而<code>getFirstLetter()</code>调用可能较为频繁。其次，MemberVhModel尽量写数据，业务逻辑最好解耦。</p><h4 id="组合列表"><a href="#组合列表" class="headerlink" title="组合列表"></a>组合列表</h4><p>将上述内容组合起来。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表变化。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    private fun sortMemberAndLetterList(dataList: List&lt;MemberVhModel&gt;, memberSet: MemberSetModel) &#123;</span><br><span class="line">        memberSet.clearMembers()</span><br><span class="line">        val container = LatterSetUtil.getContainer(dataList)</span><br><span class="line">        val lsList = container.getSortList(&#123; sortMemberList(it) &#125;)</span><br><span class="line">        <span class="keyword">for</span> (ls <span class="keyword">in</span> lsList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ls is LatterSetUtil.Letter) &#123;</span><br><span class="line">                val model = MemberTitleVhModel(title = ls<span class="selector-class">.letter</span>, letter = ls<span class="selector-class">.letter</span>, size = ls.size)</span><br><span class="line">                <span class="keyword">if</span> (ls<span class="selector-class">.letter</span> == ADMIN_LETTER) &#123;<span class="comment">// 管理员。</span></span><br><span class="line">                    model<span class="selector-class">.title</span> = String.format(getString(R<span class="selector-class">.string</span><span class="selector-class">.im_group_admin_count</span>), ls.size)</span><br><span class="line">                &#125;</span><br><span class="line">                memberSet<span class="selector-class">.letterList</span><span class="selector-class">.add</span>(ls.letter)</span><br><span class="line">                memberSet<span class="selector-class">.itemList</span><span class="selector-class">.add</span>(model)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ls is MemberVhModel) &#123;</span><br><span class="line">                memberSet<span class="selector-class">.itemList</span><span class="selector-class">.add</span>(ls)</span><br><span class="line">                memberSet<span class="selector-class">.userList</span><span class="selector-class">.add</span>(ls)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>组内排序：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> cmp = Collator.getInstance(Locale.CHINA)!!</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">sortMemberList</span><span class="params">(list: <span class="type">ArrayList</span>&lt;<span class="type">MemberVhModel</span>&gt;)</span></span> &#123;</span><br><span class="line">        list.sortWith(Comparator &#123; l, r -&gt;cmp.compare(l.name, r.name)&#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="UI方案"><a href="#UI方案" class="headerlink" title="UI方案"></a>UI方案</h3><p><strong>xml布局：</strong>把这个布局include到具体的大页面中。<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;androidx.constraintlayout.widget.ConstraintLayout</span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">        android:background=<span class="string">"@color/color_EEEEEE"</span>&gt;</span><br><span class="line">        &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class="line">            android:id=<span class="string">"@+id/rv_member"</span></span><br><span class="line">            binding_rv_data=<span class="string">"<span class="subst">@&#123;item.syncList&#125;</span>"</span></span><br><span class="line">            binding_rv_noAnim=<span class="string">"<span class="subst">@&#123;true&#125;</span>"</span></span><br><span class="line">            android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">            android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">            android:background=<span class="string">"@color/color_EEEEEE"</span></span><br><span class="line">            android:orientation=<span class="string">"vertical"</span></span><br><span class="line">            android:scrollbars=<span class="string">"none"</span></span><br><span class="line">            app:layoutManager=<span class="string">"androidx.recyclerview.widget.LinearLayoutManager"</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/androidx.recyclerview.widget.RecyclerView&gt;</span></span><br><span class="line"><span class="regexp">        &lt;--这是吸顶的title。--&gt;</span></span><br><span class="line"><span class="regexp">        &lt;TextView </span></span><br><span class="line"><span class="regexp">            android:id="@+id/tv</span>_title<span class="string">"</span></span><br><span class="line"><span class="string">            android:layout_width="</span>match_parent<span class="string">"</span></span><br><span class="line"><span class="string">            android:layout_height="</span>@dimen/pt_36<span class="string">"</span></span><br><span class="line"><span class="string">            android:background="</span>@color/white<span class="string">"</span></span><br><span class="line"><span class="string">            android:gravity="</span>center_vertical<span class="string">"</span></span><br><span class="line"><span class="string">            android:paddingStart="</span>@dimen/pt_15<span class="string">"</span></span><br><span class="line"><span class="string">            android:paddingEnd="</span>@dimen/pt_15<span class="string">"</span></span><br><span class="line"><span class="string">            android:textColor="</span>@color/color_3CC55D<span class="string">"</span></span><br><span class="line"><span class="string">            android:textSize="</span>@dimen/pt_17<span class="string">"</span></span><br><span class="line"><span class="string">            app:layout_constraintStart_toStartOf="</span>parent<span class="string">"</span></span><br><span class="line"><span class="string">            app:layout_constraintTop_toTopOf="</span>parent<span class="string">"</span></span><br><span class="line"><span class="string">            tools:text="</span>A<span class="string">" /&gt;</span></span><br><span class="line"><span class="string">        &lt;自定义的.SideBar</span></span><br><span class="line"><span class="string">            android:id="</span>@+id/sb_letter<span class="string">"</span></span><br><span class="line"><span class="string">            android:layout_width="</span>@dimen/pt_4<span class="number">0</span><span class="string">"</span></span><br><span class="line"><span class="string">            android:layout_height="</span>match_parent<span class="string">"</span></span><br><span class="line"><span class="string">            android:layout_marginTop="</span>@dimen/pt_2<span class="number">0</span><span class="string">"</span></span><br><span class="line"><span class="string">            android:layout_marginBottom="</span>@dimen/pt_3<span class="number">0</span><span class="string">"</span></span><br><span class="line"><span class="string">            android:focusable="</span>true<span class="string">"</span></span><br><span class="line"><span class="string">            android:paddingStart="</span>@dimen/pt_2<span class="number">0</span><span class="string">"</span></span><br><span class="line"><span class="string">            android:paddingEnd="</span><span class="number">10</span>dp<span class="string">"</span></span><br><span class="line"><span class="string">            android:textColorHighlight="</span>@color/color_3CC55D<span class="string">"</span></span><br><span class="line"><span class="string">            android:textSize="</span>@dimen/pt_12_5<span class="string">"</span></span><br><span class="line"><span class="string">            app:layout_constraintEnd_toEndOf="</span>parent<span class="string">" /&gt;</span></span><br><span class="line"><span class="string">        &lt;--这是按住SideBar展示的字母。--&gt;</span></span><br><span class="line"><span class="string">        &lt;TextView </span></span><br><span class="line"><span class="string">            android:id="</span>@+id/tv_letter<span class="string">"</span></span><br><span class="line"><span class="string">            android:layout_width="</span>@dimen/pt_54<span class="string">"</span></span><br><span class="line"><span class="string">            android:layout_height="</span>@dimen/pt_45<span class="string">"</span></span><br><span class="line"><span class="string">            android:layout_marginEnd="</span>@dimen/pt_4<span class="number">0</span><span class="string">"</span></span><br><span class="line"><span class="string">            android:background="</span>@drawable/im_bg_side_bar_txt<span class="string">"</span></span><br><span class="line"><span class="string">            android:gravity="</span>center<span class="string">"</span></span><br><span class="line"><span class="string">            android:includeFontPadding="</span>false<span class="string">"</span></span><br><span class="line"><span class="string">            android:paddingStart="</span>@dimen/pt_1<span class="string">"</span></span><br><span class="line"><span class="string">            android:paddingEnd="</span>@dimen/pt_1<span class="number">0</span><span class="string">"</span></span><br><span class="line"><span class="string">            android:textColor="</span>@color/color_3CC55D<span class="string">"</span></span><br><span class="line"><span class="string">            android:textSize="</span>@dimen/pt_2<span class="number">0</span><span class="string">"</span></span><br><span class="line"><span class="string">            android:visibility="</span>gone<span class="string">"</span></span><br><span class="line"><span class="string">            app:layout_constraintEnd_toEndOf="</span>parent<span class="string">"</span></span><br><span class="line"><span class="string">            app:layout_constraintTop_toTopOf="</span>@id/sb_letter<span class="string">"</span></span><br><span class="line"><span class="string">            tools:text="</span>★<span class="string">"</span></span><br><span class="line"><span class="string">            tools:visibility="</span>visible<span class="string">" /&gt;</span></span><br><span class="line"><span class="string">    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span></span><br></pre></td></tr></table></figure></p><p>RecyclerView与SideBar有联动效果。并且与具体数据业务无关。所以把这部分代码解耦出来。不单成员列表一个页面用。添加，删除群成员，AT成员页面都有一样的逻辑。要学会抽离公共逻辑👌。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> MemberListUI &#123;</span><br><span class="line">    <span class="comment">// 数据记录。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>(<span class="keyword">var</span> lastPosition: <span class="built_in">Int</span> = <span class="number">-1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">init</span><span class="params">(binding: <span class="type">ImCommonMemberListBinding</span>, rvAdapter: <span class="type">RecyclerView</span>.<span class="type">Adapter</span>&lt;*&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> <span class="keyword">data</span> = Data()</span><br><span class="line">        <span class="comment">// 这是RecyclerView。</span></span><br><span class="line">        binding.rvMember.run &#123;</span><br><span class="line">            adapter = rvAdapter</span><br><span class="line">            addOnScrollListener(<span class="keyword">object</span> : RecyclerView.OnScrollListener() &#123;</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onScrolled</span><span class="params">(v: <span class="type">RecyclerView</span>, dx: <span class="type">Int</span>, dy: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">                    <span class="keyword">super</span>.onScrolled(v, dx, dy)</span><br><span class="line">                    <span class="keyword">val</span> item = binding.item ?: <span class="keyword">return</span></span><br><span class="line">                    <span class="keyword">val</span> headerCount = MemberUtil.getHeaderCount(item)</span><br><span class="line">                    <span class="comment">// v.getChildAt(0)不会越界异常，超出索引会返回null。</span></span><br><span class="line">                    <span class="keyword">val</span> position = v.getChildAt(<span class="number">0</span>)?.let &#123; v.getChildLayoutPosition(it) &#125; ?: <span class="number">0</span></span><br><span class="line">                    <span class="comment">// 吸顶效果。</span></span><br><span class="line">                    binding.tvTitle.setVisible(position &gt; headerCount)</span><br><span class="line">                    <span class="comment">// position发生变化时。</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">data</span>.lastPosition != position) &#123;</span><br><span class="line">                        binding.tvTitle.text = MemberUtil.getTitleByIndex(item, position - headerCount)</span><br><span class="line">                        <span class="keyword">data</span>.lastPosition = position</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这是SlideBar。</span></span><br><span class="line">        binding.sbLetter.run &#123;</span><br><span class="line">            setTextView(binding.tvLetter)</span><br><span class="line">            setOnTouchingLetterChangedListener &#123; letter -&gt;</span><br><span class="line">                <span class="comment">// 联动成员列表。</span></span><br><span class="line">                <span class="keyword">val</span> item = binding.item ?: <span class="keyword">return</span><span class="symbol">@setOnTouchingLetterChangedListener</span></span><br><span class="line">                <span class="keyword">val</span> index = MemberUtil.getIndexByLetter(item, letter)</span><br><span class="line">                <span class="keyword">if</span> (index &lt; <span class="number">0</span>) <span class="keyword">return</span><span class="symbol">@setOnTouchingLetterChangedListener</span></span><br><span class="line">                <span class="comment">// 列表前可能有header。</span></span><br><span class="line">                <span class="keyword">val</span> headerCount = MemberUtil.getHeaderCount(item)</span><br><span class="line">                <span class="keyword">val</span> position = index + headerCount</span><br><span class="line">                <span class="keyword">if</span> (position <span class="keyword">in</span> <span class="number">0</span> until rvAdapter.itemCount) &#123;</span><br><span class="line">                    <span class="keyword">val</span> layoutManager = binding.rvMember.layoutManager</span><br><span class="line">                    <span class="keyword">if</span> (layoutManager <span class="keyword">is</span> LinearLayoutManager) &#123;</span><br><span class="line">                        layoutManager.scrollToPositionWithOffset(position, <span class="number">0</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">data</span>.lastPosition != position) &#123;</span><br><span class="line">                        binding.tvTitle.text = MemberUtil.getTitleByIndex(item, position - headerCount)</span><br><span class="line">                        <span class="keyword">data</span>.lastPosition = position</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>使用：</strong></p><p>只需要一句话。写在View的初始化处。（vList是include的布局ID转过来的binding。）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">MemberListUI</span><span class="selector-class">.init</span>(<span class="selector-tag">binding</span><span class="selector-class">.vList</span>, <span class="selector-tag">memberAdapter</span>)</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇的借着群成员列表的业务，主要想讲述一下几点。</p><p><strong>要点：</strong></p><ol><li>数据结构相关，尽量从业务中抽离。达到可复用效果。</li><li>数据类尽量不写具体逻辑。除了实现接口，尽可能简单。复杂逻辑外面去做。</li><li>公共UI试着抽离业务。</li></ol><p><strong>体会：</strong></p><ol><li>把代码实现有条理一点，总结起来愉快一些😊。</li></ol><h4 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h4><p><a href="https://github.com/wzmyyj/FeHome/blob/master/lib_kit/src/main/java/top/wzmyyj/kit/weight/SideBar.java" target="_blank" rel="noopener">SideBar.java</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h4&gt;&lt;p&gt;在IM项目（Android项目）中，例如群成员列表，通讯录（仿微信）等等。往往会按名称首字母分组并排序。从而方便用户检索。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://wzmyyj.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>IM项目中群成员获取与缓存策略</title>
    <link href="https://wzmyyj.top/2020/07/21/android_8/"/>
    <id>https://wzmyyj.top/2020/07/21/android_8/</id>
    <published>2020-07-21T02:00:30.000Z</published>
    <updated>2020-07-21T04:27:52.863Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在IM项目（Android）中，我们需要获取群成员，往往数据较大，获取缓慢，所以需要做个缓存，提升用户体验。</p><a id="more"></a><h4 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h4><ol><li>如果本地（缓存里）有完整数据，则取缓存里数据，否则从网路获取。（可能多个地方需要加载成员列表，但无法保证那处先加载。比如查看群成员，选择AT群内某人，管理员列表等等。）</li><li>从网络获取全部成员时，分页获取。采用递归请求，直到没有下一页。</li><li>最多缓存15个群的成员，如果超过15个，淘汰掉最近最少使用的那个群的成员。</li><li>单个成员信息获取，会存在临时成员里。（用途是，在群聊天页，实时刷新调天发送者信息。）如果这个群已经有完成的群成员列表，则删除临时成员。（聊天页发送者信息直接从完整的群成员表里取出对比）。</li><li>支持修改缓存数据。包括增加，删除，修改成员。</li></ol><h4 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h4><p><strong>缓存：</strong><br>定义成员集合接口：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 成员集合接口。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMemberSet</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放入单个成员。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">put</span><span class="params">(member: <span class="type">MemberBean</span>)</span></span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取成员。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">(imAccount: <span class="type">String</span>)</span></span>: MemberBean?</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放入全部成员。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">putAll</span><span class="params">(memberList: <span class="type">ArrayList</span>&lt;<span class="type">MemberBean</span>&gt;)</span></span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取全部成员。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getAll</span><span class="params">()</span></span>: ArrayList&lt;MemberBean&gt;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大小。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">size</span><span class="params">()</span></span>: <span class="built_in">Int</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否全部。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isAll</span><span class="params">()</span></span>: <span class="built_in">Boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义缓存器接口：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存器接口。可自定义缓存策略。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMemberCache</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">put</span><span class="params">(groupCode: <span class="type">String</span>, memberSet: <span class="type">IMemberSet</span>)</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">(groupCode: <span class="type">String</span>)</span></span>: IMemberSet?</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">(groupCode: <span class="type">String</span>)</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>获取：</strong><br>先判断缓存，再递归获取全部群成员。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> repository <span class="keyword">by</span> lazy &#123;</span><br><span class="line">    MemberRepository(RetrofitHelper.instance.createApiService(MemberApi::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>))</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载群成员。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> groupCode 群号。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> justByNet 只通过网络获取。会把结果缓存。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">loadMemberList</span><span class="params">(groupCode: <span class="type">String</span>, justByNet: <span class="type">Boolean</span> = <span class="literal">false</span>)</span></span>: Observable&lt;ArrayList&lt;MemberBean&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> cacheSet = cache.<span class="keyword">get</span>(groupCode)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (cacheSet != <span class="literal">null</span> &amp;&amp; cacheSet.isAll() &amp;&amp; justByNet.not()) &#123;</span><br><span class="line">        <span class="comment">// 从缓存中获取。</span></span><br><span class="line">        Observable.just(cacheSet.getAll())</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 从网络获取。</span></span><br><span class="line">        <span class="keyword">val</span> list = ArrayList&lt;MemberBean&gt;()</span><br><span class="line">        getMemberListFromNet(groupCode, <span class="number">1</span>, list)</span><br><span class="line">                .doOnNext &#123;</span><br><span class="line">                    <span class="keyword">val</span> <span class="keyword">set</span> = cacheSet ?: MemberSet()</span><br><span class="line">                    <span class="keyword">set</span>.putAll(it)</span><br><span class="line">                    cache.put(groupCode, <span class="keyword">set</span>)</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------private method-----------//</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归获取群成员。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getMemberListFromNet</span><span class="params">(groupCode: <span class="type">String</span>, pageNo: <span class="type">Int</span>, beanList: <span class="type">ArrayList</span>&lt;<span class="type">MemberBean</span>&gt;)</span></span></span><br><span class="line">        : Observable&lt;ArrayList&lt;MemberBean&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> repository</span><br><span class="line">            .postGroupMembers(groupCode, pageNo, pageSize)</span><br><span class="line">            .filter &#123; it.status.falseRun &#123; <span class="keyword">throw</span> RuntimeException(it.message.orEmpty()) &#125; &#125;</span><br><span class="line">            .flatMap &#123;</span><br><span class="line">                it.entry?.groupMemberList?.let &#123; l -&gt; beanList.addAll(l) &#125;</span><br><span class="line">                <span class="keyword">return</span><span class="symbol">@flatMap</span> <span class="keyword">if</span> (it.entry?.hasNextPage == <span class="literal">true</span>) &#123;</span><br><span class="line">                    getMemberListFromNet(groupCode, pageNo + <span class="number">1</span>, beanList)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Observable.just(beanList)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> MemberHelper &#123;</span><br><span class="line">    <span class="keyword">private</span> const <span class="keyword">val</span> pageSize: <span class="built_in">Int</span> = <span class="number">500</span></span><br><span class="line">    <span class="comment">// 缓存15个群。</span></span><br><span class="line">    <span class="keyword">private</span> const <span class="keyword">val</span> maxCount: <span class="built_in">Int</span> = <span class="number">15</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存器接口。可自定义缓存策略。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMemberCache</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">put</span><span class="params">(groupCode: <span class="type">String</span>, memberSet: <span class="type">IMemberSet</span>)</span></span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">(groupCode: <span class="type">String</span>)</span></span>: IMemberSet?</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">(groupCode: <span class="type">String</span>)</span></span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成员集合接口。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">IMemberSet</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 放入单个成员。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">put</span><span class="params">(member: <span class="type">MemberBean</span>)</span></span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取成员。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">(imAccount: <span class="type">String</span>)</span></span>: MemberBean?</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 放入全部成员。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">putAll</span><span class="params">(memberList: <span class="type">ArrayList</span>&lt;<span class="type">MemberBean</span>&gt;)</span></span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取全部成员。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">getAll</span><span class="params">()</span></span>: ArrayList&lt;MemberBean&gt;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 大小。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">size</span><span class="params">()</span></span>: <span class="built_in">Int</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否全部。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">isAll</span><span class="params">()</span></span>: <span class="built_in">Boolean</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认用 LRU 缓存。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> cache: IMemberCache = LruMemberCache(maxCount)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> repository <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        MemberRepository(RetrofitHelper.instance.createApiService(MemberApi::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>))</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除一个群成员的缓存。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">(groupCode: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        cache.remove(groupCode)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存里的集合。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">(groupCode: <span class="type">String</span>)</span></span>: IMemberSet? &#123;</span><br><span class="line">        <span class="keyword">return</span> cache.<span class="keyword">get</span>(groupCode)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 IMemberSet 如果没有，就存一个进去。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getIfAbsent</span><span class="params">(groupCode: <span class="type">String</span>)</span></span>: IMemberSet &#123;</span><br><span class="line">        <span class="keyword">return</span> cache.<span class="keyword">get</span>(groupCode) ?: MemberSet().apply &#123;</span><br><span class="line">            cache.put(groupCode, <span class="keyword">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        cache.clear()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载单个成员在这个群的信息。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sessionId 会话。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imAccount IM号。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">loadMember</span><span class="params">(sessionId: <span class="type">String</span>, imAccount: <span class="type">String</span>)</span></span>: Observable&lt;HttpResponse&lt;MemberBean&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> repository.getUserInfoBySession(sessionId, imAccount)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载群成员。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groupCode 群号。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> justByNet 只通过网络获取。会把结果缓存。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">loadMemberList</span><span class="params">(groupCode: <span class="type">String</span>, justByNet: <span class="type">Boolean</span> = <span class="literal">false</span>)</span></span>: Observable&lt;ArrayList&lt;MemberBean&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> cacheSet = cache.<span class="keyword">get</span>(groupCode)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (cacheSet != <span class="literal">null</span> &amp;&amp; cacheSet.isAll() &amp;&amp; justByNet.not()) &#123;</span><br><span class="line">            <span class="comment">// 从缓存中获取。</span></span><br><span class="line">            Observable.just(cacheSet.getAll())</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 从网络获取。</span></span><br><span class="line">            <span class="keyword">val</span> list = ArrayList&lt;MemberBean&gt;()</span><br><span class="line">            getMemberListFromNet(groupCode, <span class="number">1</span>, list)</span><br><span class="line">                    .doOnNext &#123;</span><br><span class="line">                        <span class="keyword">val</span> <span class="keyword">set</span> = cacheSet ?: MemberSet()</span><br><span class="line">                        <span class="keyword">set</span>.putAll(it)</span><br><span class="line">                        cache.put(groupCode, <span class="keyword">set</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//---------private method-----------//</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归获取群成员。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getMemberListFromNet</span><span class="params">(groupCode: <span class="type">String</span>, pageNo: <span class="type">Int</span>, beanList: <span class="type">ArrayList</span>&lt;<span class="type">MemberBean</span>&gt;)</span></span></span><br><span class="line">            : Observable&lt;ArrayList&lt;MemberBean&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> repository</span><br><span class="line">                .postGroupMembers(groupCode, pageNo, pageSize)</span><br><span class="line">                .filter &#123; it.status.falseRun &#123; <span class="keyword">throw</span> RuntimeException(it.message.orEmpty()) &#125; &#125;</span><br><span class="line">                .flatMap &#123;</span><br><span class="line">                    it.entry?.groupMemberList?.let &#123; l -&gt; beanList.addAll(l) &#125;</span><br><span class="line">                    <span class="keyword">return</span><span class="symbol">@flatMap</span> <span class="keyword">if</span> (it.entry?.hasNextPage == <span class="literal">true</span>) &#123;</span><br><span class="line">                        getMemberListFromNet(groupCode, pageNo + <span class="number">1</span>, beanList)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Observable.just(beanList)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * LRU缓存器。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LruMemberCache</span></span>(maxSize: <span class="built_in">Int</span>) : IMemberCache &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">val</span> lruCache = LruCache&lt;String, IMemberSet&gt;(maxSize)</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">put</span><span class="params">(groupCode: <span class="type">String</span>, memberSet: <span class="type">IMemberSet</span>)</span></span> &#123;</span><br><span class="line">            lruCache.put(groupCode, memberSet)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">(groupCode: <span class="type">String</span>)</span></span>: IMemberSet? &#123;</span><br><span class="line">            <span class="keyword">return</span> lruCache.<span class="keyword">get</span>(groupCode)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">remove</span><span class="params">(groupCode: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">            lruCache.remove(groupCode)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">            lruCache.evictAll()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成员集合。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberSet</span> : <span class="type">IMemberSet &#123;</span></span></span><br><span class="line">        <span class="comment">// 全部成员列表。</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">val</span> list = ArrayList&lt;MemberBean&gt;()</span><br><span class="line">        <span class="comment">// 是否全部成员。</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> all: <span class="built_in">Boolean</span> = <span class="literal">false</span></span><br><span class="line">        <span class="comment">// 临时存放的成员。信息不全的bean。</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">val</span> map = HashMap&lt;String, MemberBean&gt;()</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">putAll</span><span class="params">(memberList: <span class="type">ArrayList</span>&lt;<span class="type">MemberBean</span>&gt;)</span></span> &#123;</span><br><span class="line">            list.clear()</span><br><span class="line">            list.addAll(memberList)</span><br><span class="line">            all = <span class="literal">true</span></span><br><span class="line">            map.clear()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getAll</span><span class="params">()</span></span>: ArrayList&lt;MemberBean&gt; = list</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">size</span><span class="params">()</span></span>: <span class="built_in">Int</span> = list.size + map.size</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isAll</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = all</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">put</span><span class="params">(member: <span class="type">MemberBean</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">val</span> have = all &amp;&amp; list.find &#123;</span><br><span class="line">                it.imAccount == member.imAccount</span><br><span class="line">            &#125;?.apply &#123;</span><br><span class="line">                nickName = member.nickName</span><br><span class="line">                groupRole = member.groupRole</span><br><span class="line">                avatar = member.avatar</span><br><span class="line">            &#125; != <span class="literal">null</span></span><br><span class="line">            <span class="keyword">if</span> (!have) &#123;</span><br><span class="line">                map[member.imAccount.orEmpty()] = member</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">(imAccount: <span class="type">String</span>)</span></span>: MemberBean? &#123;</span><br><span class="line">            <span class="keyword">return</span> list.find &#123; it.imAccount == imAccount &#125; ?: map[imAccount]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：lruCache 计算size，不能用成员个数（即<code>list.size()</code>）来计算，因为一个群的成员在存入后中途是大小会发生变化，会导致lruCache内部维护的size计算小于0 ，<code>trimToSize</code> 方法 抛出IllegalStateException 异常。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">if</span> (<span class="built_in">size</span> &lt; <span class="number">0</span> || (<span class="built_in">map</span>.isEmpty() &amp;&amp; <span class="built_in">size</span> != <span class="number">0</span>)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(getClass().getName()</span><br><span class="line">                            + <span class="string">".sizeOf() is reporting inconsistent results!"</span>);</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li>获取数据：loadMemberList()。可以指定强制从网络获取。</li><li>群成员新增时，一般是清空这个群的缓存数据。让下次重新获取，因为新增群成员时，并不能拿到这个成员在这个群的详情。</li><li>删除和修改直接修改缓存里的数据。</li><li>结合聊天页面单个消息发送者去刷新数据。（这个下一篇会讲）。</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>设计好一个数据结构，能使开发实现更有条理。</li><li>lruCache，计算size，对同一个元素，size应当不可变。</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3262738-53ad2dbb5c80eb66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配一张图"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;在IM项目（Android）中，我们需要获取群成员，往往数据较大，获取缓慢，所以需要做个缓存，提升用户体验。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://wzmyyj.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>小故事：未熟的果实</title>
    <link href="https://wzmyyj.top/2020/07/20/story_2/"/>
    <id>https://wzmyyj.top/2020/07/20/story_2/</id>
    <published>2020-07-20T01:50:00.000Z</published>
    <updated>2020-07-21T04:36:42.622Z</updated>
    
    <content type="html"><![CDATA[<h4 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h4><p>某个场景。 </p><a id="more"></a><p>   天后要带她回天界，她不愿意发生了争执。我正躲在墙后清楚地听着一切。<br>到后面，她不想再说什么任性地跑了。我主动走了出来，面见天后，说了些“每个人可以追求自由”的话。天后先不追究，暂时放手。<br>   我知道，并不是我的话打动天后，而是天后爱自己的女儿，凡人的理念在她看来只是一些幼稚的儿话。<br>   我来到一个仓库间，我知道她一定藏在这休息。我把一张纸片对折放在桌子上的剪刀旁边。我找到了她，她正裹着麻袋小睡。她半睁开眼乏力地对我说，她需要离开这里。<br>   我背着她走在山间的马路上，两边茂盛的树丛里开着杜鹃花。她下巴搭在我左肩上，侧脸偶偶触碰到我的耳根。<br>   我问她：“为什么给我和某些人一张纸？”<br>   她直率回答道：“为了比较。”<br>   我内心叹了口气，点了点头。说道：“也是，人活着就是竞争，有竞争就有比较。”<br>   不久，我们到了目的地，一所大别墅。她下来我扶着她走。她要走长满花的小道。我在地上捡起一颗松果大小的果实。她问这是什么？我说这是一种无名树的果子，成熟后是能够吃的。我打开果实，里面的果肉还是透明里带青，显然果实还没有成熟。</p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-91af9691e455df19.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="abc"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;故事&quot;&gt;&lt;a href=&quot;#故事&quot; class=&quot;headerlink&quot; title=&quot;故事&quot;&gt;&lt;/a&gt;故事&lt;/h4&gt;&lt;p&gt;某个场景。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="故事" scheme="https://wzmyyj.top/tags/%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>IM项目中的自定义小表情实现</title>
    <link href="https://wzmyyj.top/2020/07/19/android_7/"/>
    <id>https://wzmyyj.top/2020/07/19/android_7/</id>
    <published>2020-07-19T02:10:30.000Z</published>
    <updated>2020-07-21T04:28:25.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在im项目（Android）中，用户发消息，喜欢在文字中嵌入一些小表情，以表达发送者当时的情感。除了系统输入法自带的emoji表情（emoji其实是特殊的文字）外。项目希望带一些更漂亮，带产品特色文化的自定义小表情（小图片）。</p><a id="more"></a><p>图片嵌入在文字中显示，很明显可以使用ImageSpan去实现该效果。</p><p>效果如图：</p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-8535c1eebf78d319.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图" title="WechatIMG74.jpeg"> </p><h3 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h3><p>实现上，主要问题是，实现文字与表情的转换。因此需要定义一套对应关系。</p><p>这里采用类似微信的实现，[key]对应表情。比如： [微笑] 对应 😊。</p><p><strong>工具类：</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> EmoticonHelper &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> const <span class="keyword">val</span> SIGN_LEFT = <span class="string">'['</span></span><br><span class="line">    <span class="keyword">private</span> const <span class="keyword">val</span> SIGN_RIGHT = <span class="string">']'</span></span><br><span class="line">    <span class="keyword">private</span> const <span class="keyword">val</span> ZOOM_SIZE = <span class="number">1.3</span>F</span><br><span class="line">    <span class="keyword">private</span> const <span class="keyword">val</span> CACHE_SIZE = <span class="number">60</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> def = R.drawable.im_emoticon_def</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> keyList = ArrayList&lt;String&gt;()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> cache = LruCache&lt;String, Drawable&gt;(CACHE_SIZE)</span><br><span class="line">    <span class="comment">// 表情。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> map = hashMapOf(</span><br><span class="line">            <span class="string">"微笑"</span> kto R.drawable.im_emoticon_wx,</span><br><span class="line">            <span class="string">"撇嘴"</span> kto R.drawable.im_emoticon_pz,</span><br><span class="line">            <span class="string">"色"</span> kto R.drawable.im_emoticon_se,</span><br><span class="line">            <span class="string">"得意"</span> kto R.drawable.im_emoticon_dy,</span><br><span class="line">            <span class="string">"大哭"</span> kto R.drawable.im_emoticon_dk,</span><br><span class="line">            <span class="string">"发呆"</span> kto R.drawable.im_emoticon_fd,</span><br><span class="line"></span><br><span class="line">            <span class="string">"闭嘴"</span> kto R.drawable.im_emoticon_bz,</span><br><span class="line">            <span class="string">"睡"</span> kto R.drawable.im_emoticon_shui,</span><br><span class="line">            <span class="string">"流泪"</span> kto R.drawable.im_emoticon_ll,</span><br><span class="line">            <span class="string">"尴尬"</span> kto R.drawable.im_emoticon_gg,</span><br><span class="line">            <span class="string">"发怒"</span> kto R.drawable.im_emoticon_fn,</span><br><span class="line">            <span class="string">"调皮"</span> kto R.drawable.im_emoticon_tb,</span><br><span class="line"></span><br><span class="line">            <span class="string">"惊讶"</span> kto R.drawable.im_emoticon_jy,</span><br><span class="line">            <span class="string">"囧"</span> kto R.drawable.im_emoticon_jiong,</span><br><span class="line">            <span class="string">"吐"</span> kto R.drawable.im_emoticon_tu,</span><br><span class="line">            <span class="string">"哇"</span> kto R.drawable.im_emoticon_wa,</span><br><span class="line">            <span class="string">"偷笑"</span> kto R.drawable.im_emoticon_tx,</span><br><span class="line">            <span class="string">"愉快"</span> kto R.drawable.im_emoticon_yk,</span><br><span class="line"></span><br><span class="line">            <span class="string">"白眼"</span> kto R.drawable.im_emoticon_by,</span><br><span class="line">            <span class="string">"恐惧"</span> kto R.drawable.im_emoticon_kj,</span><br><span class="line">            <span class="string">"衰"</span> kto R.drawable.im_emoticon_shuai,</span><br><span class="line">            <span class="string">"笑哭"</span> kto R.drawable.im_emoticon_kx,</span><br><span class="line">            <span class="string">"无语"</span> kto R.drawable.im_emoticon_ww,</span><br><span class="line">            <span class="string">"晕"</span> kto R.drawable.im_emoticon_yun,</span><br><span class="line"></span><br><span class="line">            <span class="string">"困"</span> kto R.drawable.im_emoticon_kun,</span><br><span class="line">            <span class="string">"亲亲"</span> kto R.drawable.im_emoticon_qq,</span><br><span class="line">            <span class="string">"庆祝"</span> kto R.drawable.im_emoticon_qz,</span><br><span class="line">            <span class="string">"汗"</span> kto R.drawable.im_emoticon_han,</span><br><span class="line">            <span class="string">"咒骂"</span> kto R.drawable.im_emoticon_zm,</span><br><span class="line">            <span class="string">"嘘"</span> kto R.drawable.im_emoticon_xu,</span><br><span class="line"></span><br><span class="line">            <span class="string">"可怜"</span> kto R.drawable.im_emoticon_kl,</span><br><span class="line">            <span class="string">"失望"</span> kto R.drawable.im_emoticon_sw,</span><br><span class="line">            <span class="string">"憨笑"</span> kto R.drawable.im_emoticon_hx,</span><br><span class="line">            <span class="string">"呲牙"</span> kto R.drawable.im_emoticon_cy,</span><br><span class="line">            <span class="string">"拥抱"</span> kto R.drawable.im_emoticon_yb,</span><br><span class="line">            <span class="string">"思考"</span> kto R.drawable.im_emoticon_sk,</span><br><span class="line"></span><br><span class="line">            <span class="string">"口罩"</span> kto R.drawable.im_emoticon_kz,</span><br><span class="line">            <span class="string">"悠闲"</span> kto R.drawable.im_emoticon_yxi,</span><br><span class="line">            <span class="string">"委屈"</span> kto R.drawable.im_emoticon_wq,</span><br><span class="line">            <span class="string">"吐舌头"</span> kto R.drawable.im_emoticon_tst,</span><br><span class="line">            <span class="string">"鬼脸"</span> kto R.drawable.im_emoticon_gl,</span><br><span class="line">            <span class="string">"阴险"</span> kto R.drawable.im_emoticon_yx,</span><br><span class="line"></span><br><span class="line">            <span class="string">"啤酒"</span> kto R.drawable.im_emoticon_pj,</span><br><span class="line">            <span class="string">"玫瑰"</span> kto R.drawable.im_emoticon_mg,</span><br><span class="line">            <span class="string">"凋谢"</span> kto R.drawable.im_emoticon_dx,</span><br><span class="line">            <span class="string">"太阳"</span> kto R.drawable.im_emoticon_ty,</span><br><span class="line">            <span class="string">"火"</span> kto R.drawable.im_emoticon_huo,</span><br><span class="line">            <span class="string">"礼物"</span> kto R.drawable.im_emoticon_lw,</span><br><span class="line"></span><br><span class="line">            <span class="string">"爱心"</span> kto R.drawable.im_emoticon_ax,</span><br><span class="line">            <span class="string">"心碎"</span> kto R.drawable.im_emoticon_xs,</span><br><span class="line">            <span class="string">"强"</span> kto R.drawable.im_emoticon_qiang,</span><br><span class="line">            <span class="string">"弱"</span> kto R.drawable.im_emoticon_ruo,</span><br><span class="line">            <span class="string">"鼓掌"</span> kto R.drawable.im_emoticon_gz,</span><br><span class="line">            <span class="string">"OK"</span> kto R.drawable.im_emoticon_ok,</span><br><span class="line"></span><br><span class="line">            <span class="string">"蛋糕"</span> kto R.drawable.im_emoticon_dg,</span><br><span class="line">            <span class="string">"合十"</span> kto R.drawable.im_emoticon_h10,</span><br><span class="line">            <span class="string">"胜利"</span> kto R.drawable.im_emoticon_sl,</span><br><span class="line">            <span class="string">"握手"</span> kto R.drawable.im_emoticon_ws,</span><br><span class="line">            <span class="string">"红包"</span> kto R.drawable.im_emoticon_hb,</span><br><span class="line">            <span class="string">"钱"</span> kto R.drawable.im_emoticon_qian</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换表情。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">transEmoticon</span><span class="params">(context: <span class="type">Context</span>, text: <span class="type">CharSequence</span>, size: <span class="type">Float</span>)</span></span>: Spannable &#123;</span><br><span class="line">        <span class="keyword">val</span> ss = SpannableString.valueOf(text)!!</span><br><span class="line">        spanEmoticon(context, ss, <span class="number">0</span>, ss.length, size)</span><br><span class="line">        <span class="keyword">return</span> ss</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * span 表情。返回最后一个span的末尾位置（不包含）。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">spanEmoticon</span><span class="params">(context: <span class="type">Context</span>, sp: <span class="type">Spannable</span>, startSp: <span class="type">Int</span>, endSp: <span class="type">Int</span>, size: <span class="type">Float</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (endSp - startSp &lt;= <span class="number">2</span>) <span class="keyword">return</span> startSp</span><br><span class="line">        <span class="keyword">var</span> last = startSp</span><br><span class="line">        <span class="keyword">val</span> wh = size.toZoom()</span><br><span class="line">        <span class="keyword">var</span> start = sp.indexOf(SIGN_LEFT, startSp)</span><br><span class="line">        <span class="keyword">while</span> (start &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> end = sp.indexOf(SIGN_RIGHT, start)</span><br><span class="line">            <span class="keyword">if</span> (end &lt;= start || end &gt;= endSp) <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">val</span> key = sp.substring(start + <span class="number">1</span>, end)</span><br><span class="line">            <span class="keyword">if</span> (key <span class="keyword">in</span> map.keys) &#123;</span><br><span class="line">                <span class="keyword">val</span> drawable = getDrawable(context, key, wh) ?: <span class="keyword">continue</span></span><br><span class="line">                sp.setSpan(ImageSpan(drawable), start, end + <span class="number">1</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)</span><br><span class="line">                last = end + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            start = sp.indexOf(SIGN_LEFT, start + <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> last</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取表情列表。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getEmoticonList</span><span class="params">()</span></span>: List&lt;Emoticon&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> keyList.map &#123; Emoticon(it, it.toCode(), map[it] ?: def) &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Emoticon</span></span>(<span class="keyword">val</span> key: String, <span class="keyword">val</span> code: String, <span class="meta">@DrawableRes</span> <span class="keyword">val</span> resId: <span class="built_in">Int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//---------private method-----------//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 Drawable 并根据 key 和 大小 缓存。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getDrawable</span><span class="params">(context: <span class="type">Context</span>, key: <span class="type">String</span>, size: <span class="type">Int</span>)</span></span>: Drawable? &#123;</span><br><span class="line">        <span class="keyword">return</span> cache[key + size] ?: ContextCompat.getDrawable(context, map[key] ?: def)?.apply &#123;</span><br><span class="line">            cache.put(key + size, <span class="keyword">this</span>)</span><br><span class="line">            <span class="keyword">this</span>.setBounds(<span class="number">0</span>, <span class="number">0</span>, size, size)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换成 code。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> String.<span class="title">toCode</span><span class="params">()</span></span> = SIGN_LEFT + <span class="keyword">this</span> + SIGN_RIGHT</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缩放大小。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Float</span>.<span class="title">toZoom</span><span class="params">()</span></span> = (<span class="keyword">this</span> * ZOOM_SIZE).toInt()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * K-V 对，同时保存 key。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> String.<span class="title">kto</span><span class="params">(that: <span class="type">Int</span>)</span></span>: Pair&lt;String, <span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">        keyList.add(<span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">return</span> Pair(<span class="keyword">this</span>, that)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主要就是做一个转换功能。同时需要考虑一下性能优化，否则效率低就会卡顿。</p><p>PS：这里优化了 查询转换策略 和 Drawable复用策略，供参考。</p><p><strong>注</strong>：Spannable有关的操作，少用String。使用CharSequence，因为不一定是String。用<code>SpannableString.valueOf(text)</code>  代替<code>new SpannableString(text)</code></p><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><p>在TextView上使用，也写个BindingAdapter方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingAdapter(value = [<span class="meta-string">"binding_text_emoticon"</span>], requireAll = true)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> TextView.<span class="title">setEmoticonText</span><span class="params">(text: <span class="type">CharSequence</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.text?.toString() != text) &#123;</span><br><span class="line">        <span class="keyword">this</span>.text = <span class="keyword">if</span> (text != <span class="literal">null</span>) &#123;</span><br><span class="line">            EmoticonHelper.transEmoticon(context, text, textSize)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BindingAdapter(value = [<span class="meta-string">"binding_text_emoticon"</span>, <span class="meta-string">"binding_text_emoticon_ellipsize"</span>], requireAll = true)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> TextView.<span class="title">setEmoticonText</span><span class="params">(text: <span class="type">CharSequence</span>?, avail: <span class="type">Float</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.text?.toString() != text) &#123;</span><br><span class="line">        <span class="keyword">this</span>.text = <span class="keyword">if</span> (text != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> emo = EmoticonHelper.transEmoticon(context, text, textSize)</span><br><span class="line">            TextUtils.ellipsize(emo, paint, avail, TextUtils.TruncateAt.END)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：其中<code>TextUtils.ellipsize(emo, paint, avail, TextUtils.TruncateAt.END)</code> 是为了解决表情在单行textView显示不下时显“…”.的问题。直接默认用TextView的<code>ellipsize</code>属性，对表情（ImageSpan）无效，会截成半个。</p><h3 id="输入框："><a href="#输入框：" class="headerlink" title="输入框："></a>输入框：</h3><p>表情要在输入框中显示。根据输入code，自动转换成表情（ImageSpan）。</p><p>方案1：给EditView设置监听，在文字变化后将文字做个转换。这样效率超低，输入越多越卡。否决！</p><p>方案2：根据具体变化的文本设置转换。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">editText.addTextChangedListener(<span class="keyword">object</span> : TextWatcher &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">afterTextChanged</span><span class="params">(s: <span class="type">Editable</span>?)</span></span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">beforeTextChanged</span><span class="params">(s: <span class="type">CharSequence</span>?, start: <span class="type">Int</span>, count: <span class="type">Int</span>, after: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTextChanged</span><span class="params">(s: <span class="type">CharSequence</span>?, start: <span class="type">Int</span>, before: <span class="type">Int</span>, count: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (s !<span class="keyword">is</span> Spannable) <span class="keyword">return</span></span><br><span class="line">                <span class="comment">// 输入会能影响到的包含前后几格。</span></span><br><span class="line">                <span class="keyword">val</span> end = start + count</span><br><span class="line">                <span class="keyword">val</span> sl = s.lastIndexOf(<span class="string">'['</span>, start)</span><br><span class="line">                <span class="keyword">val</span> st = <span class="keyword">if</span> (sl &gt; <span class="number">-1</span> &amp;&amp; start &lt;= s.indexOf(<span class="string">']'</span>, sl)) &#123;</span><br><span class="line">                    sl</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    start</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">val</span> er = s.indexOf(<span class="string">']'</span>, end)</span><br><span class="line">                <span class="keyword">val</span> en = <span class="keyword">if</span> (er &gt; <span class="number">-1</span> &amp;&amp; s.lastIndexOf(<span class="string">'['</span>, er) <span class="keyword">in</span> <span class="number">0</span> until end) &#123;</span><br><span class="line">                    er + <span class="number">1</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    end</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">val</span> last = EmoticonHelper.spanEmoticon(editText.context, s, st, en, editText.textSize)</span><br><span class="line">                <span class="comment">// 如果输入影响后几格，即连同后几格一起变成表情。将光标置于表情末尾。</span></span><br><span class="line">                <span class="keyword">if</span> (last &gt; end &amp;&amp; last &lt;= s.length) &#123;</span><br><span class="line">                    Selection.setSelection(s, last)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p><strong>注</strong>：当前输入的东西（可能是复制过来的多个字符）。可能会影响到前面或后面的几个字符。</p><blockquote><p>例如：原本文本：“[微]” ,在“微”后面输入一个“笑”，实际文本是“[微笑]”满足code。就会自动转变成😊表情。<br>此时，光标在“笑”后面，需要代码控制把光标挪到“]”的后面。才符合实际输入效果。</p></blockquote><p><strong>表情选择框操作</strong>：</p><p>删除：模拟退格，表情需要整个整个删。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">editText</span><span class="selector-class">.dispatchKeyEvent</span>(<span class="selector-tag">KeyEvent</span>(<span class="selector-tag">KeyEvent</span><span class="selector-class">.ACTION_DOWN</span>, <span class="selector-tag">KeyEvent</span><span class="selector-class">.KEYCODE_DEL</span>))</span><br></pre></td></tr></table></figure></p><p>插入：将code插入到光标末尾。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">editText.<span class="built_in">run</span> &#123; <span class="built_in">text</span>.insert(selectionEnd, code) &#125;</span><br></pre></td></tr></table></figure></p><h3 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h3><p>转发到微信，有些表情微信里没有对应。转换成emoji代替。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转发微信需要替换成 emoji 的表情。</span></span><br><span class="line"><span class="built_in">private</span> val emojiMap = hashMapOf(</span><br><span class="line">        <span class="string">"恐惧"</span> <span class="keyword">to</span> <span class="string">"\uD83D\uDE31"</span>,</span><br><span class="line">        <span class="string">"笑哭"</span> <span class="keyword">to</span> <span class="string">"\uD83D\uDE02"</span>,</span><br><span class="line">        <span class="string">"无语"</span> <span class="keyword">to</span> <span class="string">"\uD83D\uDE12"</span>,</span><br><span class="line">        <span class="string">"庆祝"</span> <span class="keyword">to</span> <span class="string">"\uD83C\uDF89"</span>,</span><br><span class="line">        <span class="string">"失望"</span> <span class="keyword">to</span> <span class="string">"\uD83D\uDE14"</span>,</span><br><span class="line">        <span class="string">"思考"</span> <span class="keyword">to</span> <span class="string">"\uD83E\uDD14"</span>,</span><br><span class="line">        <span class="string">"口罩"</span> <span class="keyword">to</span> <span class="string">"\uD83D\uDE37"</span>,</span><br><span class="line">        <span class="string">"吐舌头"</span> <span class="keyword">to</span> <span class="string">"\uD83D\uDE1D"</span>,</span><br><span class="line">        <span class="string">"鬼脸"</span> <span class="keyword">to</span> <span class="string">"\uD83D\uDC7B"</span>,</span><br><span class="line">        <span class="string">"火"</span> <span class="keyword">to</span> <span class="string">"\uD83D\uDD25"</span>,</span><br><span class="line">        <span class="string">"合十"</span> <span class="keyword">to</span> <span class="string">"\uD83D\uDE4F"</span>,</span><br><span class="line">        <span class="string">"钱"</span> <span class="keyword">to</span> <span class="string">"\uD83D\uDCB0"</span>,</span><br><span class="line">        <span class="string">"礼物"</span> <span class="keyword">to</span> <span class="string">"\uD83C\uDF81"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转发微信。不支持的 code 转化为 emoji 。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fun transCodeToEmoji(<span class="built_in">text</span>: String): String &#123;</span><br><span class="line">    var <span class="built_in">str</span> = <span class="built_in">text</span></span><br><span class="line">    <span class="keyword">for</span> (key <span class="built_in">in</span> emojiMap.keys) &#123;</span><br><span class="line">        val code = key.toCode()</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">str</span>.contains(code)) &#123;</span><br><span class="line">            <span class="built_in">str</span> = <span class="built_in">str</span>.replace(code, emojiMap[key].orEmpty())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="built_in">str</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>要点：</p><ol><li>ImageSpan实现表情的显示。😊</li><li>code与Drawable的对应关系。</li><li>Drawable性能的考量。</li><li>表情在EditText里输入的几个优化点。</li><li>微信转发时替换code。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在im项目（Android）中，用户发消息，喜欢在文字中嵌入一些小表情，以表达发送者当时的情感。除了系统输入法自带的emoji表情（emoji其实是特殊的文字）外。项目希望带一些更漂亮，带产品特色文化的自定义小表情（小图片）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://wzmyyj.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>TextView识别文本中的超链接并能点击跳转</title>
    <link href="https://wzmyyj.top/2020/05/12/android_6/"/>
    <id>https://wzmyyj.top/2020/05/12/android_6/</id>
    <published>2020-05-12T02:20:30.000Z</published>
    <updated>2020-07-21T03:09:48.048Z</updated>
    
    <content type="html"><![CDATA[<h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><p>如题所诉。需要识别出文本中的链接，并显示成超链接的UI样式。点击能够跳转打开网页（最好是自己app内部的WebView。）</p><a id="more"></a><h4 id="简单实现："><a href="#简单实现：" class="headerlink" title="简单实现："></a>简单实现：</h4><p>在 xml 里给TextView 设置:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView </span><br><span class="line">    android:<span class="attribute">autoLink</span>=<span class="string">"web"</span></span><br><span class="line">    android:<span class="attribute">linksClickable</span>=<span class="string">"true"</span></span><br><span class="line">    android:<span class="attribute">textColorLink</span>=<span class="string">"@color/color_017EBD"</span></span><br><span class="line"><span class="built_in">..</span>./&gt;</span><br></pre></td></tr></table></figure><p> 简单，但是有很大的缺点：</p><ol><li>链接下的下划线去不掉。</li><li>只能跳转到系统默认的浏览器。</li><li>链接后面不佳空格有中文就识别不出来。</li></ol><p>虽然它不好。但它是系统自带的功能，可以看看它的实现原理，可以关键地方改写它。</p><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>根据所学知识。想必也是ClickableSpan的一种实际使用罢了。可以先看看：<a href="https://www.jianshu.com/p/c53e24b715e2" target="_blank" rel="noopener">ClickableSpan的一点点摸索</a> 。</p><p><strong>关键类：</strong></p><ol><li>URLSpan：ClickableSpan的子类，带URL，下划线去不掉。</li><li>LinkMovementMethod：ClickableSpan生效所需，之前讲了。</li><li>Linkify：一个识别文字中链接，地址，邮箱之类的工具类。</li></ol><p>前面两个看ClickableSpan那篇就理解了。重点看Linkify。</p><h3 id="Linkify："><a href="#Linkify：" class="headerlink" title="Linkify："></a>Linkify：</h3><blockquote><p><em>Linkify take a piece of text and a regular expression and turns all of the regex matches in the text into clickable links.  This is particularly useful for matching things like email addresses, web URLs, etc. and making  them actionable.</em></p></blockquote><p>Linkify是一个辅助类，通过RegEx样式匹配，自动地在TextView类（和继承的类）中创建超链接。</p><p>它的方法public方法有多个重载方法。只需要了解它的主要功能。</p><p>我们可以用它实现超链接的识别。写个工具类。</p><h4 id="工具类："><a href="#工具类：" class="headerlink" title="工具类："></a>工具类：</h4><p>我们只需要自定义RegEx就可以实现我们自己的识别超链接规则：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> HyperLinkHelper &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> const <span class="keyword">val</span> REGEX = <span class="string">"(((http[s]?|ftp?|file?)://)?[a-zA-Z0-9.\\-]+\\.([a-zA-Z]&#123;2,4&#125;)(:\\d+)?(/[a-zA-Z0-9.\\-~!@#$%^&amp;*+?:_/=&lt;&gt;]*)?)|(www.[a-zA-Z0-9.\\-]+\\.([a-zA-Z]&#123;2,4&#125;)(:\\d+)?(/[a-zA-Z0-9.\\-~!@#$%^&amp;*+?:_/=&lt;&gt;]*)?)"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换成链接。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">transUrlSpan</span><span class="params">(text: <span class="type">CharSequence</span>, <span class="meta">@ColorInt</span> highColor: <span class="type">Int</span> = <span class="number">-0xa8946b</span>)</span></span>: Spannable &#123;</span><br><span class="line">        <span class="keyword">val</span> ss = SpannableString.valueOf(text)</span><br><span class="line">        Linkify.addLinks(ss, Pattern.compile(REGEX), <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">val</span> urlSpans = ss.getSpans(<span class="number">0</span>, ss.length,</span><br><span class="line">                URLSpan::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>) ?: <span class="type">return ss</span></span></span><br><span class="line">        <span class="keyword">for</span> (sp <span class="keyword">in</span> urlSpans) &#123;</span><br><span class="line">            <span class="keyword">val</span> start = ss.getSpanStart(sp)</span><br><span class="line">            <span class="keyword">val</span> end = ss.getSpanEnd(sp)</span><br><span class="line">            ss.removeSpan(sp)</span><br><span class="line">            ss.setSpan(UrlLinkSpan(sp.url.formatUrl(), highColor), start, end, Spannable.SPAN_INCLUSIVE_EXCLUSIVE)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ss</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置点击事件。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setClickListener</span><span class="params">(spanned: <span class="type">Spanned</span>, listener: <span class="type">UrlLinkSpan</span>.<span class="type">OnClickListener</span>)</span></span> &#123;</span><br><span class="line">        spanned.getSpans(<span class="number">0</span>, spanned.length, UrlLinkSpan::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">                .forEach &#123; it.listener = listener &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> String.<span class="title">formatUrl</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (indexOf(<span class="string">"http"</span>) != <span class="number">0</span></span><br><span class="line">                &amp;&amp; indexOf(<span class="string">"ftp"</span>) != <span class="number">0</span></span><br><span class="line">                &amp;&amp; indexOf(<span class="string">"file"</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="string">"http://<span class="variable">$this</span>"</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 并把URLSpan替换成样式需要的Span。</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">UrlLinkSpan</span></span>(<span class="keyword">val</span> url: String, <span class="meta">@ColorInt</span> <span class="keyword">val</span> highColor: <span class="built_in">Int</span>) : ClickableSpan() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> listener: OnClickListener? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">interface</span> <span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">fun</span> <span class="title">onUrlLinkClick</span><span class="params">(widget: <span class="type">View</span>, url: <span class="type">String</span>)</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(widget: <span class="type">View</span>)</span></span> &#123;</span><br><span class="line">            listener?.onUrlLinkClick(widget, url)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateDrawState</span><span class="params">(ds: <span class="type">TextPaint</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.updateDrawState(ds)</span><br><span class="line">            ds.color = highColor</span><br><span class="line">            ds.isUnderlineText = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 整一个 BindingAdapter 方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingAdapter(value = [<span class="meta-string">"binding_text_url_link"</span>, <span class="meta-string">"binding_url_link_listener"</span>], requireAll = true)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> TextView.<span class="title">setUrlLinkText</span><span class="params">(text: <span class="type">CharSequence</span>?, listener: <span class="type">HyperLinkHelper</span>.<span class="type">UrlLinkSpan</span>.<span class="type">OnClickListener</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.text?.toString() != text) &#123;</span><br><span class="line">        <span class="keyword">this</span>.text = <span class="keyword">if</span> (text != <span class="literal">null</span>) &#123;</span><br><span class="line">            HyperLinkHelper.transUrlSpan(text, getColor(R.color.color_017EBD)).apply &#123;</span><br><span class="line">                HyperLinkHelper.setClickListener(<span class="keyword">this</span>, listener)</span><br><span class="line">                movementMethod = ClickLinkMovementMethod</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ClickLinkMovementMethod 是为了解决长按的问题。<a href="https://www.jianshu.com/p/c53e24b715e2" target="_blank" rel="noopener">ClickableSpan的一点点摸索</a>那篇文章有讲。</p><h4 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h4><p>Linkify还可以定义如下接口：</p><ol><li><strong>Match Filter：</strong>实现acceptMatch方法，来为RegEx样式匹配添加额外的条件。当一个潜在的匹配发现时，acceptMatch被触发，匹配的开始点和结束点（包括被查找的整个文本）以参数的形式传入。</li><li><strong>Transform Filter：</strong>为格式化文本字符串提供更大的自由度，允许你修改由链接文本自动生成的隐式URI。</li></ol><p>有兴趣自己去了解。</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>要点：</p><ol><li>正则识别链接</li><li>显示样式自定义，去掉下划线。</li><li>点击逻辑自定义，跳转到自己的WebView。</li><li>解决长按冲突问题。</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3262738-e71299373be3b0e1.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配一张图"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;需求：&quot;&gt;&lt;a href=&quot;#需求：&quot; class=&quot;headerlink&quot; title=&quot;需求：&quot;&gt;&lt;/a&gt;需求：&lt;/h4&gt;&lt;p&gt;如题所诉。需要识别出文本中的链接，并显示成超链接的UI样式。点击能够跳转打开网页（最好是自己app内部的WebView。）&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://wzmyyj.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>ClickableSpan的一点点摸索</title>
    <link href="https://wzmyyj.top/2020/05/12/android_5/"/>
    <id>https://wzmyyj.top/2020/05/12/android_5/</id>
    <published>2020-05-12T01:04:30.000Z</published>
    <updated>2020-07-21T03:07:51.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ClickableSpan"><a href="#ClickableSpan" class="headerlink" title="ClickableSpan"></a>ClickableSpan</h2><p>ClickableSpan 用来实现 TextView里的文字局部的高亮和点击事件。</p><a id="more"></a><p>介绍：</p><blockquote><p>If an object of this type is attached to the text of a TextView with a movement method of <strong>LinkMovementMethod</strong>, the affected spans of text can be selected. If selected and clicked, the {@link #<strong>onClick</strong>} method will* be called.</p></blockquote><p>意思是这东西加到TextView上，并设置LinkMovementMethod，就可以选择或点击并回调onClick方法。<br>源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClickableSpan</span> <span class="keyword">extends</span> <span class="title">CharacterStyle</span> <span class="keyword">implements</span> <span class="title">UpdateAppearance</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sIdCounter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mId = sIdCounter++;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the click action associated with this span.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(@NonNull View widget)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Makes the text underlined and in the link color.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDrawState</span><span class="params">(@NonNull TextPaint ds)</span> </span>&#123;</span><br><span class="line">        ds.setColor(ds.linkColor);</span><br><span class="line">        ds.setUnderlineText(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the unique ID for this span.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The unique ID.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>源码比较简单，就是能改变文字样式的同时有个onClick抽象方法。</p><h4 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h4><p><strong>问题：</strong><br>使用中，我们经常在vm层（vm里或者 vm的辅助逻辑类里）设置数据（比如SpannableString），如果设置的是ClickableSpan。设置样式外，还需要实现onClick方法，即点击事件。然而点击事件往往是UI层的逻辑。一般不允许在vm层写点击事件逻辑。向 vm里传点击事件（往往是内部类会持有fragment），不是很可取。<br><strong>目标：</strong><br>我希望vm层只对数据的设置，UI层设置点击事件。</p><p><strong>方案：</strong><br>定义一个可以设置事件，并携带数据的 ClickableSpan。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataClickSpan</span></span>(<span class="meta">@ColorInt</span> <span class="keyword">val</span> color: <span class="built_in">Int</span>) : ClickableSpan() &#123;</span><br><span class="line">    <span class="keyword">val</span> map = HashMap&lt;String, Any?&gt;()</span><br><span class="line">    <span class="keyword">var</span> listener: OnClickListener? = <span class="literal">null</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onSpanClick</span><span class="params">(widget: <span class="type">View</span>, map: <span class="type">HashMap</span>&lt;<span class="type">String</span>, Any?&gt;)</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(widget: <span class="type">View</span>)</span></span> &#123;</span><br><span class="line">        listener?.onSpanClick(widget, map)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateDrawState</span><span class="params">(ds: <span class="type">TextPaint</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">//设置颜色</span></span><br><span class="line">        ds.color = color</span><br><span class="line">        <span class="comment">//去掉下划线</span></span><br><span class="line">        ds.isUnderlineText = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置点击事件。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Spanned.<span class="title">setDataClickListener</span><span class="params">(listener: <span class="type">DataClickSpan</span>.<span class="type">OnClickListener</span>?)</span></span> &#123;</span><br><span class="line">    getSpans(<span class="number">0</span>, <span class="keyword">this</span>.length - <span class="number">1</span>, DataClickSpan::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">            .forEach &#123; it.listener = listener &#125;</span><br><span class="line">&#125;</span><br><span class="line">再整一个BindingAdapter方法：</span><br><span class="line"><span class="meta">@BindingAdapter(value = [<span class="meta-string">"binding_spanned_data"</span>, <span class="meta-string">"binding_spanned_clickListener"</span>], requireAll = true)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> TextView.<span class="title">setSpannedClickListenerOfString</span><span class="params">(<span class="keyword">data</span>: <span class="type">Spanned</span>?, listener: <span class="type">DataClickSpan</span>.<span class="type">OnClickListener</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">data</span>?.setDataClickListener(listener)</span><br><span class="line">    movementMethod = ClickLinkMovementMethod<span class="comment">// 这个是自定义LinkMovementMethod</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>使用：</strong><br>vm 层使用，设置携带数据：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 携带 imAccount</span></span><br><span class="line"><span class="function"><span class="title">SpannableString</span><span class="params">(<span class="string">"这是可以点击的文字"</span>)</span></span><span class="selector-class">.apply</span> &#123;</span><br><span class="line">                setSpan(DataClickSpan(getColor(R<span class="selector-class">.color</span><span class="selector-class">.color_576B95</span>))</span><br><span class="line">                        <span class="selector-class">.apply</span> &#123; map[IM_ACCOUNT] = joinGroupMsg<span class="selector-class">.inviteImAccount</span> &#125;,</span><br><span class="line">                        <span class="number">1</span>, length - <span class="number">1</span>, Spanned.SPAN_INCLUSIVE_EXCLUSIVE)</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>UI 层使用，设置事件，比如这个SpannableString是设置再某个item的TextView 上。</p><ol><li>让这个Item的 VHModel 的OnItemEventListener继承DataClickSpan.OnClickListener</li><li><p>再布局里设置：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">TextView</span> </span></span></span><br><span class="line"><span class="xml">   binding_spanned_clickListener="@</span><span class="template-variable">&#123;listener&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">   binding_spanned_data="@</span><span class="template-variable">&#123;item.removeDesc&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">.../&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在Fragment里实现接口：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSpanClick</span><span class="params">(widget: <span class="type">View</span>, map: <span class="type">HashMap</span>&lt;<span class="type">String</span>, Any?&gt;)</span></span> &#123;</span><br><span class="line">            <span class="keyword">val</span> imAccount = map[ConvertUtil.IM_ACCOUNT]</span><br><span class="line">            <span class="keyword">if</span> (imAccount <span class="keyword">is</span> String) &#123;</span><br><span class="line">                RouterManager.goImUser(UserParams(imAccount), <span class="string">"ChatFragment"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>结论：</strong><br>没啥好的，就是曲折去实现分离而已。</p><p>vm 还有间接依赖View。<br>vm持有SpannableString，<br>SpannableString持有ClickableSpan，<br>ClickableSpan持有listener，<br>listener持有fragment。<br>emmmm….</p><p>ClickableSpan设计就是这样。那就来了解了解它的实现原理吧。</p><h4 id="LinkMovementMethod："><a href="#LinkMovementMethod：" class="headerlink" title="LinkMovementMethod："></a>LinkMovementMethod：</h4><p>ClickableSpan源码也看了，显然它不是主要关键。那是谁去调用ClickableSpan的onClick方法，怎么决定调用时机呢？</p><p>ClickableSpan文件头介绍中，已供出主谋是LinkMovementMethod（是一个单例）。</p><p>点击事件，显然离不开onTach的方法。LinkMovementMethod里正好有，那就决定是它了。<br><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public boolean onTouchEvent(TextView widget, Spannable <span class="keyword">buffer</span>,</span><br><span class="line">                                MotionEvent event) &#123;</span><br><span class="line">        <span class="type">int</span> action = event.getAction();</span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="type">int</span> x = (<span class="type">int</span>) event.getX();</span><br><span class="line">            <span class="type">int</span> y = (<span class="type">int</span>) event.getY();</span><br><span class="line">            x -= widget.getTotalPaddingLeft();</span><br><span class="line">            y -= widget.getTotalPaddingTop();</span><br><span class="line">            x += widget.getScrollX();</span><br><span class="line">            y += widget.getScrollY();</span><br><span class="line">            <span class="comment">// 找触碰的位置。</span></span><br><span class="line">            Layout <span class="keyword">layout</span> = widget.getLayout();</span><br><span class="line">            <span class="comment">// 第几行。</span></span><br><span class="line">            <span class="type">int</span> line = <span class="keyword">layout</span>.getLineForVertical(y);</span><br><span class="line">            <span class="comment">// 第几个字符。</span></span><br><span class="line">            <span class="type">int</span> off = <span class="keyword">layout</span>.getOffsetForHorizontal(line, x);</span><br><span class="line">            <span class="comment">// 找出触摸到的文本中的 ClickableSpan。</span></span><br><span class="line">            ClickableSpan[] links = <span class="keyword">buffer</span>.getSpans(off, off, ClickableSpan.class);</span><br><span class="line">            <span class="keyword">if</span> (links.<span class="built_in">length</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                ClickableSpan link = links[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (action == MotionEvent.ACTION_UP) &#123;</span><br><span class="line">                    <span class="comment">// 不认识，不管它。</span></span><br><span class="line">                    <span class="keyword">if</span> (link instanceof TextLinkSpan) &#123;</span><br><span class="line">                        ((TextLinkSpan) link).onClick(</span><br><span class="line">                                widget, TextLinkSpan.INVOCATION_METHOD_TOUCH);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 手指抬起时回调onClick方法。</span></span><br><span class="line">                        link.onClick(widget);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">                    <span class="comment">// 按下设置一下选中样式。也就是光标。</span></span><br><span class="line">                    <span class="keyword">if</span> (widget.getContext().getApplicationInfo().targetSdkVersion</span><br><span class="line">                            &gt;= Build.VERSION_CODES.P) &#123;</span><br><span class="line">                        <span class="comment">// Selection change will reposition the toolbar. Hide it for a few ms for a</span></span><br><span class="line">                        <span class="comment">// smoother transition.</span></span><br><span class="line">                        widget.hideFloatingToolbar(HIDE_FLOATING_TOOLBAR_DELAY_MS);</span><br><span class="line">                    &#125;</span><br><span class="line">                    Selection.setSelection(<span class="keyword">buffer</span>,</span><br><span class="line">                            <span class="keyword">buffer</span>.getSpanStart(link),</span><br><span class="line">                            <span class="keyword">buffer</span>.getSpanEnd(link));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 清除选中样式。也就是光标。</span></span><br><span class="line">                Selection.removeSelection(<span class="keyword">buffer</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> super.onTouchEvent(widget, <span class="keyword">buffer</span>, event);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>所以LinkMovementMethod也是根据触摸的位置找出ClickableSpan（同一个位置设置多个的话，也只会执行第一个），然后回调onClick。<br>LinkMovementMethod是被TextView回调。<br>看到这里ClickableSpan的实现原理基本就清楚了。</p><h5 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h5><p>有个大胆的想法💡：<br>我先自定义只带数据和样式的span。再定义一个 MySpanListener 里面有个方法<code>onClick(v:View,data:Data)</code>。<br>然后自定义LinkMovementMethod（比如叫MyMovementMethod）。同上在onTouchEvent里找出自己定义span。然后根据textView拿到listener。回调<code>onClick(v:View,data:Data)</code>方法。<br>那么问题是红字的怎么去实现（主要问题是listener，以什么维度储存，怎么储存）。比如在MyMovementMethod里设置一个弱引用的map：<code>WeakHashMap&lt;TextView,MySpanListener&gt;</code></p><p>也是一种方法，但是看起来挺别扭。哈。。。</p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-99188fa15f6b462a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配一张图"></p><h4 id="另一个问题"><a href="#另一个问题" class="headerlink" title="另一个问题"></a>另一个问题</h4><p>LinkMovementMethod有个很大的问题，就是长按时。依旧会回调onClick方法。这就会出现交互伤的bug。<br>解决方案：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> ClickLinkMovementMethod : LinkMovementMethod() &#123;</span><br><span class="line">    <span class="keyword">private</span> const <span class="keyword">val</span> CLICK_DELAY = <span class="number">500</span>L</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> lastClickTime: <span class="built_in">Long</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTouchEvent</span><span class="params">(widget: <span class="type">TextView</span>?, buffer: <span class="type">Spannable</span>?, event: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        event ?: <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        widget ?: <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">val</span> action = event.action</span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_UP ||</span><br><span class="line">                action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="keyword">var</span> x = event.x.toInt()</span><br><span class="line">            <span class="keyword">var</span> y = event.y.toInt()</span><br><span class="line">            x -= widget.totalPaddingLeft</span><br><span class="line">            y -= widget.totalPaddingTop</span><br><span class="line">            x += widget.scrollX</span><br><span class="line">            y += widget.scrollY</span><br><span class="line">            <span class="keyword">val</span> layout: Layout = widget.layout</span><br><span class="line">            <span class="keyword">val</span> line: <span class="built_in">Int</span> = layout.getLineForVertical(y)</span><br><span class="line">            <span class="keyword">val</span> off: <span class="built_in">Int</span> = layout.getOffsetForHorizontal(line, x.toFloat())</span><br><span class="line">            <span class="keyword">val</span> link: Array&lt;ClickableSpan&gt; = buffer?.getSpans(off, off, ClickableSpan::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">                    ?: <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            <span class="keyword">if</span> (link.isNotEmpty()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (action == MotionEvent.ACTION_UP) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (System.currentTimeMillis() - lastClickTime &lt; CLICK_DELAY) &#123;</span><br><span class="line">                        link[<span class="number">0</span>].onClick(widget)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">                    lastClickTime = System.currentTimeMillis()</span><br><span class="line">                    Selection.setSelection(buffer,</span><br><span class="line">                            buffer.getSpanStart(link[<span class="number">0</span>]),</span><br><span class="line">                            buffer.getSpanEnd(link[<span class="number">0</span>]))</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Selection.removeSelection(buffer)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ol><li>ClickableSpan实现点击监听的原理是LinkMovementMethod。</li><li>LinkMovementMethod存在长按时交互的bug。</li><li>ClickableSpan的数据&amp;事件分离依旧期望更优质的方案。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ClickableSpan&quot;&gt;&lt;a href=&quot;#ClickableSpan&quot; class=&quot;headerlink&quot; title=&quot;ClickableSpan&quot;&gt;&lt;/a&gt;ClickableSpan&lt;/h2&gt;&lt;p&gt;ClickableSpan 用来实现 TextView里的文字局部的高亮和点击事件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://wzmyyj.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Fragment 监听返回按键</title>
    <link href="https://wzmyyj.top/2020/05/11/android_4/"/>
    <id>https://wzmyyj.top/2020/05/11/android_4/</id>
    <published>2020-05-11T05:00:30.000Z</published>
    <updated>2020-07-21T03:05:01.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="监听返回键"><a href="#监听返回键" class="headerlink" title="监听返回键"></a>监听返回键</h2><p>Android开发中，我们用fragment承担页面UI主要的逻辑，简化activity逻辑。有个场景，fragment需要监听返回键。但fragment不像activity能感知物理按键。</p><a id="more"></a><h3 id="过去"><a href="#过去" class="headerlink" title="过去"></a>过去</h3><p>我们会写一个监听接口，让fragment实现。然后activity遍历（或根据tag）找到需要的fragment，在按返回键时，主动将事件下发给fragment。</p><p>虽然实现了fragment监听返回键的效果，但是代码需要侵入到activity，并不利于维护。google官方也考虑到了这个问题。</p><h3 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h3><p>在新版的AndroidX中：<code>ComponentActivity</code>中增加了<code>OnBackPressedDispatcher</code>（用于注册返回键监听）。</p><p>activity继承关系如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-a0a3b96b46bac1a5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WechatIMG9.jpeg" title="WechatIMG9.jpeg"> </p><p>新的fragment监听方案：</p><p><strong>关键类</strong>：OnBackPressedCallback，OnBackPressedDispatcher，ComponentActivity。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义返回键监听事件。</span></span><br><span class="line"><span class="keyword">val</span> callback = <span class="keyword">object</span> : OnBackPressedCallback(<span class="literal">false</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleOnBackPressed</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="comment">//do some thing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册监听事件。activity为ComponentActivity的子类对象即可。并绑定生命周期。</span></span><br><span class="line">activity<span class="selector-class">.onBackPressedDispatcher</span><span class="selector-class">.addCallback</span>(lifecycleOwner, callback)</span><br><span class="line"><span class="comment">// 也可以不绑定生命周期。</span></span><br><span class="line">activity<span class="selector-class">.onBackPressedDispatcher</span><span class="selector-class">.addCallback</span>(callback)</span><br></pre></td></tr></table></figure><p><code>OnBackPressedCallback</code>可以设置<code>enabled</code>，可以灵活控制要不要消费返回键点击事件。</p><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>所有代码都在fragment里。不需要要求activity写多余的逻辑。只要能拿到activity对象和所在的lifecycleOwner即可完成监听任务。甚至是在自定义view中。</p><h4 id="深入源码"><a href="#深入源码" class="headerlink" title="深入源码"></a>深入源码</h4><p><code>OnBackPressedCallback</code>：用于处理<code>OnBackPressedDispatcher.onBackPressed()</code>回调而无需将该实现与的子类强耦合的类ComponentActivity。源码比较简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OnBackPressedCallback</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mEnabled;</span><br><span class="line">    <span class="keyword">private</span> CopyOnWriteArrayList&lt;Cancellable&gt; mCancellables = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a &#123;<span class="doctag">@link</span> OnBackPressedCallback&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> enabled The default enabled state for this callback.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #setEnabled(boolean)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OnBackPressedCallback</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">        mEnabled = enabled;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the enabled state of the callback. Only when this callback</span></span><br><span class="line"><span class="comment">     * is enabled will it receive callbacks to &#123;<span class="doctag">@link</span> #handleOnBackPressed()&#125;.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Note that the enabled state is an additional layer on top of the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> androidx.lifecycle.LifecycleOwner&#125; passed to</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> OnBackPressedDispatcher#addCallback(LifecycleOwner, OnBackPressedCallback)&#125;</span></span><br><span class="line"><span class="comment">     * which controls when the callback is added and removed to the dispatcher.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> enabled whether the callback should be considered enabled</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">        mEnabled = enabled;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Checks whether this callback should be considered enabled. Only when this callback</span></span><br><span class="line"><span class="comment">     * is enabled will it receive callbacks to &#123;<span class="doctag">@link</span> #handleOnBackPressed()&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Whether this callback should be considered enabled.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mEnabled;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes this callback from any &#123;<span class="doctag">@link</span> OnBackPressedDispatcher&#125; it is currently</span></span><br><span class="line"><span class="comment">     * added to.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Cancellable cancellable: mCancellables) &#123;</span><br><span class="line">            cancellable.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Callback for handling the &#123;<span class="doctag">@link</span> OnBackPressedDispatcher#onBackPressed()&#125; event.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleOnBackPressed</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCancellable</span><span class="params">(@NonNull Cancellable cancellable)</span> </span>&#123;</span><br><span class="line">        mCancellables.add(cancellable);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeCancellable</span><span class="params">(@NonNull Cancellable cancellable)</span> </span>&#123;</span><br><span class="line">        mCancellables.remove(cancellable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>OnBackPressedDispatcher</code>：存放监听的容器，通过它统一执行。</p><p><strong>储存结构：</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用一个队列存储回调。    </span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"WeakerAccess"</span>) <span class="comment">/* synthetic access */</span></span><br><span class="line"><span class="keyword">final</span> ArrayDeque&lt;OnBackPressedCallback&gt; mOnBackPressedCallbacks = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br></pre></td></tr></table></figure><p><strong>是否有有效回调：</strong><br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainThread</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">hasEnabledCallbacks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterator&lt;OnBackPressedCallback&gt; iterator =</span><br><span class="line">                mOnBackPressedCallbacks.descendingIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (iterator.next().isEnabled()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>执行顺序：</strong><br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按先注册顺序遍历，只执行enabled为true的回调。</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterator&lt;OnBackPressedCallback&gt; iterator =</span><br><span class="line">                mOnBackPressedCallbacks.descendingIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            OnBackPressedCallback callback = iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (callback.isEnabled()) &#123;</span><br><span class="line">                callback.handleOnBackPressed();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mFallbackOnBackPressed != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mFallbackOnBackPressed.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>绑定生命周期原理：</strong><br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@MainThread</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> addCallback(<span class="keyword">@NonNull</span> LifecycleOwner owner,</span><br><span class="line">            <span class="keyword">@NonNull</span> OnBackPressedCallback onBackPressedCallback) &#123;</span><br><span class="line">        Lifecycle lifecycle = owner.getLifecycle();</span><br><span class="line">        <span class="keyword">if</span> (lifecycle.getCurrentState() == Lifecycle.State.DESTROYED) &#123;</span><br><span class="line">            <span class="keyword">return</span>;  <span class="comment">// 无视已经死亡的。</span></span><br><span class="line">        &#125;</span><br><span class="line">        onBackPressedCallback.addCancellable(</span><br><span class="line">                <span class="keyword">new</span> LifecycleOnBackPressedCancellable(lifecycle, onBackPressedCallback));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>LifecycleOnBackPressedCancellable 监听生命周期变化，决定是否cancel掉监听。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleOnBackPressedCancellable</span> <span class="keyword">implements</span> <span class="title">LifecycleEventObserver</span>,</span></span><br><span class="line"><span class="class">            <span class="title">Cancellable</span> &#123;</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Lifecycle mLifecycle;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> OnBackPressedCallback mOnBackPressedCallback;</span><br><span class="line">        <span class="meta">@Nullable</span></span><br><span class="line">        <span class="keyword">private</span> Cancellable mCurrentCancellable;</span><br><span class="line">        LifecycleOnBackPressedCancellable(<span class="meta">@NonNull</span> Lifecycle lifecycle,</span><br><span class="line">                <span class="meta">@NonNull</span> OnBackPressedCallback onBackPressedCallback) &#123;</span><br><span class="line">            mLifecycle = lifecycle;</span><br><span class="line">            mOnBackPressedCallback = onBackPressedCallback;</span><br><span class="line">            lifecycle.addObserver(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> onStateChanged(<span class="meta">@NonNull</span> LifecycleOwner source,</span><br><span class="line">                <span class="meta">@NonNull</span> Lifecycle.Event event) &#123;</span><br><span class="line">            <span class="keyword">if</span> (event == Lifecycle.Event.ON_START) &#123;</span><br><span class="line">                <span class="comment">// 此时为有效。</span></span><br><span class="line">                mCurrentCancellable = addCancellableCallback(mOnBackPressedCallback);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event == Lifecycle.Event.ON_STOP) &#123;</span><br><span class="line">                <span class="comment">// Should always be non-null</span></span><br><span class="line">                <span class="keyword">if</span> (mCurrentCancellable != <span class="literal">null</span>) &#123;</span><br><span class="line">                    mCurrentCancellable.cancel();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event == Lifecycle.Event.ON_DESTROY) &#123;</span><br><span class="line">                cancel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> cancel() &#123;</span><br><span class="line">            mLifecycle.removeObserver(<span class="keyword">this</span>);</span><br><span class="line">            mOnBackPressedCallback.removeCancellable(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (mCurrentCancellable != <span class="literal">null</span>) &#123;</span><br><span class="line">                mCurrentCancellable.cancel();</span><br><span class="line">                mCurrentCancellable = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>ComponentActivity：</strong></p><p><strong>关键代码：</strong><br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类的 onBackPressed 事件委托给 OnBackPressedDispatcher 。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> OnBackPressedDispatcher mOnBackPressedDispatcher =</span><br><span class="line">            <span class="keyword">new</span> OnBackPressedDispatcher(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    ComponentActivity.<span class="keyword">super</span>.onBackPressed();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="comment">// 自己的 onBackPressed 全交给 OnBackPressedDispatcher 处理。</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mOnBackPressedDispatcher.onBackPressed();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>利用注册监听的方式，可以很好的结偶代码，可以activity的功能分发到各个能够访问activity对象的组件上。</p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-b23b9fde057bbdd1.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配个图"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;监听返回键&quot;&gt;&lt;a href=&quot;#监听返回键&quot; class=&quot;headerlink&quot; title=&quot;监听返回键&quot;&gt;&lt;/a&gt;监听返回键&lt;/h2&gt;&lt;p&gt;Android开发中，我们用fragment承担页面UI主要的逻辑，简化activity逻辑。有个场景，fragment需要监听返回键。但fragment不像activity能感知物理按键。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://wzmyyj.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>LiveData实现消息总线</title>
    <link href="https://wzmyyj.top/2020/05/10/android_3/"/>
    <id>https://wzmyyj.top/2020/05/10/android_3/</id>
    <published>2020-05-10T07:04:30.000Z</published>
    <updated>2020-07-21T03:03:23.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="消息总线"><a href="#消息总线" class="headerlink" title="消息总线"></a>消息总线</h2><p>Android开发中，我们常遇见不同页面之间要保持数据同步。送最初的onActivityResult，到后面的第三方库EventBus，RxBus,LiveEventBus。现在我们需要利用livedata自己写一个简单的消息总线。</p><a id="more"></a><h4 id="对比过去："><a href="#对比过去：" class="headerlink" title="对比过去："></a>对比过去：</h4><p>onActivityResult：使用较为繁琐，并且在多页面下（比如栈：A,B,C。C的事件要传递给A就使用不方便了)。<br>EventBus：时代的眼泪，使用方便，但性能内存体积都是缺陷。<br>RxBus：不是库，是个文件，实现只有短短30行代码。结合Rxjava可以很方便的使用。<br>LiveEventBus：利用系统的livedata。体积小。且可以感知生命周期。<br>消息总线 | 延迟发送 | 有序接收消息 | Sticky |    生命周期感知    | 跨进程/APP | 线程分发<br>-|-|-|-|-|-|-<br>EventBus | ❌    | ✅ | ✅ | ❌ | ❌ | ✅<br>RxBus | ❌ | ❌ | ✅ | ❌ | ❌     | ✅<br>LiveEventBus | ✅ | ✅ | ✅ | ✅ | ✅ | ❌</p><p>它们都很优秀。但我们不用它们。自己写个简单的实现方案。主要参考LiveEventBus的核心逻辑。</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><p>短短50多行代码（去掉注释和空行也就30行左右）。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> EventHelper &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> map = HashMap&lt;String, EventLiveData&lt;*&gt;&gt;()</span><br><span class="line">    <span class="meta">@Suppress(<span class="meta-string">"UNCHECKED_CAST"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">with</span><span class="params">(key: <span class="type">String</span>, type: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;? = <span class="literal">null</span>)</span></span>: EventLiveData&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">            map[key] = EventLiveData&lt;T&gt;()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map[key] <span class="keyword">as</span>? EventLiveData&lt;T&gt;</span><br><span class="line">                ?: <span class="keyword">throw</span> RuntimeException(<span class="string">"cannot cast EventLiveData of "</span> + type.toString())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录版本的 MutableLiveData。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">EventLiveData</span>&lt;<span class="type">T</span>&gt; : <span class="type">MutableLiveData</span>&lt;<span class="type">T</span>&gt;</span>() &#123;</span><br><span class="line">        <span class="keyword">var</span> version: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * postValue 最终也会调 setValue ，所以只需要在这里统计 version。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(value: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">            version++</span><br><span class="line">            <span class="keyword">super</span>.setValue(value)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 订阅事件。绑定生命周期。返回 Observer 方便主动移除观察。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">observeEvent</span><span class="params">(owner: <span class="type">LifecycleOwner</span>, onEvent: (<span class="type">T</span>)</span></span> -&gt; <span class="built_in">Unit</span>): Observer&lt;T&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> EventObserver(onEvent).apply &#123; <span class="keyword">super</span>.observe(owner, <span class="keyword">this</span>) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 订阅事件。永久有效。返回 Observer 方便主动移除观察。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">observeForeverEvent</span><span class="params">(onEvent: (<span class="type">T</span>)</span></span> -&gt; <span class="built_in">Unit</span>): Observer&lt;T&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> EventObserver(onEvent).apply &#123; <span class="keyword">super</span>.observeForever(<span class="keyword">this</span>) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 不接收创建之前的消息。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        inner <span class="class"><span class="keyword">class</span> <span class="title">EventObserver</span>&lt;<span class="type">T</span>&gt;</span>(<span class="keyword">val</span> onEvent: (T) -&gt; <span class="built_in">Unit</span>) : Observer&lt;T&gt; &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">var</span> observerVersion = <span class="keyword">this</span><span class="symbol">@EventLiveData</span>.version</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onChanged</span><span class="params">(t: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (observerVersion &lt; <span class="keyword">this</span><span class="symbol">@EventLiveData</span>.version) &#123;</span><br><span class="line">                    observerVersion = <span class="keyword">this</span><span class="symbol">@EventLiveData</span>.version</span><br><span class="line">                    onEvent(t)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用姿势：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取：(一般会把这步封装起来）</span></span><br><span class="line">EventHelper.with&lt;Event&gt;(Key) <span class="comment">//or </span></span><br><span class="line">EventHelper.with(Key,Event::class.java)</span><br><span class="line"><span class="comment">// 订阅：</span></span><br><span class="line"><span class="function"><span class="title">observeEvent</span><span class="params">(owner)</span></span>&#123; event -&gt; do something &#125; <span class="comment">// 绑定生命周期。</span></span><br><span class="line">observeForeverEvent&#123; event -&gt; do something &#125; <span class="comment">// 永久有效。</span></span><br><span class="line"><span class="comment">// 发布：</span></span><br><span class="line"><span class="function"><span class="title">setValue</span><span class="params">(event)</span></span> <span class="comment">// 主线程。</span></span><br><span class="line"><span class="function"><span class="title">postValue</span><span class="params">(event)</span></span> <span class="comment">// 子线程。</span></span><br><span class="line"><span class="comment">// 移除：</span></span><br><span class="line">同liveData。</span><br></pre></td></tr></table></figure></p><h4 id="实战："><a href="#实战：" class="headerlink" title="实战："></a>实战：</h4><ol><li>封装：同一模块的事件放在一起。key 与 event 对应。</li><li>key 命名规范：模块名+子模块名+具体事件。</li><li>event类上加上ID：例如：ChangeGroupNameEvent加上groupCode明确是那个群名称变了。<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">object</span> IMEventHelper &#123;</span><br><span class="line">    <span class="keyword">private</span> const <span class="keyword">val</span> CHANGE_GROUP_NAME = <span class="string">"im/group/changeGroupName"</span></span><br><span class="line">    <span class="keyword">private</span> const <span class="keyword">val</span> CHANGE_NOTIFICATION = <span class="string">"im/group/changeNotification"</span></span><br><span class="line">    <span class="keyword">private</span> const <span class="keyword">val</span> CHANGE_MEMBER_LIST = <span class="string">"im/group/changeMemberList"</span></span><br><span class="line">    <span class="keyword">private</span> const <span class="keyword">val</span> CHANGE_GROUP_LIST = <span class="string">"im/group/changeGroupList"</span></span><br><span class="line">    <span class="keyword">private</span> const <span class="keyword">val</span> QUIT_GROUP = <span class="string">"im/group/quitGroup"</span></span><br><span class="line">    <span class="keyword">private</span> const <span class="keyword">val</span> CHOOSE_AT = <span class="string">"im/group/chooseAt"</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群名称修改。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">changeGroupName</span><span class="params">()</span></span> = EventHelper.with&lt;ChangeGroupNameEvent&gt;(CHANGE_GROUP_NAME)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公告修改。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">changeNotification</span><span class="params">()</span></span> = EventHelper.with&lt;ChangeNotificationEvent&gt;(CHANGE_NOTIFICATION)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成员列表变换。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">changeMemberList</span><span class="params">()</span></span> = EventHelper.with&lt;ChangeMemberListEvent&gt;(CHANGE_MEMBER_LIST)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群聊列表变换。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">changeGroupList</span><span class="params">()</span></span> = EventHelper.with&lt;ChangeGroupListEvent&gt;(CHANGE_GROUP_LIST)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出群聊。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">quitGroup</span><span class="params">()</span></span> = EventHelper.with&lt;QuitGroupEvent&gt;(QUIT_GROUP)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择AT 成员。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">chooseAt</span><span class="params">()</span></span> = EventHelper.with&lt;AtMemberEvent&gt;(CHOOSE_AT)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>event类：<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">ChangeGroupNameEvent</span>(<span class="title">val</span> <span class="title">groupCode</span>: <span class="type">String</span>, <span class="title">val</span> <span class="title">newName</span>: <span class="type">String</span>)</span></span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 fragment 初始化里订阅事件。</span></span><br><span class="line"><span class="selector-tag">IMEventHelper</span></span><br><span class="line">    <span class="selector-class">.changeGroupName</span>()</span><br><span class="line">    <span class="selector-class">.observeEvent</span>(this) &#123; <span class="selector-tag">vm</span><span class="selector-class">.changeName</span>(it) &#125;</span><br><span class="line"><span class="comment">// 在 其它地方发布事件。</span></span><br><span class="line"><span class="selector-tag">IMEventHelper</span></span><br><span class="line">    <span class="selector-class">.changeGroupName</span>()</span><br><span class="line">    <span class="selector-class">.postValue</span>(ChangeGroupNameEvent(groupCode, newName))</span><br></pre></td></tr></table></figure></p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>要点：</p><ol><li>利用LiveData，感知生命周期的特性。</li><li>不接收注册观察之前的消息。</li></ol><p>缺点：</p><ol><li>Livedata只能保证接收到最新的数据。中间的数据可不管哦。😯</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3262738-261af345089ca6e6.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配一张图"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;消息总线&quot;&gt;&lt;a href=&quot;#消息总线&quot; class=&quot;headerlink&quot; title=&quot;消息总线&quot;&gt;&lt;/a&gt;消息总线&lt;/h2&gt;&lt;p&gt;Android开发中，我们常遇见不同页面之间要保持数据同步。送最初的onActivityResult，到后面的第三方库EventBus，RxBus,LiveEventBus。现在我们需要利用livedata自己写一个简单的消息总线。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://wzmyyj.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>kotlin使用let报java.lang.NoClassDefFoundError</title>
    <link href="https://wzmyyj.top/2019/11/13/kotlin_1/"/>
    <id>https://wzmyyj.top/2019/11/13/kotlin_1/</id>
    <published>2019-11-13T08:27:00.000Z</published>
    <updated>2020-07-21T02:55:28.276Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题阐述"><a href="#问题阐述" class="headerlink" title="问题阐述"></a>问题阐述</h2><p>kotlin 运行这段代码报java.lang.NoClassDefFoundError错误（表示运行中找不到类的定义）。如下代码：</p><a id="more"></a><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">shareUrlToFriend</span><span class="params">(logoUrl: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">      activity?.let &#123;</span><br><span class="line">          Glide.with(<span class="keyword">this</span>)</span><br><span class="line">                  .asBitmap()</span><br><span class="line">                  .load(logoUrl)</span><br><span class="line">                  .into(<span class="keyword">object</span> : CustomTarget&lt;Bitmap&gt;() &#123;</span><br><span class="line">                      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onLoadCleared</span><span class="params">(placeholder: <span class="type">Drawable</span>?)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">                      &#125;</span><br><span class="line"></span><br><span class="line">                      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResourceReady</span><span class="params">(resource: <span class="type">Bitmap</span>, transition: <span class="type">Transition</span>&lt;<span class="type">in</span> <span class="type">Bitmap</span>&gt;?)</span></span> &#123;</span><br><span class="line">                          print(logoUrl)<span class="comment">//就是一个方法使用了logoUrl</span></span><br><span class="line"></span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>经过替换尝试，报错不是Glide的锅。根据kotlin默认最后一行是返回值的规则，这代码最后<code>let</code>下面最后一个返回对象是CustomTarget的匿名内部类对象。因为：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Glide into()方法</span></span><br><span class="line"><span class="variable">@NonNull</span></span><br><span class="line">  public &lt;Y extends Target&lt;TranscodeType&gt;&gt; Y into(<span class="variable">@NonNull</span> Y target) &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">into</span>(target, <span class="comment">/*targetListener=*/</span> null, Executors.mainThreadExecutor());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>所以，可以把上面代码替换成如下简单代码：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a: Any? = <span class="literal">null</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">(u: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        a?.let &#123;</span><br><span class="line">            <span class="keyword">object</span> : Inter &#123;</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">e</span><span class="params">()</span></span> &#123;</span><br><span class="line">                    print(u)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> t = T()</span><br><span class="line">    t.a = Any()</span><br><span class="line">    t.f(<span class="string">"u"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">e</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段执行<code>f()</code>函数代码会报一样的错误。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java<span class="selector-class">.lang</span><span class="selector-class">.NoClassDefFoundError</span>: com/a/wzm/shere/ui/T<span class="variable">$f</span>$<span class="number">1</span>$<span class="number">1</span></span><br><span class="line">    at com<span class="selector-class">.a</span><span class="selector-class">.wzm</span><span class="selector-class">.shere</span><span class="selector-class">.ui</span><span class="selector-class">.T</span><span class="selector-class">.f</span>(Test<span class="selector-class">.kt</span>:<span class="number">14</span>)</span><br><span class="line">    at com<span class="selector-class">.a</span><span class="selector-class">.wzm</span><span class="selector-class">.shere</span><span class="selector-class">.ui</span><span class="selector-class">.TestKt</span><span class="selector-class">.main</span>(Test<span class="selector-class">.kt</span>:<span class="number">28</span>)</span><br><span class="line">    at com<span class="selector-class">.a</span><span class="selector-class">.wzm</span><span class="selector-class">.shere</span><span class="selector-class">.ui</span><span class="selector-class">.TestKt</span><span class="selector-class">.main</span>(Test.kt)</span><br><span class="line">Caused by: java<span class="selector-class">.lang</span><span class="selector-class">.ClassNotFoundException</span>: com<span class="selector-class">.a</span><span class="selector-class">.wzm</span><span class="selector-class">.shere</span><span class="selector-class">.ui</span><span class="selector-class">.T</span><span class="variable">$f</span>$<span class="number">1</span>$<span class="number">1</span></span><br><span class="line">    at java<span class="selector-class">.net</span><span class="selector-class">.URLClassLoader</span><span class="selector-class">.findClass</span>(URLClassLoader<span class="selector-class">.java</span>:<span class="number">382</span>)</span><br><span class="line">    at java<span class="selector-class">.lang</span><span class="selector-class">.ClassLoader</span><span class="selector-class">.loadClass</span>(ClassLoader<span class="selector-class">.java</span>:<span class="number">424</span>)</span><br><span class="line">    at sun<span class="selector-class">.misc</span><span class="selector-class">.Launcher</span><span class="variable">$AppClassLoader</span>.loadClass(Launcher<span class="selector-class">.java</span>:<span class="number">349</span>)</span><br><span class="line">    at java<span class="selector-class">.lang</span><span class="selector-class">.ClassLoader</span><span class="selector-class">.loadClass</span>(ClassLoader<span class="selector-class">.java</span>:<span class="number">357</span>)</span><br><span class="line">    ... <span class="number">3</span> more</span><br><span class="line"></span><br><span class="line">Process finished with exit <span class="selector-tag">code</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p><code>T$f$1$1</code>是个什么鬼？</p><h2 id="问题追溯"><a href="#问题追溯" class="headerlink" title="问题追溯"></a>问题追溯</h2><p>查看翻译后的Java代码：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NO.0   主要看f()函数。</span></span><br><span class="line"><span class="keyword">public</span> final <span class="literal">void</span> f(@NotNull <span class="built_in">String</span> u) &#123;</span><br><span class="line">      Intrinsics.checkParameterIsNotNull(u, <span class="string">"u"</span>);</span><br><span class="line">      <span class="keyword">if</span> (this.a != <span class="built_in">null</span>) &#123;</span><br><span class="line">         <span class="built_in">boolean</span> var3 = <span class="literal">false</span>;</span><br><span class="line">         <span class="built_in">boolean</span> var4 = <span class="literal">false</span>;</span><br><span class="line">         int var6 = <span class="literal">false</span>;</span><br><span class="line">         <span class="number">1</span> var10000 = (<span class="number">1</span>)(<span class="literal">new</span> T$f$$inlined$let$lambda$<span class="number">1</span>(u));<span class="comment">// 1是啥？</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>里面这个<code>1</code>就是不没定义的类型（也就是报错里面需要定义的<code>T$f$1$1</code>）。为什么有个<code>1</code>出来捣乱?<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//生成的类。</span><br><span class="line">@Metadata(</span><br><span class="line">   mv = &#123;1, 1, 15&#125;,</span><br><span class="line">   bv = &#123;1, 0, 3&#125;,</span><br><span class="line">   k = 1,</span><br><span class="line">   d1 = &#123;"<span class="symbol">\u</span>0000<span class="symbol">\u</span>0011<span class="symbol">\n</span><span class="symbol">\u</span>0000<span class="symbol">\n</span><span class="symbol">\u</span>0002<span class="symbol">\u</span>0018<span class="symbol">\u</span>0002<span class="symbol">\n</span><span class="symbol">\u</span>0000<span class="symbol">\n</span><span class="symbol">\u</span>0002<span class="symbol">\u</span>0010<span class="symbol">\u</span>0002<span class="symbol">\n</span><span class="symbol">\u</span>0000*<span class="symbol">\u</span>0001<span class="symbol">\u</span>0000<span class="symbol">\b</span><span class="symbol">\n</span><span class="symbol">\u</span>0018<span class="symbol">\u</span>00002<span class="symbol">\u</span>00020<span class="symbol">\u</span>0001J<span class="symbol">\b</span><span class="symbol">\u</span>0010<span class="symbol">\u</span>0002<span class="symbol">\u</span>001a<span class="symbol">\u</span>00020<span class="symbol">\u</span>0003H<span class="symbol">\u</span>0016¨<span class="symbol">\u</span>0006<span class="symbol">\u</span>0004¸<span class="symbol">\u</span>0006<span class="symbol">\u</span>0000"&#125;,</span><br><span class="line">   d2 = &#123;"com/a/wzm/shere/ui/Te<span class="keyword">$f$1$1", "Lcom/a/wzm/share/ui/Inter;", "a", "", "app"&#125;</span></span><br><span class="line"><span class="keyword">)</span></span><br><span class="line"><span class="keyword">public final class Te$f$$inlined$let$lambda$1 implements Inter &#123;</span></span><br><span class="line"><span class="keyword">   // $FF: synthetic field</span></span><br><span class="line"><span class="keyword">   final String $u$inlined;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">   Te$f$$inlined$let$lambda$1</span>(String var1) &#123;</span><br><span class="line">      this.<span class="keyword">$u$inlined = var1;</span></span><br><span class="line"><span class="keyword">   &#125;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">   public void a</span>() &#123;</span><br><span class="line">      String var1 = this.<span class="keyword">$u$inlined;</span></span><br><span class="line"><span class="keyword">      boolean var2 = false;</span></span><br><span class="line"><span class="keyword">      System.out.print</span>(var1);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>类名跟注解里的（<code>&quot;com/a/wzm/share/ui/Te$f$1$1&quot;</code>）不一致。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>对上诉代码简单修改测试。发现只需要简单修改就不报错。比如：</p><ol><li>不用 <code>let</code>第一行用<code>if(a==null)return</code>。（规避了let的问题，不讨论）。</li><li><code>a</code>后面的<code>?</code>去掉。</li><li>方法<code>e()</code>里不使用<code>u</code></li><li><code>object: Inter</code>前面加上<code>val x=</code>进行赋值掉。</li><li>在<code>let</code>最后一行写个1，true或其他明确类型的东西。</li></ol><p>而这样做，报一样错误。</p><ol start="6"><li><code>a?.let</code>前面加<code>val c=</code>进行赋值操作。此时就算<code>?</code>（如2所诉） 去掉也报错。结合3，4，5不报错。</li></ol><p>把上诉实验通过转换，查看翻译后的Java代码：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NO.2</span></span><br><span class="line"> <span class="keyword">public</span> final <span class="literal">void</span> f(@NotNull <span class="built_in">String</span> u) &#123;</span><br><span class="line">      Intrinsics.checkParameterIsNotNull(u, <span class="string">"u"</span>);</span><br><span class="line">      Object var2 = this.a;</span><br><span class="line">      <span class="built_in">boolean</span> var3 = <span class="literal">false</span>;</span><br><span class="line">      <span class="built_in">boolean</span> var4 = <span class="literal">false</span>;</span><br><span class="line">      int var6 = <span class="literal">false</span>;</span><br><span class="line">      <span class="literal">new</span> T$f$$inlined$let$lambda$<span class="number">1</span>(u);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NO.3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> f(@NotNull <span class="keyword">String</span> u) &#123;</span><br><span class="line">      Intrinsics.checkParameterIsNotNull(u, <span class="string">"u"</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.a != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="built_in">boolean</span> var3 = <span class="keyword">false</span>;</span><br><span class="line">         <span class="built_in">boolean</span> var4 = <span class="keyword">false</span>;</span><br><span class="line">         <span class="built_in">int</span> var6 = <span class="keyword">false</span>;</span><br><span class="line">         <span class="keyword">new</span> T$f$<span class="number">1</span>$<span class="number">1</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">Object</span> var10000 = <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NO.4</span></span><br><span class="line"><span class="keyword">public</span> final <span class="literal">void</span> f(@NotNull <span class="built_in">String</span> u) &#123;</span><br><span class="line">      Intrinsics.checkParameterIsNotNull(u, <span class="string">"u"</span>);</span><br><span class="line">      <span class="keyword">if</span> (this.a != <span class="built_in">null</span>) &#123;</span><br><span class="line">         <span class="built_in">boolean</span> var3 = <span class="literal">false</span>;</span><br><span class="line">         <span class="built_in">boolean</span> var4 = <span class="literal">false</span>;</span><br><span class="line">         int var6 = <span class="literal">false</span>;</span><br><span class="line">         <span class="literal">new</span> T$f$$inlined$let$lambda$<span class="number">1</span>(u);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NO.5，最后一行加了个true</span></span><br><span class="line"><span class="keyword">public</span> final <span class="literal">void</span> f(@NotNull <span class="built_in">String</span> u) &#123;</span><br><span class="line">      Intrinsics.checkParameterIsNotNull(u, <span class="string">"u"</span>);</span><br><span class="line">      <span class="keyword">if</span> (this.a != <span class="built_in">null</span>) &#123;</span><br><span class="line">         <span class="built_in">boolean</span> var3 = <span class="literal">false</span>;</span><br><span class="line">         <span class="built_in">boolean</span> var4 = <span class="literal">false</span>;</span><br><span class="line">         int var6 = <span class="literal">false</span>;</span><br><span class="line">         <span class="literal">new</span> T$f$$inlined$let$lambda$<span class="number">1</span>(u);</span><br><span class="line">         <span class="built_in">boolean</span> var10000 = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NO.6 又出现未知类型：1</span></span><br><span class="line"><span class="keyword">public</span> final <span class="literal">void</span> f(@NotNull <span class="built_in">String</span> u) &#123;</span><br><span class="line">      Intrinsics.checkParameterIsNotNull(u, <span class="string">"u"</span>);</span><br><span class="line">      Object var3 = this.a;</span><br><span class="line">      <span class="built_in">boolean</span> var4 = <span class="literal">false</span>;</span><br><span class="line">      <span class="built_in">boolean</span> var5 = <span class="literal">false</span>;</span><br><span class="line">      int var7 = <span class="literal">false</span>;</span><br><span class="line">      <span class="number">1</span> x = (<span class="number">1</span>)(<span class="literal">new</span> T$f$$inlined$let$lambda$<span class="number">1</span>(u));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>区别</th><th>匿名类</th><th>是否出现类型（1）  </th></tr></thead><tbody><tr><td>NO.0（原始）</td><td><code>T$f$$inlined$let$lambda$1</code></td><td>是</td><td></td></tr><tr><td>NO.2</td><td><code>T$f$$inlined$let$lambda$1</code></td><td>否</td><td></td></tr><tr><td>NO.3</td><td><code>T$f$1$1</code></td><td>否</td><td></td></tr><tr><td>NO.4</td><td><code>T$f$$inlined$let$lambda$1</code></td><td>否</td><td></td></tr><tr><td>NO.5</td><td><code>T$f$$inlined$let$lambda$1</code></td><td>否</td><td></td></tr><tr><td>NO.6</td><td><code>T$f$$inlined$let$lambda$1</code></td><td>是</td><td></td></tr></tbody></table><p>首先分析第4点和第5点。第4点把匿名类对象赋值给了<code>x</code>，这意味这<code>let</code>只能取下一行做返回值（没有下行，就是<code>Unit</code>）。所以也就是说<code>let</code>有明确返回值就不报错。<br>没有明确返回值类型且“不关心”返回值（如NO.2)，也不会错。NO.0也不“关心”返回值啊？可是NO.0又对a的空判断，对<code>let</code>返回又两种结果，要么有返回，要么没返回，将也它归纳为“关心”结果。<br>至于NO.3的情况（就算结合NO.6也不报错），生成的类就是NO.0中报错中没定义的类（为什么会这样，稍后讨论）。所以也就没问题了。</p><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p>为什么<code>let</code>“关心”返回值会有区别？<code>let</code>的返回值究竟是个啥？</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>首先，查看<code>let</code>方法的定义。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@kotlin</span>.<span class="keyword">internal</span>.InlineOnly</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> T.<span class="title">let</span><span class="params">(block: (<span class="type">T</span>)</span></span> -&gt; R): R &#123;</span><br><span class="line">    contract &#123;</span><br><span class="line">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> block(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>let</code> 是泛型的扩展方法，参数是个高阶函数。作用是将一种类型<code>T</code>，通过<code>block</code>方法变换变成类型<code>R</code>。</p><p>所以<code>let</code>返回值是个<code>R</code>。那<code>R</code>是什么呢？</p><p>当然是自己定喽。我们一直都是直接用<code>let</code>，实际上严格用法应该这样：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">val</span> s = a.let&lt;<span class="built_in">Int</span>, String&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span><span class="symbol">@let</span> it.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只不过，kotlin的自动类型识别帮我们做了类型区分。</p><p>问题中的类型<code>1</code>估计就是不明确的<code>R</code>。所以我们手动指定累行试试。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">(u: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">       a?.let&lt;Any, Inter&gt; &#123;</span><br><span class="line">            <span class="keyword">object</span> : Inter &#123;</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line">                    print(u)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>对应的Java代码。<br> <figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> final <span class="literal">void</span> f(@NotNull <span class="built_in">String</span> u) &#123;</span><br><span class="line">      Intrinsics.checkParameterIsNotNull(u, <span class="string">"u"</span>);</span><br><span class="line">      <span class="keyword">if</span> (this.a != <span class="built_in">null</span>) &#123;</span><br><span class="line">         <span class="built_in">boolean</span> var3 = <span class="literal">false</span>;</span><br><span class="line">         <span class="built_in">boolean</span> var4 = <span class="literal">false</span>;</span><br><span class="line">         int var6 = <span class="literal">false</span>;</span><br><span class="line">         Inter var10000 = (Inter)(<span class="literal">new</span> T$f$$inlined$let$lambda$<span class="number">1</span>(u));</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>原本是<code>1</code>的地方变成了我们指定的类型<code>Inter</code>。代码跑起来也不在跌跟斗。</p><blockquote><p>那为什么“不关心”结果的时候翻译过来就不需要转  <code>R</code> 的类型呢？（目前找到的解释是编译器优化掉明确不需要的过程）</p></blockquote><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p>看这个问题之前，我们应该发现了，<code>let</code>里的代码直接被拷到<code>f()</code>函数里面，而不是生成高阶函数<code>block: (T) -&gt; R</code>表示的接口的实现类。而且<code>Inter</code>本该内部类的实现，也变成了定义了外部独立的类。为什么会这样？</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>这是因为<code>inline</code>关键字的作用：<code>inline</code> 的工作原理就是将内联函数的函数体复制到调用处实现内联。详情见<a href="https://www.jianshu.com/p/c63c29f3b72a?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">参考资料</a>。</p><h4 id="实验-1"><a href="#实验-1" class="headerlink" title="实验"></a>实验</h4><p>写一个没有<code>inline</code>的仿<code>let</code>方法，再替换原<code>let</code>。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> T.<span class="title">mylet</span><span class="params">(block: (<span class="type">T</span>)</span></span> -&gt; R): R &#123;</span><br><span class="line">    <span class="keyword">return</span> block(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//No.7</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">(u: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        a?.mylet &#123;</span><br><span class="line">            <span class="keyword">object</span> : Inter &#123;</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line">                    print(u)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行不报错，看法Java代码。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NO.7</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> f(@NotNull <span class="keyword">final</span> <span class="keyword">String</span> u) &#123;</span><br><span class="line">      Intrinsics.checkParameterIsNotNull(u, <span class="string">"u"</span>);</span><br><span class="line">      <span class="keyword">Object</span> var10000 = <span class="keyword">this</span>.a;</span><br><span class="line">      <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">         &lt;undefinedtype&gt; var2 = (&lt;undefinedtype&gt;)TestKt.mylet(var10000, (Function1)(<span class="keyword">new</span> Function1() &#123;</span><br><span class="line">            <span class="comment">// $FF: synthetic method</span></span><br><span class="line">            <span class="comment">// $FF: bridge method</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">Object</span> invoke(<span class="keyword">Object</span> var1) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">this</span>.invoke(var1);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @NotNull</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> &lt;undefinedtype&gt; invoke(@NotNull <span class="keyword">Object</span> it) &#123;</span><br><span class="line">               Intrinsics.checkParameterIsNotNull(it, <span class="string">"it"</span>);</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">new</span> Inter() &#123;</span><br><span class="line">                  <span class="keyword">public</span> <span class="keyword">void</span> a() &#123;</span><br><span class="line">                     <span class="keyword">String</span> var1 = u;</span><br><span class="line">                     <span class="built_in">boolean</span> var2 = <span class="keyword">false</span>;</span><br><span class="line">                     System.out.<span class="built_in">print</span>(var1);</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>内部用<code>Function1</code> 代表<code>block: (T) -&gt; R</code>表示的接口的实现类。<code>Inter</code>依旧是内部类的方式实现。</p><p>可见，<code>inline</code>关键字在处理方法体中的内部类，做了明显的优化处理（即生成一个独立的外部类）。</p><h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><p>结合问题1中的NO.3和问题2以及实验，发现<code>Inter</code>中用到<code>let</code>外部信息时，生成的类是<code>T$f$$inlined$let$lambda$1</code>（但后面还会强转为<code>T$f$1$1</code>，也就是那个<code>1</code>，然后报找不到类的定义的错误），而不使用外部的信息时，生成的类是<code>T$f$1$1</code>。区分度是什么？</p><h3 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h3><p>通过inline内联函数传入的lambda表达式生成的匿名类，如果有指向外部的变量，那么命名为：class + method + inlined + method + lambda + number。如果没有，命名为： class + method + number + number（第一个number表示<code>let</code>同层级编号，第二个number表示内部类的编号。而然运行中外部类在执行checkcast的时候，还是按照旧的规则去组装命名。（仅为猜想，未得原因）</p><p>##结论<br>其实还没有具体结论！遇到此类问题，大胆猜想，动手实践，总结规律。</p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-58be1f83080df619.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配一张图"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题阐述&quot;&gt;&lt;a href=&quot;#问题阐述&quot; class=&quot;headerlink&quot; title=&quot;问题阐述&quot;&gt;&lt;/a&gt;问题阐述&lt;/h2&gt;&lt;p&gt;kotlin 运行这段代码报java.lang.NoClassDefFoundError错误（表示运行中找不到类的定义）。如下代码：&lt;/p&gt;
    
    </summary>
    
    
      <category term="kotlin" scheme="https://wzmyyj.top/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>仿知音漫客漫画APP--MVP模式</title>
    <link href="https://wzmyyj.top/2018/08/22/android_2/"/>
    <id>https://wzmyyj.top/2018/08/22/android_2/</id>
    <published>2018-08-22T05:11:12.000Z</published>
    <updated>2020-04-08T03:27:59.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ZYMK（漫画app）"><a href="#ZYMK（漫画app）" class="headerlink" title="ZYMK（漫画app）"></a>ZYMK（漫画app）</h2><p>一款采用MVP的仿《知音漫客》漫画APP。</p><p>mvp + rxjava + retrofit + okhttp + greendao + glide + gson + jsoup + eventbus + butterknife</p><h4 id="项目地址："><a href="#项目地址：" class="headerlink" title="项目地址："></a>项目地址：</h4><p><a href="https://github.com/wzmyyj/ZYMK" target="_blank" rel="noopener">https://github.com/wzmyyj/ZYMK</a></p><a id="more"></a><h4 id="最新更新（2018-06-19）"><a href="#最新更新（2018-06-19）" class="headerlink" title="最新更新（2018.06.19）"></a>最新更新（2018.06.19）</h4><ol><li>由常规MVP改为Google推荐的MVP-Contract模式。将原本的presenter层每个类抽象出接口，并将这些接口和对应的view的接口，放在同一个contract接口里（接口里放两个接口）。</li></ol><ul><li>抽象出p层接口使v层依赖于p层接口（父类）。依赖倒转原则。</li><li>使用contract好处是p层与v层相互调用关系在一个文件里一目了然。下次会详细介绍这种模式。</li></ul><ol start="2"><li><p>修改了一些命名规范，类名，方法名等。</p></li><li><p>修改了一些类实现的方法，修复一个小bug。</p></li></ol><h4 id="Apk下载："><a href="#Apk下载：" class="headerlink" title="Apk下载："></a>Apk下载：</h4><p>链接：<a href="https://pan.baidu.com/s/1Gp5vcoUx7NEr8n17nM8wwg" target="_blank" rel="noopener">https://pan.baidu.com/s/1Gp5vcoUx7NEr8n17nM8wwg</a> 密码：b6zq</p><h4 id="项目地址：-1"><a href="#项目地址：-1" class="headerlink" title="项目地址："></a>项目地址：</h4><p><a href="https://github.com/wzmyyj/ZYMK" target="_blank" rel="noopener">https://github.com/wzmyyj/ZYMK</a></p><h4 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h4><p><img src="https://upload-images.jianshu.io/upload_images/3262738-458c938a01e30e0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/340" alt="a"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-8e5cdbfd8b1002b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/340" alt="b"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-01656f1ed477c2e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/340" alt="p"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-3666b561548ab60b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/340" alt="b"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-46e77fe88ce2d05c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/340" alt="d"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-59ef61e1c92014d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/340" alt="e"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-8d6230878da72de7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/340" alt="f"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-2c6fea325e8b6f33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/340" alt="g"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-da02b8b7a7dc43ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/340" alt="s"></p><h4 id="免责声明："><a href="#免责声明：" class="headerlink" title="免责声明："></a>免责声明：</h4><p>本程序所有资源全部来源于网络爬虫,且规避了付费的漫画，所有的漫画在网络可以免费阅读的。本程序仅供学习参考使用，严禁任何商业用途。欢迎各位进行技术讨论和交流。如果侵犯到任何人的利益，可以联系作者QQ：2018987032。进行协商，进行漫画的下架。</p><h4 id="博客："><a href="#博客：" class="headerlink" title="博客："></a>博客：</h4><p>同步于简书：<a href="https://www.jianshu.com/p/80c8541387de" target="_blank" rel="noopener">https://www.jianshu.com/p/80c8541387de</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ZYMK（漫画app）&quot;&gt;&lt;a href=&quot;#ZYMK（漫画app）&quot; class=&quot;headerlink&quot; title=&quot;ZYMK（漫画app）&quot;&gt;&lt;/a&gt;ZYMK（漫画app）&lt;/h2&gt;&lt;p&gt;一款采用MVP的仿《知音漫客》漫画APP。&lt;/p&gt;
&lt;p&gt;mvp + rxjava + retrofit + okhttp + greendao + glide + gson + jsoup + eventbus + butterknife&lt;/p&gt;
&lt;h4 id=&quot;项目地址：&quot;&gt;&lt;a href=&quot;#项目地址：&quot; class=&quot;headerlink&quot; title=&quot;项目地址：&quot;&gt;&lt;/a&gt;项目地址：&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/wzmyyj/ZYMK&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/wzmyyj/ZYMK&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://wzmyyj.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>【算法】葱的战争一道算法题</title>
    <link href="https://wzmyyj.top/2018/07/08/java_3/"/>
    <id>https://wzmyyj.top/2018/07/08/java_3/</id>
    <published>2018-07-08T08:21:29.000Z</published>
    <updated>2020-04-08T09:10:15.516Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间，同学给看了一道，某个历年的考研机试算法题。我想用面向对象的方法去实现。</p><a id="more"></a><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p> 一个m*n的棋盘，上面有k根葱，每根葱面朝方向为d（0123分别表示上下左右），每根葱一个战斗力f。每隔时间葱会向面朝方向走一格， 如果遇到棋盘边界，那么他将把面朝方向转180度（此回合葱不会走动），如果某个时刻有两个或以上的葱在同一位置，那么他们将发生 战争，只有战斗力最高的葱存活，其他的葱全部原地枯萎，不在走动，求经过t时间后所有葱的位置。 </p><ul><li>输入：第一行m n k，然后接下来k行每根葱的信息x y d f（坐标，方向，战斗力），最后一行输入时间t。  </li><li>输出：k行，分别表示每个葱的位置。   </li><li>数据范围：m和n在100内，k在1000内，t在1000内，f在1000内，保证初始每颗葱位置不同，战斗力不同。</li></ul><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><ol><li><p>建一个Cong（葱）类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cong</span> </span>&#123;<span class="comment">// 葱</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> d;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> f;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isLive = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cong</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> d, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.d = d;</span><br><span class="line">        <span class="keyword">this</span>.f = f;</span><br><span class="line">        <span class="keyword">this</span>.isLive = <span class="keyword">true</span>;<span class="comment">// 默认存活</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//   此处省略 set 和get 方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;<span class="comment">// 走</span></span><br><span class="line">        <span class="keyword">if</span> (!isLive)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">switch</span> (d) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            y++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            y--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            x--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            x++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turn</span><span class="params">()</span> </span>&#123;<span class="comment">// 转向</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isLive)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">switch</span> (d) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            d = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            d = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            d = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            d = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fight</span><span class="params">(Cong c)</span> </span>&#123;<span class="comment">// 打架</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isLive || !c.isLive())<span class="comment">// 死了没？</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.x == c.getX() &amp;&amp; <span class="keyword">this</span>.y == c.getY()) &#123;<span class="comment">// 遇见没？</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.f &gt; c.getF()) &#123;</span><br><span class="line">                c.setLive(<span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.f &lt; c.getF()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.setLive(<span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.setLive(<span class="keyword">false</span>);</span><br><span class="line">                c.setLive(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Pan（棋盘）类</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pan</span> </span>&#123;<span class="comment">// 棋盘</span></span><br><span class="line">    <span class="keyword">private</span> int m;</span><br><span class="line">    <span class="keyword">private</span> int n;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">List</span>&lt;<span class="type">Cong</span>&gt; g;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">Pan</span>(int m, int n, <span class="type">List</span>&lt;<span class="type">Cong</span>&gt; g) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        this.m = m;</span><br><span class="line">        this.n = n;</span><br><span class="line">        this.g = g;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void run() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Cong</span> <span class="built_in">c</span> : g) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">c</span>.isLive())<span class="comment">// 死亡</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            war(<span class="built_in">c</span>);<span class="comment">// 战争</span></span><br><span class="line">            <span class="keyword">if</span> (isTurn(<span class="built_in">c</span>)) &#123;<span class="comment">// 行动</span></span><br><span class="line">                <span class="built_in">c</span>.turn();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">c</span>.go();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> boolean isTurn(<span class="type">Cong</span> <span class="built_in">c</span>) &#123;<span class="comment">// 是否转向</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">c</span>.getX() == <span class="number">0</span> &amp;&amp; <span class="built_in">c</span>.getD() == <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">c</span>.getX() == m - <span class="number">1</span> &amp;&amp; <span class="built_in">c</span>.getD() == <span class="number">4</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">c</span>.getY() == <span class="number">0</span> &amp;&amp; <span class="built_in">c</span>.getD() == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">c</span>.getX() == n - <span class="number">1</span> &amp;&amp; <span class="built_in">c</span>.getD() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void war(<span class="type">Cong</span> <span class="built_in">c</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Cong</span> c1 : g) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">c</span> != c1)<span class="comment">// 不跟自己打</span></span><br><span class="line">                <span class="built_in">c</span>.fight(c1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端代码</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span> &#123;<span class="comment">// 客户端</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 输入</span></span><br><span class="line">        Scanner can = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</span><br><span class="line">        <span class="keyword">int</span> m = can.nextInt();</span><br><span class="line">        <span class="keyword">int</span> n = can.nextInt();</span><br><span class="line">        <span class="keyword">int</span> k = can.nextInt();</span><br><span class="line"></span><br><span class="line">        List&lt;Cong&gt; g = <span class="keyword">new</span> ArrayList&lt;Cong&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = can.nextInt();</span><br><span class="line">            <span class="keyword">int</span> y = can.nextInt();</span><br><span class="line">            <span class="keyword">int</span> d = can.nextInt();</span><br><span class="line">            <span class="keyword">int</span> f = can.nextInt();</span><br><span class="line">            Cong c = <span class="keyword">new</span> Cong(x, y, d, f);</span><br><span class="line">            g.<span class="keyword">add</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t = can.nextInt();</span><br><span class="line">        can.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 逻辑操作</span></span><br><span class="line">        Pan p = <span class="keyword">new</span> Pan(m, n, g);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;<span class="comment">// 执行t次</span></span><br><span class="line">            p.run();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            Cong c = g.<span class="keyword">get</span>(i);</span><br><span class="line">            System.<span class="keyword">out</span>.print(c.getX() + <span class="string">" "</span> + c.getY() + <span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="附页"><a href="#附页" class="headerlink" title="附页"></a>附页</h4><p>源码地址：<a href="https://github.com/wzmyyj/CongWar" target="_blank" rel="noopener">https://github.com/wzmyyj/CongWar</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间，同学给看了一道，某个历年的考研机试算法题。我想用面向对象的方法去实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://wzmyyj.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>小故事：蚂蚁的抉择</title>
    <link href="https://wzmyyj.top/2018/07/01/story_1/"/>
    <id>https://wzmyyj.top/2018/07/01/story_1/</id>
    <published>2018-07-01T09:20:00.000Z</published>
    <updated>2020-04-08T08:13:21.624Z</updated>
    
    <content type="html"><![CDATA[<h4 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h4><p>一天，一只小蚂蚁，来到一个三叉路口。</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/3262738-89fe91028607c777.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="我像蚂蚁吗？？？"></p><p>左边的路过去，会有一块香甜的奶酪。但是，路的另一端，有一只更大的蚂蚁正在慢慢靠近，虽然它的距离更远些。也就是说，如果过去吃奶酪，只能吃上几口，然后需要与大蚂蚁打一架，决定是否得到剩余的大半奶酪。</p><p>右边的路过去，在更远的一处，也有一块类似的奶酪。但是，没法确定那边是否有其他蚂蚁。如果有，也不确定是否比自己大，是否打得过它。</p><p>那时，…</p><p>小蚂蚁没有过去，而是回头去了别的地方。到了别的地方，小蚂蚁发现了一块能吃了可以慢慢变回来的奶酪。小蚂蚁高兴的品尝着这份甜蜜，吃得差不多了，先把剩下的留着，它会自己慢慢变回来。此后，小蚂蚁往往只过一段时间吃几口。</p><p>最后，…</p><p>有那么一天，奶酪被命运夺走了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;故事&quot;&gt;&lt;a href=&quot;#故事&quot; class=&quot;headerlink&quot; title=&quot;故事&quot;&gt;&lt;/a&gt;故事&lt;/h4&gt;&lt;p&gt;一天，一只小蚂蚁，来到一个三叉路口。&lt;/p&gt;
    
    </summary>
    
    
      <category term="故事" scheme="https://wzmyyj.top/tags/%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>关于HTTP协议你需要知道这些</title>
    <link href="https://wzmyyj.top/2018/06/09/it_5/"/>
    <id>https://wzmyyj.top/2018/06/09/it_5/</id>
    <published>2018-06-09T03:45:50.000Z</published>
    <updated>2020-07-21T02:51:10.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p><strong>超文本传输协议</strong>（英文：<strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol，缩写：<strong>HTTP</strong>）是一种用于分布式、协作式和超媒体信息系统的<a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E5%B1%82" title="应用层" target="_blank" rel="noopener">应用层协议</a><sup><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#cite_note-ietf2616-1" target="_blank" rel="noopener">[1]</a></sup>。HTTP是<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E7%90%83%E8%B3%87%E8%A8%8A%E7%B6%B2" title="万维网" target="_blank" rel="noopener">万维网</a>的数据通信的基础。</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/3262738-968561d7567c78db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HTTP"></p><p><strong>HTTP</strong>是一个客户端终端（用户）和服务器端（网站）请求和应答的标准（<a href="https://zh.wikipedia.org/wiki/TCP" title="TCP" target="_blank" rel="noopener">TCP</a>）。通过使用网页浏览器、网络爬虫或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口（默认端口为80）。</p><blockquote><p>设计HTTP最初的目的是为了提供一种发布和接收<a href="https://zh.wikipedia.org/wiki/HTML" title="HTML" target="_blank" rel="noopener">HTML</a>页面的方法。通过HTTP或者HTTPS协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。</p></blockquote><h4 id="主要特征"><a href="#主要特征" class="headerlink" title="主要特征"></a>主要特征</h4><ol><li><p>支持B/S及C/S模式。</p></li><li><p>简单快速：<br>2.1 客户向服务器请求服务时，只需传送请求方法和路径。<br>2.2 请求方法常用的有GET、HEAD、POST等，分别规定了客户与服务器不同的联系类型。<br>2.3 HTTP协议简单，使得HTTP服务器的程序规模小，通信速度快。</p></li><li><p>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p></li><li><p>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p></li><li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li></ol><h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><p>一共有八种请求方式：</p><ol><li><strong>GET</strong><br>向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。</li><li><strong>HEAD</strong><br>与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。</li><li><strong>POST</strong><br>向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。</li><li><strong>PUT</strong><br>向指定资源位置上传其最新内容。</li><li><strong>DELETE</strong><br>请求服务器删除Request-URI所标识的资源。</li><li><strong>TRACE</strong><br>回显服务器收到的请求，主要用于测试或诊断。</li><li><strong>OPTIONS</strong><br>这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用’*’来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。</li><li><strong>CONNECT</strong><br>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。</li></ol><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><p><strong>HTTP</strong>响应也是由三个部分组成，分别是：<strong>状态行</strong>、<strong>消息报头</strong>、<strong>响应正文</strong></p><ol><li><strong>状态行</strong><br>HTTP-Version Status-Code Reason-Phrase CRLF<br>1.1 HTTP-Version表示服务器HTTP协议的版本；<br>1.2 Status-Code表示服务器发回的响应状态代码；<br>1.3 Reason-Phrase表示状态代码的文本描述。</li></ol><p>状态代码有三位数字组成，第一个数字定义了响应的类别，且有五种可能取值：<br>1xx：指示信息–表示请求已接收，继续处理<br>2xx：成功–表示请求已被成功接收、理解、接受<br>3xx：重定向–要完成请求必须进行更进一步的操作<br>4xx：客户端错误–请求有语法错误或请求无法实现<br>5xx：服务器端错误–服务器未能实现合法的请求</p><p>常见状态代码、状态描述、说明：<br><code>200 OK</code>  //客户端请求成功<br><code>400 Bad Request</code> //客户端请求有语法错误，不能被服务器所理解<br><code>401 Unauthorized</code> //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br><code>403 Forbidden</code>  //服务器收到请求，但是拒绝提供服务<br><code>404 Not Found</code>  //请求资源不存在，eg：输入了错误的URL<br><code>500 Internal Server Error</code> //服务器发生不可预期的错误<br><code>503 Server Unavailable</code>  //服务器当前不能处理客户端的请求，一段时间后可能恢复正常<br>其他代码请参考<a href="https://blog.csdn.net/qq_32671287/article/details/79447951" target="_blank" rel="noopener">这篇</a></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：HTTP/<span class="number">1.1</span> <span class="number">200</span> OK （CRLF）</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>消息报头</strong><br>内容较长，请参考<a href="https://www.cnblogs.com/li0803/archive/2008/11/03/1324746.html" target="_blank" rel="noopener">HTTP协议详解（真的很经典）</a></li><li><strong>响应正文</strong><br>就是服务器返回的资源的内容。</li></ol><h2 id="协议例子"><a href="#协议例子" class="headerlink" title="协议例子"></a>协议例子</h2><p>下面是一个HTTP客户端与服务器之间会话的例子，运行于<a href="http://www.google.com，端口80。" target="_blank" rel="noopener">www.google.com，端口80。</a></p><h4 id="请求信息"><a href="#请求信息" class="headerlink" title="请求信息"></a>请求信息</h4><p>发出的请求信息（message request）包括以下几个:</p><ol><li>请求行（例如GET /images/logo.gif HTTP/1.1，表示从/images目录下请求logo.gif这个文件）。</li><li>请求头（例如Accept-Language: en）。</li><li>空行。</li><li>其他消息体。</li></ol><p>请求行和标题必须以<cr><lf>作为结尾。空行内必须只有<cr><lf>而无其他空格。在HTTP/1.1协议中，所有的请求头，除Host外，都是可选的。</lf></cr></lf></cr></p><ul><li><strong>客户端请求</strong><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: www.google.com</span><br></pre></td></tr></table></figure></li></ul><p>（末尾有一个空行。第一行指定方法、资源路径、协议版本；第二行是在1.1版里必带的一个header作用指定主机）</p><ul><li><strong>服务器应答</strong><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Content-<span class="string">Length:</span> <span class="number">3059</span></span><br><span class="line"><span class="string">Server:</span> GWS/<span class="number">2.0</span></span><br><span class="line"><span class="string">Date:</span> Sat, <span class="number">11</span> Jan <span class="number">2003</span> <span class="number">02</span>:<span class="number">44</span>:<span class="number">04</span> GMT</span><br><span class="line">Content-<span class="string">Type:</span> text/html</span><br><span class="line">Cache-<span class="string">control:</span> <span class="keyword">private</span></span><br><span class="line">Set-<span class="string">Cookie:</span> PREF=ID=<span class="number">73</span><span class="string">d4aef52e57bae9:</span>TM=<span class="number">1042253044</span>:LM=<span class="number">1042253044</span>:S=SMCc_HRPCQiqy</span><br><span class="line">X9j; expires=Sun, <span class="number">17</span>-Jan<span class="number">-2038</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">07</span> GMT; path=/; domain=.google.com</span><br><span class="line"><span class="string">Connection:</span> keep-alive</span><br></pre></td></tr></table></figure></li></ul><p>（紧跟着一个空行，并且由HTML格式的文本组成了Google的主页）</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p><strong>超文本传输协议（HTTP）</strong>已经演化出了很多版本，它们中的大部分都是向下兼容的。在 RFC 2145 中描述了HTTP版本号的用法。客户端在请求的开始告诉服务器它采用的协议版本号，而后者则在响应中采用相同或者更早的协议版本。</p><h4 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP/0.9"></a>HTTP/0.9</h4><p>已过时。只接受GET一种请求方法，没有在通讯中指定版本号，且不支持请求头。由于该版本不支持POST方法，因此客户端无法向服务器传递太多信息。</p><h4 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h4><p>这是第一个在通讯中指定版本号的HTTP协议版本，至今仍被广泛采用，特别是在代理服务器中。</p><h4 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h4><p>持久连接被默认采用，并能很好地配合代理服务器工作。还支持以管道方式在同时发送多个请求，以便降低线路负载，提高传输速度。<br>HTTP/1.1相较于HTTP/1.0协议的区别主要体现在：</p><ul><li>缓存处理</li><li>带宽优化及网络连接的使用</li><li>错误通知的管理</li><li>消息在网络中的发送</li><li>互联网地址的维护</li><li>安全性及完整性</li></ul><blockquote><p>在HTTP 0.9和1.0中，<a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" title="传输控制协议" target="_blank" rel="noopener">TCP连接</a>在每一次请求/回应对之后关闭。在HTTP 1.1中，引入了保持连接的机制，一个连接可以重复在多个请求/回应使用。持续连接的方式可以大大减少等待时间，因为在发出第一个请求后，双方不需要重新运行TCP交握程序。</p></blockquote><h4 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h4><p>当前版本，于2015年5月作为互联网标准正式发布。</p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-18abea8f497619f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配一张图"></p><h2 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h2><p>尽管<a href="https://zh.wikipedia.org/wiki/TCP/IP" title="TCP/IP" target="_blank" rel="noopener">TCP/IP</a>协议是互联网上最流行的应用，HTTP协议中，并没有规定必须使用它或它支持的层。事实上，HTTP可以在任何互联网协议上，或其他网络上实现。HTTP假定其下层协议提供可靠的传输。因此，任何能够提供这种保证的协议都可以被其使用。因此也就是其在TCP/IP协议族使用TCP作为其传输层。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTP&quot;&gt;&lt;a href=&quot;#HTTP&quot; class=&quot;headerlink&quot; title=&quot;HTTP&quot;&gt;&lt;/a&gt;HTTP&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;超文本传输协议&lt;/strong&gt;（英文：&lt;strong&gt;H&lt;/strong&gt;yper&lt;strong&gt;T&lt;/strong&gt;ext &lt;strong&gt;T&lt;/strong&gt;ransfer &lt;strong&gt;P&lt;/strong&gt;rotocol，缩写：&lt;strong&gt;HTTP&lt;/strong&gt;）是一种用于分布式、协作式和超媒体信息系统的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E5%B1%82&quot; title=&quot;应用层&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;应用层协议&lt;/a&gt;&lt;sup&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#cite_note-ietf2616-1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;。HTTP是&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%85%A8%E7%90%83%E8%B3%87%E8%A8%8A%E7%B6%B2&quot; title=&quot;万维网&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;万维网&lt;/a&gt;的数据通信的基础。&lt;/p&gt;
    
    </summary>
    
    
      <category term="IT" scheme="https://wzmyyj.top/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>Java获取中文首字母</title>
    <link href="https://wzmyyj.top/2018/06/08/java_2/"/>
    <id>https://wzmyyj.top/2018/06/08/java_2/</id>
    <published>2018-06-08T08:21:29.000Z</published>
    <updated>2020-04-08T03:09:05.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中文首字母"><a href="#中文首字母" class="headerlink" title="中文首字母"></a>中文首字母</h2><p>有时候，比如微信上根据名字拼音首字母排序并检索。那么用Java获取中文首字母是怎么实现的呢？</p><a id="more"></a><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>不多说，直接上代码：（写个工具类）<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class FirstCharUtil &#123;</span><br><span class="line">    <span class="comment">// 简体中文的编码范围从B0A1（45217）一直到F7FE（63486）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> BEGIN = <span class="number">45217</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> END = <span class="number">63486</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照声 母表示，这个表是在GB2312中的出现的第一个汉字，</span></span><br><span class="line">    <span class="comment">//也就是说“啊”是代表首字母a的第一个汉字。</span></span><br><span class="line">    <span class="comment">// i, u, v都不做声母, 自定规则跟随前面的字母</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">char</span>[] charTable = &#123; <span class="string">'啊'</span>, <span class="string">'芭'</span>, <span class="string">'擦'</span>, <span class="string">'搭'</span>, <span class="string">'蛾'</span>, <span class="string">'发'</span>, <span class="string">'噶'</span>, <span class="string">'哈'</span>,</span><br><span class="line">            <span class="string">'哈'</span>, <span class="string">'击'</span>, <span class="string">'喀'</span>, <span class="string">'垃'</span>, <span class="string">'妈'</span>, <span class="string">'拿'</span>, <span class="string">'哦'</span>, <span class="string">'啪'</span>, <span class="string">'期'</span>, <span class="string">'然'</span>, <span class="string">'撒'</span>, <span class="string">'塌'</span>, <span class="string">'塌'</span>,</span><br><span class="line">            <span class="string">'塌'</span>, <span class="string">'挖'</span>, <span class="string">'昔'</span>, <span class="string">'压'</span>, <span class="string">'匝'</span>, &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二十六个字母区间对应二十七个端点</span></span><br><span class="line">    <span class="comment">// GB2312码汉字区间十进制表示</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span>[] table = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">27</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应首字母区间表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">char</span>[] initialTable = &#123; <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>,</span><br><span class="line">            <span class="string">'H'</span>, <span class="string">'H'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>,</span><br><span class="line">            <span class="string">'T'</span>, <span class="string">'T'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>, &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 得到GB2312码的首字母区间端点表，十进制。</span></span><br><span class="line">            table[i] = gbValue(charTable[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        table[<span class="number">26</span>] = END;<span class="comment">// 区间表结尾</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------------public方法区------------------------</span></span><br><span class="line">    <span class="comment">// 根据一个包含汉字的字符串返回一个汉字拼音首字母的字符串。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> first(<span class="keyword">String</span> S) &#123;</span><br><span class="line">        <span class="keyword">String</span> Result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (S == <span class="keyword">null</span> || S.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"#"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">char</span> cs = S.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Result += Char2Initial(cs);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Result = <span class="string">"%"</span>;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------------private方法区------------------------</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输入字符,得到他的声母,英文字母返回对应的大写字母,其他非简体汉字返回 '#'　</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">char</span> Char2Initial(<span class="built_in">char</span> ch) &#123;</span><br><span class="line">        <span class="comment">// 对英文字母的处理：小写字母转换为大写，大写的直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (ch &gt;= <span class="string">'a'</span> &amp;&amp; ch &lt;= <span class="string">'z'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">char</span>) (ch - <span class="string">'a'</span> + <span class="string">'A'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ch &gt;= <span class="string">'A'</span> &amp;&amp; ch &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ch;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对非英文字母的处理：转化为首字母，然后判断是否在码表范围内，</span></span><br><span class="line">        <span class="comment">// 若不是，则直接返回。</span></span><br><span class="line">        <span class="comment">// 若是，则在码表内的进行判断。</span></span><br><span class="line">        <span class="built_in">int</span> gb = gbValue(ch);<span class="comment">// 汉字转换首字母</span></span><br><span class="line">        <span class="keyword">if</span> ((gb &lt; BEGIN) || (gb &gt; END))<span class="comment">// 在码表区间之前，直接返回</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'#'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 判断匹配码表区间，匹配到就break,判断区间形如“[,)”</span></span><br><span class="line">            <span class="keyword">if</span> ((gb &gt;= table[i]) &amp;&amp; (gb &lt; table[i + <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (gb == END) &#123;<span class="comment">// 补上GB2312区间最右端</span></span><br><span class="line">            i = <span class="number">25</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> initialTable[i]; <span class="comment">// 在码表区间中，返回首字母</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取出汉字的编码 cn 汉字 　　</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> gbValue(<span class="built_in">char</span> ch) &#123;<span class="comment">// 将一个汉字（GB2312）转换为十进制表示。</span></span><br><span class="line">        <span class="keyword">String</span> <span class="built_in">str</span> = <span class="keyword">new</span> <span class="keyword">String</span>();</span><br><span class="line">        <span class="built_in">str</span> += ch;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] bytes = <span class="built_in">str</span>.getBytes(<span class="string">"GB2312"</span>);</span><br><span class="line">            <span class="keyword">if</span> (bytes.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (bytes[<span class="number">0</span>] &lt;&lt; <span class="number">8</span> &amp; <span class="number">0xff00</span>) + (bytes[<span class="number">1</span>] &amp; <span class="number">0xff</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用方式：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String <span class="keyword">first</span> = FirstCharUtil.<span class="keyword">first</span>(<span class="string">"加哇"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li><p>原理： GB2312编码中的中文是按照拼音排序的。</p></li><li><p>注意：一些生僻的字无法获得正确的首字母，原因是这些字都是后加入的。（所以有些名字在通讯录的排序不太一样。）</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/3262738-84bc2fab75a4b5d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50" alt="配一张图"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>比较好用的第三方库：汉语拼音库。<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">implementation</span> <span class="string">'com.belerweb:pinyin4j:2.5.1'</span></span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@NonNull</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> first(@Nullable <span class="keyword">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">str</span> == <span class="keyword">null</span> || <span class="built_in">str</span>.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"#"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">char</span> ch = <span class="built_in">str</span>.charAt(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ch &gt;= <span class="string">'a'</span> &amp;&amp; ch &lt;= <span class="string">'z'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">char</span>) (ch - <span class="string">'a'</span> + <span class="string">'A'</span>) + <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ch &gt;= <span class="string">'A'</span> &amp;&amp; ch &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ch + <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        HanyuPinyinOutputFormat defaultFormat = <span class="keyword">new</span> HanyuPinyinOutputFormat();</span><br><span class="line">        <span class="comment">// 设置大小写格式</span></span><br><span class="line">        defaultFormat.setCaseType(HanyuPinyinCaseType.UPPERCASE);</span><br><span class="line">        <span class="comment">// 设置声调格式：</span></span><br><span class="line">        defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</span><br><span class="line">        <span class="keyword">if</span> (Character.toString(ch).matches(<span class="string">"[\\u4E00-\\u9FA5]+"</span>)) &#123;</span><br><span class="line">            <span class="keyword">String</span>[] array = PinyinHelper.toHanyuPinyinStringArray(ch, defaultFormat);</span><br><span class="line">            <span class="keyword">if</span> (array != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> array[<span class="number">0</span>].charAt(<span class="number">0</span>) + <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"#"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>HanyuPinyin（汉语拼音），太真实了😂🤣。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;中文首字母&quot;&gt;&lt;a href=&quot;#中文首字母&quot; class=&quot;headerlink&quot; title=&quot;中文首字母&quot;&gt;&lt;/a&gt;中文首字母&lt;/h2&gt;&lt;p&gt;有时候，比如微信上根据名字拼音首字母排序并检索。那么用Java获取中文首字母是怎么实现的呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://wzmyyj.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub搭建个人博客网站</title>
    <link href="https://wzmyyj.top/2018/06/06/it_4/"/>
    <id>https://wzmyyj.top/2018/06/06/it_4/</id>
    <published>2018-06-06T08:44:28.000Z</published>
    <updated>2020-04-08T02:56:11.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天，带大家利用Hexo和GitHub搭建属于自己的个人博客。</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/3262738-1f1bcd714aa0813c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配一张图"></p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p><strong>Hexo</strong> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成<strong>静态网页</strong>。<br><img src="https://upload-images.jianshu.io/upload_images/3262738-3ee0ba3dbdf8b14d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HEXO"><br>传送门：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官网中文文档</a></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h4 id="1-安装-amp-配置git"><a href="#1-安装-amp-配置git" class="headerlink" title="1. 安装&amp;配置git"></a>1. 安装&amp;配置git</h4><ol><li><p>访问<a href="https://link.jianshu.com?t=https%3A%2F%2Fgit-scm.com%2Fdownload%2F" target="_blank" rel="noopener">git官网</a>，下载git。</p></li><li><p>双击exe文件安装，一路next即可。</p></li><li><p>安装好git之后，配置用户名和邮箱。打开git-bash：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置全局用户名</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"yourname"</span></span><br><span class="line"><span class="comment"># 配置全局邮箱</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"youremail@qq.com"</span></span><br></pre></td></tr></table></figure></li></ol><p>用户名和邮箱同你的GitHub（如果没有，去<a href="https://github.com/" target="_blank" rel="noopener">GitHub官网</a>注册一个，注册好后记得邮箱验证才能使用。）</p><ol start="4"><li>配置ssh。打开git-bash：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">输入，回车</span></span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3262738-74fc02a4f120db42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git-bash"></p><p>复制（右键+复制，不能ctrl+c，这里ctrl+c是结束命令的意思）图中的<code>/c/Users/Administrator/.ssh/id_rsa</code>，然后把它粘贴（右键+粘贴）到冒号后面，然后回车，回车，回车。。。直到结束（中间的冒号，除了第一个不用管只管回车）。</p><ol start="5"><li>github上生成ssh key，是本地Git绑定GitHub。<br>网页上打开github -&gt; 点击头像 -&gt; Settings -&gt; 左边菜单找到 SSH and GPG keys -&gt; New SSH key（绿色按钮）-&gt; title随便填（用英文）-&gt; key值（打开<code>/c/Users/Administrator/.ssh/id_rsa</code>所在的文件夹，找到<code>id_rsa.pub</code>，注意是<code>pub</code>后缀那个文件，用记事本打开，复制里面的内容，粘贴到key值。） -&gt; 点击下面的Add SSH key -&gt; 完成。</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3262738-c00abd250a8c646b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加ssh key"></p><h4 id="2-下载安装Node-js"><a href="#2-下载安装Node-js" class="headerlink" title="2. 下载安装Node.js"></a>2. 下载安装Node.js</h4><ol><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js下载地址</a></li></ol><p><img src="http://upload-images.jianshu.io/upload_images/3262738-f6e51a1168c37de9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Node.js"></p><ol start="2"><li>安装步骤：一路默认就行（安装路径根据自己需要更改）</li></ol><h2 id="安装-amp-使用Hexo"><a href="#安装-amp-使用Hexo" class="headerlink" title="安装&amp;使用Hexo"></a>安装&amp;使用Hexo</h2><ol><li><p>在D盘下（其他地方也可以）创建一个空文件夹（命名为你主页的名字或者HEXO，随便啦，这里以名为MyBlog为例）</p></li><li><p>打开cmd命令窗口（桌面任务栏最左边那个wins图标-&gt; 搜索 -&gt; 输入cmd ，回车）。切换到D盘：（输入，回车）<code>D:</code> -&gt; 切换到刚才建的空文件夹：（输入，回车）<code>cd MyBlog</code>。</p></li><li><p>安装Hexo</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换国内源</span></span><br><span class="line">npm<span class="built_in"> config </span><span class="builtin-name">set</span> <span class="attribute">registry</span>=<span class="string">"http://registry.cnpmjs.org"</span></span><br><span class="line"><span class="comment"># 安装hexo</span></span><br><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure></li></ol><p>等待安装完成。</p><ol start="4"><li>初始化Hexo：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始化Hexo</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装必要模块</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li></ol><p>这时，MyBlog文件夹下就生成了一些文件。文件目录如下：<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── <span class="variable">_config</span>.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── <span class="variable">_drafts</span></span><br><span class="line">|   └── <span class="variable">_posts</span></span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></p><p>到此博客已经配置好了（虽然是默认的样子）</p><ol start="4"><li>测试一下：<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 生成静态文件</span></span><br><span class="line">hexo g <span class="comment">// 或 hexo generate</span></span><br><span class="line"><span class="meta"># 本地测试</span></span><br><span class="line">hexo s <span class="comment">// 或 hexo server</span></span><br></pre></td></tr></table></figure></li></ol><p>然后浏览器上查看 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><p>是不是可以看到一个简单的网页（如果不能，有可能是4000端口被别的程序占用了，自行百度解决方案）。</p><h2 id="个性化"><a href="#个性化" class="headerlink" title="个性化"></a>个性化</h2><h4 id="1-config-yml文件"><a href="#1-config-yml文件" class="headerlink" title="1. _config.yml文件"></a>1. _config.yml文件</h4><p>打开该目录下的_config.yml文件。（用什么软件打开？你可以用editplus或者vs 等，也可以直接用记事本，就是比较难看，建议下个editplus吧。）</p><p>修改成你想要的内容。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">换成你的主页标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">主页副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">主页介绍的一句话</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">你的名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment">#语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span> <span class="comment">#时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, </span></span><br><span class="line"><span class="comment">##set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://voidking.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">500</span></span><br><span class="line"><span class="attr">  yearly:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">  monthly:</span> <span class="literal">true</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">tag_generator:</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">100</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">category_generator:</span> </span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">100</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: http://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">你用的主题文件夹名字</span> <span class="comment"># themes下的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">    repository:</span> <span class="string">GitHub仓库地址</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></p><h4 id="2-修改主题"><a href="#2-修改主题" class="headerlink" title="2. 修改主题"></a>2. 修改主题</h4><p>在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo官网主题</a>中找一个喜欢的主题。</p><blockquote><p>找到后，一般都有介绍怎么使用该主题的文章，如果没有，把网页拉到最下面。看到：2018 | Powered by <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> Theme by <a href="https://github.com/lewis-geek/hexo-theme-Aath" target="_blank" rel="noopener">Aath</a><br>点击Theme by 后面的连接，一般会简介到本主题在GitHub上的仓库地址。</p></blockquote><p>根据说明，下载配置主题。</p><ol><li>下载主题。比如：<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到MyBlog文件下，cmd执行</span></span><br><span class="line">git <span class="keyword">clone</span> <span class="title">-b</span> <span class="keyword">master</span> <span class="title">https</span>://github.com/lewis-geek/hexo-theme-Aath.git themes/aath</span><br></pre></td></tr></table></figure></li></ol><p>一般，它会自动下载到themes文件夹下。</p><ol start="2"><li><p>跟换博客的主题：<br>下载好后，你在_config.yml（主题是MyBlog文件夹下的）中的theme：处配置成你下在的主题名字（就是下载的主题文件夹名字 ）</p></li><li><p>配置主题：<br>根据GitHub上的说明配置<code>themes/主题名</code>目录下的_config.yml（不要与MyBlog的_config.yml搞混）。不同主题，配置起来不一样，所以在此不详解了。</p></li></ol><h2 id="发布到GitHub"><a href="#发布到GitHub" class="headerlink" title="发布到GitHub"></a>发布到GitHub</h2><ol><li>Github上新建仓库：<br>打开GitHub网页，点击头像旁边的“+”号 -&gt; New repository -&gt; 填写名字（必须是：<code>你GitHub的名字.github.io</code>）</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3262738-82fb37c43746cde5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="如图"></p><ol start="2"><li><p>本地配置Git：<br>在MyBlog文件夹下的_config.yml配置（大约在底部位置）：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: http:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">    type:</span> git</span><br><span class="line"><span class="symbol">    repository:</span> https:<span class="comment">//github.com/wzmyyj/wzmyyj.github.io.git</span></span><br><span class="line"><span class="symbol">    branch:</span> master</span><br></pre></td></tr></table></figure></li><li><p>上传：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果想把原来的清除</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新生成静态文件</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传到提交文件</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>第一次提交需要GitHub登录账号和密码。</p></blockquote><p>上传完成后，浏览器打开：<code>https://你的GitHub名字.github.io</code> 就是你的博客主页地址了。（GitHub响应比较慢，刚上传需要等一小会才能打开最新的。）</p><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><ol><li>新建一篇文章：<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 新建</span></span><br><span class="line">hexo <span class="keyword">new</span> <span class="type">post</span> 文章名</span><br></pre></td></tr></table></figure></li></ol><p>在<code>Myblog\source\_posts</code>目录下你将看到一个新建的<code>文章名.md</code>文件。</p><ol start="2"><li>编辑文章：<br>用editplus打开编辑，用Markdown格式书写。<blockquote><p>保存时，记得把编码方式改成<code>utf-8</code>。Document -&gt; File Encoding -&gt; Convert Encoding…</p></blockquote></li></ol><p>建议用<a href="https://www.jianshu.com/" target="_blank" rel="noopener">简书</a>写（简书设置里把编辑器改成Markdown），然后复制过去。好处是图片存在简书上，访问起来快些。</p><ol start="3"><li>上传：（和前面一样）<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果想把原来的清除</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新生成静态文件</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地测试</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传到提交文件</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ol><p>到此，你的博客主页已经完成。</p><hr><h2 id="跟换域名"><a href="#跟换域名" class="headerlink" title="跟换域名"></a>跟换域名</h2><ol><li><p>购买一个域名。（阿里云，腾讯云，万网均可注册购买域名）</p></li><li><p>修改你域名的DNS地址为 <code>dns22.hichina.com</code>, <code>dns21.hichina.com</code></p></li><li><p>域名解析上，CNAME到<code>你的GitHub名字.github.io</code><br><img src="https://upload-images.jianshu.io/upload_images/3262738-8c3ac04dc82dd47e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名解析"></p></li><li><p>然后在你的本地站点目录里的source目录下添加一个CNAME文件。以文本编辑器打开CNAME，里面添加你的域名（不加http://）。</p></li><li><p>在MyBlog文件夹下的_config.yml配置url：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put <span class="keyword">in</span> a subdirectory, </span><br><span class="line">## set url <span class="keyword">as</span> <span class="string">'http://yoursite.com/child'</span> and root <span class="keyword">as</span> <span class="string">'/child/'</span></span><br><span class="line">url: http:<span class="comment">//wzmyyj.top   //你的域名</span></span><br></pre></td></tr></table></figure></li><li><p>重新生成静态文件和上传到GitHub。</p></li></ol><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><h4 id="1-参考文献："><a href="#1-参考文献：" class="headerlink" title="1. 参考文献："></a>1. 参考文献：</h4><p><a href="https://www.jianshu.com/p/75efaba08a34" target="_blank" rel="noopener">Hexo环境搭建2018年5月版</a><br><a href="https://www.jianshu.com/p/189fd945f38f" target="_blank" rel="noopener">搭建个人博客-hexo+github详细完整步骤</a><br><a href="https://www.jianshu.com/p/834d7cc0668d" target="_blank" rel="noopener">我的博客是如何搭建的（github pages + HEXO + 域名绑定）</a><br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo中文文档</a></p><h4 id="2-我的主页："><a href="#2-我的主页：" class="headerlink" title="2. 我的主页："></a>2. 我的主页：</h4><p> 欢迎大家浏览我的主页：<a href="http://wzmyyj.top/">http://wzmyyj.top/</a></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-afbda65c187b9cd5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="wzmyyj的主页"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天，带大家利用Hexo和GitHub搭建属于自己的个人博客。&lt;/p&gt;
    
    </summary>
    
    
      <category term="IT" scheme="https://wzmyyj.top/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>《提问的智慧》</title>
    <link href="https://wzmyyj.top/2018/06/04/it_3/"/>
    <id>https://wzmyyj.top/2018/06/04/it_3/</id>
    <published>2018-06-04T12:08:19.000Z</published>
    <updated>2020-04-08T02:54:49.884Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提问的智慧"><a href="#提问的智慧" class="headerlink" title="提问的智慧"></a>提问的智慧</h2><p><strong>艾瑞克.史蒂文.雷蒙德（Eric Steven Raymond）</strong>Thyrsus Enterprises <a href="mailto:&#101;&#x73;&#x72;&#64;&#116;&#104;&#x79;&#114;&#115;&#x75;&#x73;&#x2e;&#x63;&#111;&#x6d;" target="_blank" rel="noopener">&#101;&#x73;&#x72;&#64;&#116;&#104;&#x79;&#114;&#115;&#x75;&#x73;&#x2e;&#x63;&#111;&#x6d;</a><br><strong>瑞克.莫恩（Rick Moen）</strong> <a href="mailto:&#114;&#101;&#x73;&#112;&#111;&#110;&#x64;&#45;&#97;&#x75;&#x74;&#x6f;&#x40;&#108;&#x69;&#x6e;&#x75;&#x78;&#109;&#97;&#x66;&#x69;&#x61;&#46;&#99;&#x6f;&#x6d;" target="_blank" rel="noopener">&#114;&#101;&#x73;&#112;&#111;&#110;&#x64;&#45;&#97;&#x75;&#x74;&#x6f;&#x40;&#108;&#x69;&#x6e;&#x75;&#x78;&#109;&#97;&#x66;&#x69;&#x61;&#46;&#99;&#x6f;&#x6d;</a><br>版权©2001, 2006 Eric S. Raymond, Rick Moen<br><a id="more"></a></p><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://github.com/tvvocold/How-To-Ask-Questions-The-Smart-Way/blob/master/README.md" target="_blank" rel="noopener">中文：《提问的智慧》</a>   </p><p><a href="http://www.catb.org/~esr/faqs/smart-questions.html" target="_blank" rel="noopener">原文：《How To Ask Questions The Smart Way》</a></p><p>要求声明：（我们不提供该项目的服务支持！）</p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-4ab43d3ebaf85698.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配一张图"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;提问的智慧&quot;&gt;&lt;a href=&quot;#提问的智慧&quot; class=&quot;headerlink&quot; title=&quot;提问的智慧&quot;&gt;&lt;/a&gt;提问的智慧&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;艾瑞克.史蒂文.雷蒙德（Eric Steven Raymond）&lt;/strong&gt;Thyrsus Enterprises &lt;a href=&quot;mailto:&amp;#101;&amp;#x73;&amp;#x72;&amp;#64;&amp;#116;&amp;#104;&amp;#x79;&amp;#114;&amp;#115;&amp;#x75;&amp;#x73;&amp;#x2e;&amp;#x63;&amp;#111;&amp;#x6d;&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#101;&amp;#x73;&amp;#x72;&amp;#64;&amp;#116;&amp;#104;&amp;#x79;&amp;#114;&amp;#115;&amp;#x75;&amp;#x73;&amp;#x2e;&amp;#x63;&amp;#111;&amp;#x6d;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;瑞克.莫恩（Rick Moen）&lt;/strong&gt; &lt;a href=&quot;mailto:&amp;#114;&amp;#101;&amp;#x73;&amp;#112;&amp;#111;&amp;#110;&amp;#x64;&amp;#45;&amp;#97;&amp;#x75;&amp;#x74;&amp;#x6f;&amp;#x40;&amp;#108;&amp;#x69;&amp;#x6e;&amp;#x75;&amp;#x78;&amp;#109;&amp;#97;&amp;#x66;&amp;#x69;&amp;#x61;&amp;#46;&amp;#99;&amp;#x6f;&amp;#x6d;&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#114;&amp;#101;&amp;#x73;&amp;#112;&amp;#111;&amp;#110;&amp;#x64;&amp;#45;&amp;#97;&amp;#x75;&amp;#x74;&amp;#x6f;&amp;#x40;&amp;#108;&amp;#x69;&amp;#x6e;&amp;#x75;&amp;#x78;&amp;#109;&amp;#97;&amp;#x66;&amp;#x69;&amp;#x61;&amp;#46;&amp;#99;&amp;#x6f;&amp;#x6d;&lt;/a&gt;&lt;br&gt;版权©2001, 2006 Eric S. Raymond, Rick Moen&lt;br&gt;
    
    </summary>
    
    
      <category term="IT" scheme="https://wzmyyj.top/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>仅仅是几张图而已哦^_^</title>
    <link href="https://wzmyyj.top/2018/06/01/pic_1/"/>
    <id>https://wzmyyj.top/2018/06/01/pic_1/</id>
    <published>2018-06-01T13:20:06.000Z</published>
    <updated>2020-04-08T09:22:19.070Z</updated>
    
    <content type="html"><![CDATA[<p>仅仅是几张图而已哦^_^。。。啦啦啦啦啦。。。。</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/3262738-0a5b030907019fd8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="gnnsss.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-1f1bcd714aa0813c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mobile.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-a3c676432cc233b9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="top.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-ead0b680c718d0f0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="asvj.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-a352875140dd6e56.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="timhjjjg.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-470a155a7e646aa9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="efth"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-88b2dbf8325fe9c1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="15029432"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-9fb08e3a3c7f56fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="14965"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-5adb08044438699f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pixi"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-3136460bca8a06e8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1467996192"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-ada962ff5b01c7a8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="12546e7.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-3cd7e10ae7b522d6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="kgy.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-ead0b680c718d0f0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="asvj.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-c0beadca93f5962e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="assdf.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-52a9711439ee133d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="wzm.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;仅仅是几张图而已哦^_^。。。啦啦啦啦啦。。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="图片" scheme="https://wzmyyj.top/tags/%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>Android日志工具Log类</title>
    <link href="https://wzmyyj.top/2018/05/22/android_1/"/>
    <id>https://wzmyyj.top/2018/05/22/android_1/</id>
    <published>2018-05-22T12:43:30.000Z</published>
    <updated>2020-07-21T02:58:13.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="android-util-Log类"><a href="#android-util-Log类" class="headerlink" title="android.util.Log类"></a>android.util.Log类</h2><p><code>android.util.Log</code>常用的方法有以下5个：<code>Log.v()</code>， <code>Log.d()</code> ，<code>Log.i()</code> ，<code>Log.w()</code> 以及 <code>Log.e()</code> 。根据首字母对应VERBOSE，DEBUG，INFO， WARN，ERROR。</p><a id="more"></a><ul><li><p><code>Log.v</code> 的输出颜色为<strong>黑色</strong>的，任何消息都会输出，这里的v代表verbose啰嗦的意思。</p></li><li><p><code>Log.d</code>的输出颜色为<strong>蓝色</strong>的，仅输出debug调试的意思，但他会输出上层的信息，过滤起来可以通过DDMS的Logcat标签来选择。</p></li><li><p><code>Log.i</code>的输出颜色为<strong>绿色</strong>，一般提示性的消息information，它不会输出<code>Log.v</code>和<code>Log.d</code>的信息，但会显示<code>i</code>、<code>w</code>和<code>e</code>的信息。</p></li><li><p><code>Log.w</code>的输出颜色为<strong>橙色</strong>，可以看作为warning警告，一般需要我们注意优化Android代码，同时选择它后还会输出<code>Log.e</code>的信息。</p></li><li><p><code>Log.e</code>的输出颜色为<strong>红色</strong>，可以想到error错误，这里仅显示红色的错误信息，这些错误就需要我们认真的分析，查看栈的信息了。</p></li></ul><h4 id="1-常规用法"><a href="#1-常规用法" class="headerlink" title="1,常规用法"></a>1,常规用法</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Log</span>.v(<span class="built_in">TAG</span>,<span class="string">"一条啰嗦日志"</span>);</span><br><span class="line"><span class="keyword">Log</span>.d(<span class="built_in">TAG</span>,<span class="string">"一条调试日志"</span>);</span><br><span class="line"><span class="keyword">Log</span>.i(<span class="built_in">TAG</span>,<span class="string">"一条提示日志"</span>);</span><br><span class="line"><span class="keyword">Log</span>.w(<span class="built_in">TAG</span>,<span class="string">"一条警告日志"</span>);</span><br><span class="line"><span class="keyword">Log</span>.e(<span class="built_in">TAG</span>,<span class="string">"一条错误日志"</span>);</span><br></pre></td></tr></table></figure><p>其中<code>TAG</code>为字符串。用于标记。同一个应用<code>TAG</code>基本可以成一样。并且，应用打包发布时，最好把全部<code>Log</code>注释掉，否则将产生不必要的资源消耗（虽然很小）。</p><h4 id="2-分装Log"><a href="#2-分装Log" class="headerlink" title="2,分装Log"></a>2,分装Log</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class L &#123;</span><br><span class="line">    <span class="keyword">private</span> static <span class="built_in">String</span> <span class="built_in">TAG</span> = <span class="string">"WZM"</span>;</span><br><span class="line">    <span class="comment">// 开关</span></span><br><span class="line">    <span class="keyword">private</span> static <span class="built_in">boolean</span> debug = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> L() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="literal">void</span> setTAG(<span class="built_in">String</span> <span class="built_in">TAG</span>) &#123;</span><br><span class="line">        L.<span class="built_in">TAG</span> = <span class="built_in">TAG</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="literal">void</span> setDebug(<span class="built_in">boolean</span> debug) &#123;</span><br><span class="line">        L.debug = debug;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="literal">void</span> v(<span class="built_in">String</span> msg) &#123;</span><br><span class="line">        <span class="keyword">if</span> (debug)</span><br><span class="line">            <span class="keyword">Log</span>.v(<span class="built_in">TAG</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="literal">void</span> d(<span class="built_in">String</span> msg) &#123;</span><br><span class="line">        <span class="keyword">if</span> (debug)</span><br><span class="line">            <span class="keyword">Log</span>.d(<span class="built_in">TAG</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="literal">void</span> i(<span class="built_in">String</span> msg) &#123;</span><br><span class="line">        <span class="keyword">if</span> (debug)</span><br><span class="line">            <span class="keyword">Log</span>.i(<span class="built_in">TAG</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="literal">void</span> w(<span class="built_in">String</span> msg) &#123;</span><br><span class="line">        <span class="keyword">if</span> (debug)</span><br><span class="line">            <span class="keyword">Log</span>.w(<span class="built_in">TAG</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="literal">void</span> e(<span class="built_in">String</span> msg) &#123;</span><br><span class="line">        <span class="keyword">if</span> (debug)</span><br><span class="line">            <span class="keyword">Log</span>.e(<span class="built_in">TAG</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L.v(<span class="string">"一条啰嗦日志"</span>)<span class="comment">;</span></span><br><span class="line">L.d(<span class="string">"一条调试日志"</span>)<span class="comment">;</span></span><br><span class="line">L.i(<span class="string">"一条提示日志"</span>)<span class="comment">;</span></span><br><span class="line">L.w(<span class="string">"一条警告日志"</span>)<span class="comment">;</span></span><br><span class="line">L.e(<span class="string">"一条错误日志"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>并且，可在<code>Application</code>中设置开关（是否输出日志）或<code>TAG</code>（默认<code>WZM</code>）<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="type">L</span>.setTAG(<span class="string">"TAG"</span>);</span><br><span class="line">        <span class="type">L</span>.setDebug(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打包发布时，<code>debug</code>设为<code>false</code>即可。</p><hr><p><img src="https://upload-images.jianshu.io/upload_images/3262738-76f7c9e6fdc24a2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="无关配图"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>还有对<code>Toast</code>的简单封装：<a href="https://www.jianshu.com/p/7e51a0cc6c44" target="_blank" rel="noopener">Android 封装Toast</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;android-util-Log类&quot;&gt;&lt;a href=&quot;#android-util-Log类&quot; class=&quot;headerlink&quot; title=&quot;android.util.Log类&quot;&gt;&lt;/a&gt;android.util.Log类&lt;/h2&gt;&lt;p&gt;&lt;code&gt;android.util.Log&lt;/code&gt;常用的方法有以下5个：&lt;code&gt;Log.v()&lt;/code&gt;， &lt;code&gt;Log.d()&lt;/code&gt; ，&lt;code&gt;Log.i()&lt;/code&gt; ，&lt;code&gt;Log.w()&lt;/code&gt; 以及 &lt;code&gt;Log.e()&lt;/code&gt; 。根据首字母对应VERBOSE，DEBUG，INFO， WARN，ERROR。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://wzmyyj.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>【设计模式】抽象工厂模式</title>
    <link href="https://wzmyyj.top/2018/05/19/design_4/"/>
    <id>https://wzmyyj.top/2018/05/19/design_4/</id>
    <published>2018-05-19T09:50:00.000Z</published>
    <updated>2020-04-08T07:18:41.423Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p> <strong>抽象工厂模式</strong>（Abstract Factory Pattern）是所有形态的<a href="https://www.jianshu.com/p/539975502ad1" target="_blank" rel="noopener">工厂模式</a>中最为抽象和最具一般性的一种形态。抽象工厂模式是指当有多个抽象角色时，使用的一种工厂模式。抽象工厂模式可以向客户端提供一个接口，使客户端在不必指定产品的具体的情况下，创建多个<a href="https://baike.sogou.com/v10638486.htm" target="_blank" rel="noopener">产品族</a>中的产品对象。<br><a id="more"></a></p><ul><li>如果读者不了解<strong>工厂模式</strong>，请看上篇<a href="https://www.jianshu.com/p/539975502ad1" target="_blank" rel="noopener">【设计模式】工厂模式</a>。</li></ul><h4 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="https://upload-images.jianshu.io/upload_images/3262738-6c0756dcdf876de8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="抽象工厂模式"></p><ol><li>抽象产品类（AbstractProductX）：<strong>多个系列</strong>抽象产品（X=A,B,C…）。</li><li>具体产品类（ProductX）：实现基类中的抽象方法（多个不同的具体产品，X=1,2,3..）。</li><li>抽象工厂类或接口（AbstractFactory）：定义具体工厂的<strong>多个</strong>公共接口（拥有<strong>各系列</strong>产品创建的接口）。</li><li>具体工厂类（FactoryX）：定义创建<strong>各系列</strong>具体产品实例的方法。（每个工厂对应一种具体产品，X=1,2,3…）。</li></ol><h4 id="与工厂模式的区别"><a href="#与工厂模式的区别" class="headerlink" title="与工厂模式的区别"></a>与工厂模式的区别</h4><blockquote><ol><li><strong>工厂模式</strong>的工厂只能生产一个系列的产品。而<strong>抽象工厂模式</strong>的工厂可以生产一个或多个系列的产品。</li><li><strong>工厂模式</strong>关注的是一个系列的不同种产品。而<strong>抽象工厂模式</strong>关注的是不同系列产品。</li></ol></blockquote><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><p>接着上篇<a href="https://www.jianshu.com/p/539975502ad1" target="_blank" rel="noopener">【设计模式】工厂模式</a>的话题。</p><p>场景：玩《英雄联盟》（5v5 moba端游）新开一局游戏，游戏开始每个玩家需要选一个英雄之外，还需要选择天赋，召唤师技能。也就是需要创建三种产品。并且，在不同玩法下，比如召唤师峡谷（自选或排位等）与哭嚎深渊（大乱斗），创建的产品也略微有所差异，比如大乱斗下英雄一开始就3级，召唤师技能没有传送，有雪球。结构上：</p><ol><li>产品（三个系列）：英雄，天赋，召唤师技能。</li><li>工厂（两个）：召唤师峡谷工厂，哭嚎深渊工厂。</li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>英雄基类（新增<code>lv</code>成员变量和<code>print()</code>方法）<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> lv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">say</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"name:"</span> + name);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"lv:"</span> + lv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>只考虑一种英雄，比如寒冰射手-艾希。<br><img src="https://upload-images.jianshu.io/upload_images/3262738-01365eddc5e014f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="艾希"></p><p>艾希类：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Ashe</span> <span class="keyword">extends</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 简化构造方法，只弄个名字。</span></span><br><span class="line">    public <span class="type">Ashe</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"寒冰射手-艾希"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 艾希台词（不重要）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void say() &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(name + <span class="string">"："</span> + <span class="string">"世间万物皆系于一箭之上。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>召唤师峡谷中的艾希：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Ashe_XiaGu</span> <span class="keyword">extends</span> <span class="title">Ashe</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在召唤师峡谷中初始等级1级。</span></span><br><span class="line">    public <span class="type">Ashe_XiaGu</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.lv = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>哭嚎深渊中的艾希：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Ashe_ShenYuan</span> <span class="keyword">extends</span> <span class="title">Ashe</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在哭嚎深渊中初始等级3级。</span></span><br><span class="line">    public <span class="type">Ashe_ShenYuan</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.lv = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>天赋基类：（就简单点只用打印信息区分下好了）<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Talent</span> &#123;</span><br><span class="line">    <span class="comment">// 只打印一下信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>两个天赋实现类：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Talent_XiaGu</span> <span class="keyword">extends</span> <span class="title">Talent</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void print() &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"召唤师峡谷中的天赋"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Talent_ShenYuan</span> <span class="keyword">extends</span> <span class="title">Talent</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void print() &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"哭嚎深渊中的天赋"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>召唤师技能基类：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Skill</span> &#123;</span><br><span class="line">    <span class="comment">// 召唤师技能种类</span></span><br><span class="line">    <span class="keyword">protected</span> String[] skill_type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择两种召唤师技能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">choose</span>(<span class="params"><span class="keyword">int</span> i, <span class="keyword">int</span> j</span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"你选择了"</span> + skill_type[i] + <span class="string">"和"</span> + skill_type[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>两个召唤师技能实现类：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Skill_XiaGu</span> <span class="keyword">extends</span> <span class="title">Skill</span> </span>&#123;</span><br><span class="line">    public <span class="type">Skill_XiaGu</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.skill_type = <span class="keyword">new</span> <span class="type">String</span>[] &#123; <span class="string">"闪现"</span>, <span class="string">"治疗"</span>, <span class="string">"传送"</span>, <span class="string">"净化"</span>, <span class="string">"光盾"</span>, <span class="string">"虛弱"</span>,</span><br><span class="line">                <span class="string">"惩戒"</span>, <span class="string">"疾走"</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Skill_ShenYuan</span> <span class="keyword">extends</span> <span class="title">Skill</span> </span>&#123;</span><br><span class="line">    public <span class="type">Skill_ShenYuan</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.skill_type = <span class="keyword">new</span> <span class="type">String</span>[] &#123; <span class="string">"闪现"</span>, <span class="string">"治疗"</span>, <span class="string">"雪球"</span>, <span class="string">"净化"</span>, <span class="string">"光盾"</span>, <span class="string">"虛弱"</span>,</span><br><span class="line">                <span class="string">"回蓝"</span>, <span class="string">"疾走"</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>准备工作完毕，接下来就是重点了。</p><p>抽象工厂类或接口：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">AbstractFactory</span> &#123;</span><br><span class="line">    <span class="comment">//创建英雄</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Hero <span class="title">createHero</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="comment">//创建天赋</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Talent <span class="title">createTalent</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="comment">//创建召唤师技能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Skill <span class="title">createSkill</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>召唤师峡谷工厂类：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory_XiaGu</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">AbstractFactory</span></span> </span>&#123;</span><br><span class="line">    <span class="comment">//假设我选艾希</span></span><br><span class="line">    <span class="keyword">public</span> Hero createHero() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Ashe_XiaGu</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Talent createTalent() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Talent_XiaGu</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Skill createSkill() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Skill_XiaGu</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>哭嚎深渊工厂类：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory_ShenYuan</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">AbstractFactory</span></span> </span>&#123;</span><br><span class="line">    <span class="comment">//假设我选艾希</span></span><br><span class="line">    <span class="keyword">public</span> Hero createHero() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Ashe_ShenYuan</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Talent createTalent() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Talent_ShenYuan</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Skill createSkill() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Skill_ShenYuan</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后是客户端代码：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        System.out.println(<span class="string">"请选择游戏模式"</span>);</span><br><span class="line">        System.out.println(<span class="string">"1,召唤师峡谷   2,哭嚎深渊"</span>);</span><br><span class="line">        Scanner can = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</span><br><span class="line">        <span class="built_in">int</span> w = can.nextInt();</span><br><span class="line">        can.close();</span><br><span class="line">        AbstractFactory <span class="keyword">factory</span> = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (w) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="comment">// 召唤师峡谷</span></span><br><span class="line">            <span class="keyword">factory</span> = <span class="keyword">new</span> Factory_XiaGu();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="comment">// 哭嚎深渊</span></span><br><span class="line">            <span class="keyword">factory</span> = <span class="keyword">new</span> Factory_ShenYuan();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 英雄（选择的是艾希）</span></span><br><span class="line">        Hero hero = <span class="keyword">factory</span>.createHero();</span><br><span class="line">        hero.<span class="built_in">print</span>();</span><br><span class="line">        hero.say();</span><br><span class="line">        <span class="comment">// 天赋</span></span><br><span class="line">        Talent talent = <span class="keyword">factory</span>.createTalent();</span><br><span class="line">        talent.<span class="built_in">print</span>();</span><br><span class="line">        <span class="comment">// 召唤师技能</span></span><br><span class="line">        Skill skill = <span class="keyword">factory</span>.createSkill();</span><br><span class="line">        skill.choose(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端选择游戏模式，就相当于选择了不同的工厂去生产游戏元素（英雄，天赋，召唤师技能）。</p><p>也可以结合<strong>工厂模式</strong>使用，比如选择游戏类型后，利用工厂模式选择英雄等等。</p><blockquote><p>同<strong>工厂模式</strong>，客户端不需要知道产品的创建过程。并且，客户端只需要选择游戏模式，就可以用工厂创建多个系列的产品（英雄，天赋，召唤师技能）。主要特点就是一个工厂多系列产品。</p></blockquote><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p>玩局匹配，选召唤师峡谷：<br><img src="https://upload-images.jianshu.io/upload_images/3262738-a2e4762e21f5fcd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="控制台"></p><p>源计划皮肤的寒冰射手。<br><img src="https://upload-images.jianshu.io/upload_images/3262738-9a32cb36ad0073ab.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="源计划-艾希"></p><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p>常见的案例就是使用不同的数据库，数据库能处理用户，也能处理关系。但是，数据库分MySQL，Orical等。处理同样或类似的事情，他们的具体实现存在差异。那就可以抽出一个工厂基类，再分别写两个不同的工厂去处理。这样的话，某些东西就可以做到<strong>可迁移</strong>的目的。</p><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>设计模式Demo<br>GitHub源码：<a href="https://github.com/wzmyyj/Design-Pattern" target="_blank" rel="noopener">https://github.com/wzmyyj/Design-Pattern</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h2&gt;&lt;p&gt; &lt;strong&gt;抽象工厂模式&lt;/strong&gt;（Abstract Factory Pattern）是所有形态的&lt;a href=&quot;https://www.jianshu.com/p/539975502ad1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;工厂模式&lt;/a&gt;中最为抽象和最具一般性的一种形态。抽象工厂模式是指当有多个抽象角色时，使用的一种工厂模式。抽象工厂模式可以向客户端提供一个接口，使客户端在不必指定产品的具体的情况下，创建多个&lt;a href=&quot;https://baike.sogou.com/v10638486.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;产品族&lt;/a&gt;中的产品对象。&lt;br&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://wzmyyj.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
