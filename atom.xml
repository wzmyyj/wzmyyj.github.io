<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wzmyyj</title>
  
  <subtitle>Let life be beautiful like summer flowers.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wzmyyj.top/"/>
  <updated>2018-06-12T09:47:00.470Z</updated>
  <id>https://wzmyyj.top/</id>
  
  <author>
    <name>wzmyyj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【IT】关于HTTP协议你需要知道这些</title>
    <link href="https://wzmyyj.top/2018/06/09/it_5/"/>
    <id>https://wzmyyj.top/2018/06/09/it_5/</id>
    <published>2018-06-09T03:45:50.000Z</published>
    <updated>2018-06-12T09:47:00.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p><strong>超文本传输协议</strong>（英文：<strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol，缩写：<strong>HTTP</strong>）是一种用于分布式、协作式和超媒体信息系统的<a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E5%B1%82" title="应用层" target="_blank" rel="noopener">应用层协议</a><sup><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#cite_note-ietf2616-1" target="_blank" rel="noopener">[1]</a></sup>。HTTP是<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E7%90%83%E8%B3%87%E8%A8%8A%E7%B6%B2" title="万维网" target="_blank" rel="noopener">万维网</a>的数据通信的基础。</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/3262738-968561d7567c78db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HTTP"></p><p><strong>HTTP</strong>是一个客户端终端（用户）和服务器端（网站）请求和应答的标准（<a href="https://zh.wikipedia.org/wiki/TCP" title="TCP" target="_blank" rel="noopener">TCP</a>）。通过使用网页浏览器、网络爬虫或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口（默认端口为80）。</p><blockquote><p>设计HTTP最初的目的是为了提供一种发布和接收<a href="https://zh.wikipedia.org/wiki/HTML" title="HTML" target="_blank" rel="noopener">HTML</a>页面的方法。通过HTTP或者HTTPS协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。</p></blockquote><h4 id="主要特征"><a href="#主要特征" class="headerlink" title="主要特征"></a>主要特征</h4><ol><li><p>支持B/S及C/S模式。</p></li><li><p>简单快速：<br>2.1 客户向服务器请求服务时，只需传送请求方法和路径。<br>2.2 请求方法常用的有GET、HEAD、POST等，分别规定了客户与服务器不同的联系类型。<br>2.3 HTTP协议简单，使得HTTP服务器的程序规模小，通信速度快。</p></li><li><p>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p></li><li><p>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p></li><li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li></ol><h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><p>一共有八种请求方式：</p><ol><li><strong>GET</strong><br>向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，例如在Web Application中。其中一个原因是GET可能会被网络蜘蛛等随意访问。</li><li><strong>HEAD</strong><br>与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）。</li><li><strong>POST</strong><br>向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。</li><li><strong>PUT</strong><br>向指定资源位置上传其最新内容。</li><li><strong>DELETE</strong><br>请求服务器删除Request-URI所标识的资源。</li><li><strong>TRACE</strong><br>回显服务器收到的请求，主要用于测试或诊断。</li><li><strong>OPTIONS</strong><br>这个方法可使服务器传回该资源所支持的所有HTTP请求方法。用’*’来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。</li><li><strong>CONNECT</strong><br>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。</li></ol><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><p><strong>HTTP</strong>响应也是由三个部分组成，分别是：<strong>状态行</strong>、<strong>消息报头</strong>、<strong>响应正文</strong></p><ol><li><strong>状态行</strong><br>HTTP-Version Status-Code Reason-Phrase CRLF<br>1.1 HTTP-Version表示服务器HTTP协议的版本；<br>1.2 Status-Code表示服务器发回的响应状态代码；<br>1.3 Reason-Phrase表示状态代码的文本描述。</li></ol><p>状态代码有三位数字组成，第一个数字定义了响应的类别，且有五种可能取值：<br>1xx：指示信息–表示请求已接收，继续处理<br>2xx：成功–表示请求已被成功接收、理解、接受<br>3xx：重定向–要完成请求必须进行更进一步的操作<br>4xx：客户端错误–请求有语法错误或请求无法实现<br>5xx：服务器端错误–服务器未能实现合法的请求</p><p>常见状态代码、状态描述、说明：<br><code>200 OK</code>  //客户端请求成功<br><code>400 Bad Request</code> //客户端请求有语法错误，不能被服务器所理解<br><code>401 Unauthorized</code> //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br><code>403 Forbidden</code>  //服务器收到请求，但是拒绝提供服务<br><code>404 Not Found</code>  //请求资源不存在，eg：输入了错误的URL<br><code>500 Internal Server Error</code> //服务器发生不可预期的错误<br><code>503 Server Unavailable</code>  //服务器当前不能处理客户端的请求，一段时间后可能恢复正常<br>其他代码请参考<a href="https://blog.csdn.net/qq_32671287/article/details/79447951" target="_blank" rel="noopener">这篇</a></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：HTTP/<span class="number">1.1</span> <span class="number">200</span> OK （CRLF）</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>消息报头</strong><br>内容较长，请参考<a href="https://www.cnblogs.com/li0803/archive/2008/11/03/1324746.html" target="_blank" rel="noopener">HTTP协议详解（真的很经典）</a></li><li><strong>响应正文</strong><br>就是服务器返回的资源的内容。</li></ol><h2 id="协议例子"><a href="#协议例子" class="headerlink" title="协议例子"></a>协议例子</h2><p>下面是一个HTTP客户端与服务器之间会话的例子，运行于<a href="http://www.google.com，端口80。" target="_blank" rel="noopener">www.google.com，端口80。</a></p><h4 id="请求信息"><a href="#请求信息" class="headerlink" title="请求信息"></a>请求信息</h4><p>发出的请求信息（message request）包括以下几个:</p><ol><li>请求行（例如GET /images/logo.gif HTTP/1.1，表示从/images目录下请求logo.gif这个文件）。</li><li>请求头（例如Accept-Language: en）。</li><li>空行。</li><li>其他消息体。</li></ol><p>请求行和标题必须以<cr><lf>作为结尾。空行内必须只有<cr><lf>而无其他空格。在HTTP/1.1协议中，所有的请求头，除Host外，都是可选的。</lf></cr></lf></cr></p><ul><li><strong>客户端请求</strong><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: www.google.com</span><br></pre></td></tr></table></figure></li></ul><p>（末尾有一个空行。第一行指定方法、资源路径、协议版本；第二行是在1.1版里必带的一个header作用指定主机）</p><ul><li><strong>服务器应答</strong><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Content-<span class="string">Length:</span> <span class="number">3059</span></span><br><span class="line"><span class="string">Server:</span> GWS/<span class="number">2.0</span></span><br><span class="line"><span class="string">Date:</span> Sat, <span class="number">11</span> Jan <span class="number">2003</span> <span class="number">02</span>:<span class="number">44</span>:<span class="number">04</span> GMT</span><br><span class="line">Content-<span class="string">Type:</span> text/html</span><br><span class="line">Cache-<span class="string">control:</span> <span class="keyword">private</span></span><br><span class="line">Set-<span class="string">Cookie:</span> PREF=ID=<span class="number">73</span><span class="string">d4aef52e57bae9:</span>TM=<span class="number">1042253044</span>:LM=<span class="number">1042253044</span>:S=SMCc_HRPCQiqy</span><br><span class="line">X9j; expires=Sun, <span class="number">17</span>-Jan<span class="number">-2038</span> <span class="number">19</span>:<span class="number">14</span>:<span class="number">07</span> GMT; path=/; domain=.google.com</span><br><span class="line"><span class="string">Connection:</span> keep-alive</span><br></pre></td></tr></table></figure></li></ul><p>（紧跟着一个空行，并且由HTML格式的文本组成了Google的主页）</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p><strong>超文本传输协议（HTTP）</strong>已经演化出了很多版本，它们中的大部分都是向下兼容的。在 RFC 2145 中描述了HTTP版本号的用法。客户端在请求的开始告诉服务器它采用的协议版本号，而后者则在响应中采用相同或者更早的协议版本。</p><h4 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP/0.9"></a>HTTP/0.9</h4><p>已过时。只接受GET一种请求方法，没有在通讯中指定版本号，且不支持请求头。由于该版本不支持POST方法，因此客户端无法向服务器传递太多信息。</p><h4 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h4><p>这是第一个在通讯中指定版本号的HTTP协议版本，至今仍被广泛采用，特别是在代理服务器中。</p><h4 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h4><p>持久连接被默认采用，并能很好地配合代理服务器工作。还支持以管道方式在同时发送多个请求，以便降低线路负载，提高传输速度。<br>HTTP/1.1相较于HTTP/1.0协议的区别主要体现在：</p><ul><li>缓存处理</li><li>带宽优化及网络连接的使用</li><li>错误通知的管理</li><li>消息在网络中的发送</li><li>互联网地址的维护</li><li>安全性及完整性</li></ul><blockquote><p>在HTTP 0.9和1.0中，<a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" title="传输控制协议" target="_blank" rel="noopener">TCP连接</a>在每一次请求/回应对之后关闭。在HTTP 1.1中，引入了保持连接的机制，一个连接可以重复在多个请求/回应使用。持续连接的方式可以大大减少等待时间，因为在发出第一个请求后，双方不需要重新运行TCP交握程序。</p></blockquote><h4 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h4><p>当前版本，于2015年5月作为互联网标准正式发布。</p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-18abea8f497619f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配一张图"></p><h2 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h2><blockquote><p>尽管<a href="https://zh.wikipedia.org/wiki/TCP/IP" title="TCP/IP" target="_blank" rel="noopener">TCP/IP</a>协议是互联网上最流行的应用，HTTP协议中，并没有规定必须使用它或它支持的层。事实上，HTTP可以在任何互联网协议上，或其他网络上实现。HTTP假定其下层协议提供可靠的传输。因此，任何能够提供这种保证的协议都可以被其使用。因此也就是其在TCP/IP协议族使用TCP作为其传输层。</p></blockquote><h4 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h4><p>下一篇博客：<a href="https://www.jianshu.com/p/b75f87c9bff9" target="_blank" rel="noopener">TCP协议中的三次握手和四次挥手</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTP&quot;&gt;&lt;a href=&quot;#HTTP&quot; class=&quot;headerlink&quot; title=&quot;HTTP&quot;&gt;&lt;/a&gt;HTTP&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;超文本传输协议&lt;/strong&gt;（英文：&lt;strong&gt;H&lt;/strong&gt;yper&lt;strong&gt;T&lt;/strong&gt;ext &lt;strong&gt;T&lt;/strong&gt;ransfer &lt;strong&gt;P&lt;/strong&gt;rotocol，缩写：&lt;strong&gt;HTTP&lt;/strong&gt;）是一种用于分布式、协作式和超媒体信息系统的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E5%B1%82&quot; title=&quot;应用层&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;应用层协议&lt;/a&gt;&lt;sup&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#cite_note-ietf2616-1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;。HTTP是&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%85%A8%E7%90%83%E8%B3%87%E8%A8%8A%E7%B6%B2&quot; title=&quot;万维网&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;万维网&lt;/a&gt;的数据通信的基础。&lt;/p&gt;
    
    </summary>
    
    
      <category term="IT" scheme="https://wzmyyj.top/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>【java】获取中文首字母</title>
    <link href="https://wzmyyj.top/2018/06/08/java_2/"/>
    <id>https://wzmyyj.top/2018/06/08/java_2/</id>
    <published>2018-06-08T08:21:29.000Z</published>
    <updated>2018-06-23T15:52:55.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中文首字母"><a href="#中文首字母" class="headerlink" title="中文首字母"></a>中文首字母</h2><p>有时候，比如微信上根据名字拼音首字母排序并检索。那么用Java获取中文首字母是怎么实现的呢？</p><a id="more"></a><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>不多说，直接上代码：（写个工具类）<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class FirstCharUtil &#123;</span><br><span class="line">    <span class="comment">// 简体中文的编码范围从B0A1（45217）一直到F7FE（63486）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> BEGIN = <span class="number">45217</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> END = <span class="number">63486</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照声 母表示，这个表是在GB2312中的出现的第一个汉字，</span></span><br><span class="line">    <span class="comment">//也就是说“啊”是代表首字母a的第一个汉字。</span></span><br><span class="line">    <span class="comment">// i, u, v都不做声母, 自定规则跟随前面的字母</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">char</span>[] charTable = &#123; <span class="string">'啊'</span>, <span class="string">'芭'</span>, <span class="string">'擦'</span>, <span class="string">'搭'</span>, <span class="string">'蛾'</span>, <span class="string">'发'</span>, <span class="string">'噶'</span>, <span class="string">'哈'</span>,</span><br><span class="line">            <span class="string">'哈'</span>, <span class="string">'击'</span>, <span class="string">'喀'</span>, <span class="string">'垃'</span>, <span class="string">'妈'</span>, <span class="string">'拿'</span>, <span class="string">'哦'</span>, <span class="string">'啪'</span>, <span class="string">'期'</span>, <span class="string">'然'</span>, <span class="string">'撒'</span>, <span class="string">'塌'</span>, <span class="string">'塌'</span>,</span><br><span class="line">            <span class="string">'塌'</span>, <span class="string">'挖'</span>, <span class="string">'昔'</span>, <span class="string">'压'</span>, <span class="string">'匝'</span>, &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二十六个字母区间对应二十七个端点</span></span><br><span class="line">    <span class="comment">// GB2312码汉字区间十进制表示</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span>[] table = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">27</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应首字母区间表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">char</span>[] initialTable = &#123; <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>,</span><br><span class="line">            <span class="string">'H'</span>, <span class="string">'H'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>,</span><br><span class="line">            <span class="string">'T'</span>, <span class="string">'T'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>, &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 得到GB2312码的首字母区间端点表，十进制。</span></span><br><span class="line">            table[i] = gbValue(charTable[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        table[<span class="number">26</span>] = END;<span class="comment">// 区间表结尾</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------------public方法区------------------------</span></span><br><span class="line">    <span class="comment">// 根据一个包含汉字的字符串返回一个汉字拼音首字母的字符串。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> first(<span class="keyword">String</span> S) &#123;</span><br><span class="line">        <span class="keyword">String</span> Result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (S == <span class="keyword">null</span> || S.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"#"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">char</span> cs = S.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Result += Char2Initial(cs);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Result = <span class="string">"%"</span>;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------------private方法区------------------------</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输入字符,得到他的声母,英文字母返回对应的大写字母,其他非简体汉字返回 '#'　</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">char</span> Char2Initial(<span class="built_in">char</span> ch) &#123;</span><br><span class="line">        <span class="comment">// 对英文字母的处理：小写字母转换为大写，大写的直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (ch &gt;= <span class="string">'a'</span> &amp;&amp; ch &lt;= <span class="string">'z'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">char</span>) (ch - <span class="string">'a'</span> + <span class="string">'A'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ch &gt;= <span class="string">'A'</span> &amp;&amp; ch &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ch;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对非英文字母的处理：转化为首字母，然后判断是否在码表范围内，</span></span><br><span class="line">        <span class="comment">// 若不是，则直接返回。</span></span><br><span class="line">        <span class="comment">// 若是，则在码表内的进行判断。</span></span><br><span class="line">        <span class="built_in">int</span> gb = gbValue(ch);<span class="comment">// 汉字转换首字母</span></span><br><span class="line">        <span class="keyword">if</span> ((gb &lt; BEGIN) || (gb &gt; END))<span class="comment">// 在码表区间之前，直接返回</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'#'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 判断匹配码表区间，匹配到就break,判断区间形如“[,)”</span></span><br><span class="line">            <span class="keyword">if</span> ((gb &gt;= table[i]) &amp;&amp; (gb &lt; table[i + <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (gb == END) &#123;<span class="comment">// 补上GB2312区间最右端</span></span><br><span class="line">            i = <span class="number">25</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> initialTable[i]; <span class="comment">// 在码表区间中，返回首字母</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取出汉字的编码 cn 汉字 　　</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> gbValue(<span class="built_in">char</span> ch) &#123;<span class="comment">// 将一个汉字（GB2312）转换为十进制表示。</span></span><br><span class="line">        <span class="keyword">String</span> <span class="built_in">str</span> = <span class="keyword">new</span> <span class="keyword">String</span>();</span><br><span class="line">        <span class="built_in">str</span> += ch;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] bytes = <span class="built_in">str</span>.getBytes(<span class="string">"GB2312"</span>);</span><br><span class="line">            <span class="keyword">if</span> (bytes.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (bytes[<span class="number">0</span>] &lt;&lt; <span class="number">8</span> &amp; <span class="number">0xff00</span>) + (bytes[<span class="number">1</span>] &amp; <span class="number">0xff</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用方式：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String <span class="keyword">first</span> = FirstCharUtil.<span class="keyword">first</span>(<span class="string">"加哇"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li><p>原理： GB2312编码中的中文是按照拼音排序的。</p></li><li><p>注意：一些生僻的字无法获得正确的首字母，原因是这些字都是后加入的。（所以有些名字在通讯录的排序不太一样。）</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/3262738-84bc2fab75a4b5d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50" alt="配一张图"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;中文首字母&quot;&gt;&lt;a href=&quot;#中文首字母&quot; class=&quot;headerlink&quot; title=&quot;中文首字母&quot;&gt;&lt;/a&gt;中文首字母&lt;/h2&gt;&lt;p&gt;有时候，比如微信上根据名字拼音首字母排序并检索。那么用Java获取中文首字母是怎么实现的呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://wzmyyj.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【IT】Hexo+GitHub搭建个人博客网站</title>
    <link href="https://wzmyyj.top/2018/06/06/it_4/"/>
    <id>https://wzmyyj.top/2018/06/06/it_4/</id>
    <published>2018-06-06T08:44:28.000Z</published>
    <updated>2018-06-12T09:47:58.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天，带大家利用Hexo和GitHub搭建属于自己的个人博客。</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/3262738-1f1bcd714aa0813c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配一张图"></p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p><strong>Hexo</strong> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成##静态网页##。<br><img src="https://upload-images.jianshu.io/upload_images/3262738-3ee0ba3dbdf8b14d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HEXO"><br>传送门：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官网中文文档</a></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h4 id="1-安装-amp-配置git"><a href="#1-安装-amp-配置git" class="headerlink" title="1. 安装&amp;配置git"></a>1. 安装&amp;配置git</h4><ol><li><p>访问<a href="https://link.jianshu.com?t=https%3A%2F%2Fgit-scm.com%2Fdownload%2F" target="_blank" rel="noopener">git官网</a>，下载git。</p></li><li><p>双击exe文件安装，一路next即可。</p></li><li><p>安装好git之后，配置用户名和邮箱。打开git-bash：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置全局用户名</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"yourname"</span></span><br><span class="line"><span class="comment"># 配置全局邮箱</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"youremail@qq.com"</span></span><br></pre></td></tr></table></figure></li></ol><p>用户名和邮箱同你的GitHub（如果没有，去<a href="https://github.com/" target="_blank" rel="noopener">GitHub官网</a>注册一个，注册好后记得邮箱验证才能使用。）</p><ol start="4"><li>配置ssh。打开git-bash：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">输入，回车</span></span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3262738-74fc02a4f120db42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git-bash"></p><p>复制（右键+复制，不能ctrl+c，这里ctrl+c是结束命令的意思）图中的<code>/c/Users/Administrator/.ssh/id_rsa</code>，然后把它粘贴（右键+粘贴）到冒号后面，然后回车，回车，回车。。。直到结束（中间的冒号，除了第一个不用管只管回车）。</p><ol start="5"><li>github上生成ssh key，是本地Git绑定GitHub。<br>网页上打开github -&gt; 点击头像 -&gt; Settings -&gt; 左边菜单找到 SSH and GPG keys -&gt; New SSH key（绿色按钮）-&gt; title随便填（用英文）-&gt; key值（打开<code>/c/Users/Administrator/.ssh/id_rsa</code>所在的文件夹，找到<code>id_rsa.pub</code>，注意是<code>pub</code>后缀那个文件，用记事本打开，复制里面的内容，粘贴到key值。） -&gt; 点击下面的Add SSH key -&gt; 完成。</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3262738-c00abd250a8c646b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加ssh key"></p><h4 id="2-下载安装Node-js"><a href="#2-下载安装Node-js" class="headerlink" title="2. 下载安装Node.js"></a>2. 下载安装Node.js</h4><ol><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js下载地址</a></li></ol><p><img src="http://upload-images.jianshu.io/upload_images/3262738-f6e51a1168c37de9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Node.js"></p><ol start="2"><li>安装步骤：一路默认就行（安装路径根据自己需要更改）</li></ol><h2 id="安装-amp-使用Hexo"><a href="#安装-amp-使用Hexo" class="headerlink" title="安装&amp;使用Hexo"></a>安装&amp;使用Hexo</h2><ol><li><p>在D盘下（其他地方也可以）创建一个空文件夹（命名为你主页的名字或者HEXO，随便啦，这里以名为MyBlog为例）</p></li><li><p>打开cmd命令窗口（桌面任务栏最左边那个wins图标-&gt; 搜索 -&gt; 输入cmd ，回车）。切换到D盘：（输入，回车）<code>D:</code> -&gt; 切换到刚才建的空文件夹：（输入，回车）<code>cd MyBlog</code>。</p></li><li><p>安装Hexo</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换国内源</span></span><br><span class="line">npm<span class="built_in"> config </span><span class="builtin-name">set</span> <span class="attribute">registry</span>=<span class="string">"http://registry.cnpmjs.org"</span></span><br><span class="line"><span class="comment"># 安装hexo</span></span><br><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure></li></ol><p>等待安装完成。</p><ol start="4"><li>初始化Hexo：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始化Hexo</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装必要模块</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li></ol><p>这时，MyBlog文件夹下就生成了一些文件。文件目录如下：<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── <span class="variable">_config</span>.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── <span class="variable">_drafts</span></span><br><span class="line">|   └── <span class="variable">_posts</span></span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></p><p>到此博客已经配置好了（虽然是默认的样子）</p><ol start="4"><li>测试一下：<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 生成静态文件</span></span><br><span class="line">hexo g <span class="comment">// 或 hexo generate</span></span><br><span class="line"><span class="meta"># 本地测试</span></span><br><span class="line">hexo s <span class="comment">// 或 hexo server</span></span><br></pre></td></tr></table></figure></li></ol><p>然后浏览器上查看 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p><p>是不是可以看到一个简单的网页（如果不能，有可能是4000端口被别的程序占用了，自行百度解决方案）。</p><h2 id="个性化"><a href="#个性化" class="headerlink" title="个性化"></a>个性化</h2><h4 id="1-config-yml文件"><a href="#1-config-yml文件" class="headerlink" title="1. _config.yml文件"></a>1. _config.yml文件</h4><p>打开该目录下的_config.yml文件。（用什么软件打开？你可以用editplus或者vs 等，也可以直接用记事本，就是比较难看，建议下个editplus吧。）</p><p>修改成你想要的内容。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">换成你的主页标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">主页副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">主页介绍的一句话</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">你的名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment">#语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span> <span class="comment">#时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, </span></span><br><span class="line"><span class="comment">##set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://voidking.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">500</span></span><br><span class="line"><span class="attr">  yearly:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">  monthly:</span> <span class="literal">true</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">tag_generator:</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">100</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">category_generator:</span> </span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">100</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: http://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">你用的主题文件夹名字</span> <span class="comment"># themes下的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">    repository:</span> <span class="string">GitHub仓库地址</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></p><h4 id="2-修改主题"><a href="#2-修改主题" class="headerlink" title="2. 修改主题"></a>2. 修改主题</h4><p>在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo官网主题</a>中找一个喜欢的主题。</p><blockquote><p>找到后，一般都有介绍怎么使用该主题的文章，如果没有，把网页拉到最下面。看到：2018 | Powered by <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> Theme by <a href="https://github.com/lewis-geek/hexo-theme-Aath" target="_blank" rel="noopener">Aath</a><br>点击Theme by 后面的连接，一般会简介到本主题在GitHub上的仓库地址。</p></blockquote><p>根据说明，下载配置主题。</p><ol><li>下载主题。比如：<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到MyBlog文件下，cmd执行</span></span><br><span class="line">git <span class="keyword">clone</span> <span class="title">-b</span> <span class="keyword">master</span> <span class="title">https</span>://github.com/lewis-geek/hexo-theme-Aath.git themes/aath</span><br></pre></td></tr></table></figure></li></ol><p>一般，它会自动下载到themes文件夹下。</p><ol start="2"><li><p>跟换博客的主题：<br>下载好后，你在_config.yml（主题是MyBlog文件夹下的）中的theme：处配置成你下在的主题名字（就是下载的主题文件夹名字 ）</p></li><li><p>配置主题：<br>根据GitHub上的说明配置<code>themes/主题名</code>目录下的_config.yml（不要与MyBlog的_config.yml搞混）。不同主题，配置起来不一样，所以在此不详解了。</p></li></ol><h2 id="发布到GitHub"><a href="#发布到GitHub" class="headerlink" title="发布到GitHub"></a>发布到GitHub</h2><ol><li>Github上新建仓库：<br>打开GitHub网页，点击头像旁边的“+”号 -&gt; New repository -&gt; 填写名字（必须是：<code>你GitHub的名字.github.io</code>）</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3262738-82fb37c43746cde5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="如图"></p><ol start="2"><li><p>本地配置Git：<br>在MyBlog文件夹下的_config.yml配置（大约在底部位置）：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: http:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">    type:</span> git</span><br><span class="line"><span class="symbol">    repository:</span> https:<span class="comment">//github.com/wzmyyj/wzmyyj.github.io.git</span></span><br><span class="line"><span class="symbol">    branch:</span> master</span><br></pre></td></tr></table></figure></li><li><p>上传：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果想把原来的清除</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新生成静态文件</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传到提交文件</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>第一次提交需要GitHub登录账号和密码。</p></blockquote><p>上传完成后，浏览器打开：<code>https://你的GitHub名字.github.io</code> 就是你的博客主页地址了。（GitHub响应比较慢，刚上传需要等一小会才能打开最新的。）</p><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><ol><li>新建一篇文章：<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 新建</span></span><br><span class="line">hexo <span class="keyword">new</span> <span class="type">post</span> 文章名</span><br></pre></td></tr></table></figure></li></ol><p>在<code>Myblog\source\_posts</code>目录下你将看到一个新建的<code>文章名.md</code>文件。</p><ol start="2"><li>编辑文章：<br>用editplus打开编辑，用Markdown格式书写。<blockquote><p>保存时，记得把编码方式改成<code>utf-8</code>。Document -&gt; File Encoding -&gt; Convert Encoding…</p></blockquote></li></ol><p>建议用<a href="https://www.jianshu.com/" target="_blank" rel="noopener">简书</a>写（简书设置里把编辑器改成Markdown），然后复制过去。好处是图片存在简书上，访问起来快些。</p><ol start="3"><li>上传：（和前面一样）<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果想把原来的清除</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新生成静态文件</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地测试</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传到提交文件</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ol><p>到此，你的博客主页已经完成。</p><hr><h2 id="跟换域名"><a href="#跟换域名" class="headerlink" title="跟换域名"></a>跟换域名</h2><ol><li><p>购买一个域名。（阿里云，腾讯云，万网均可注册购买域名）</p></li><li><p>修改你域名的DNS地址为 <code>dns22.hichina.com</code>, <code>dns21.hichina.com</code></p></li><li><p>域名解析上，CNAME到<code>你的GitHub名字.github.io</code><br><img src="https://upload-images.jianshu.io/upload_images/3262738-8c3ac04dc82dd47e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名解析"></p></li><li><p>然后在你的本地站点目录里的source目录下添加一个CNAME文件。以文本编辑器打开CNAME，里面添加你的域名（不加http://）。</p></li><li><p>在MyBlog文件夹下的_config.yml配置url：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put <span class="keyword">in</span> a subdirectory, </span><br><span class="line">## set url <span class="keyword">as</span> <span class="string">'http://yoursite.com/child'</span> and root <span class="keyword">as</span> <span class="string">'/child/'</span></span><br><span class="line">url: http:<span class="comment">//wzmyyj.top   //你的域名</span></span><br></pre></td></tr></table></figure></li><li><p>重新生成静态文件和上传到GitHub。</p></li></ol><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><h4 id="1-参考文献："><a href="#1-参考文献：" class="headerlink" title="1. 参考文献："></a>1. 参考文献：</h4><p><a href="https://www.jianshu.com/p/75efaba08a34" target="_blank" rel="noopener">Hexo环境搭建2018年5月版</a><br><a href="https://www.jianshu.com/p/189fd945f38f" target="_blank" rel="noopener">搭建个人博客-hexo+github详细完整步骤</a><br><a href="https://www.jianshu.com/p/834d7cc0668d" target="_blank" rel="noopener">我的博客是如何搭建的（github pages + HEXO + 域名绑定）</a><br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo中文文档</a></p><h4 id="2-我的主页："><a href="#2-我的主页：" class="headerlink" title="2. 我的主页："></a>2. 我的主页：</h4><p> 欢迎大家浏览我的主页：<a href="http://wzmyyj.top/">http://wzmyyj.top/</a></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-f72eb800cb37c797.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="wzmyyj"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天，带大家利用Hexo和GitHub搭建属于自己的个人博客。&lt;/p&gt;
    
    </summary>
    
    
      <category term="IT" scheme="https://wzmyyj.top/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>【IT】提问的智慧</title>
    <link href="https://wzmyyj.top/2018/06/04/it_3/"/>
    <id>https://wzmyyj.top/2018/06/04/it_3/</id>
    <published>2018-06-04T12:08:19.000Z</published>
    <updated>2018-06-05T04:32:26.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《提问的智慧》"><a href="#《提问的智慧》" class="headerlink" title="《提问的智慧》"></a>《提问的智慧》</h2><p><strong>艾瑞克.史蒂文.雷蒙德（Eric Steven Raymond）</strong>Thyrsus Enterprises <a href="mailto:&#x65;&#115;&#114;&#x40;&#x74;&#104;&#121;&#114;&#115;&#x75;&#x73;&#46;&#x63;&#111;&#x6d;" target="_blank" rel="noopener">&#x65;&#115;&#114;&#x40;&#x74;&#104;&#121;&#114;&#115;&#x75;&#x73;&#46;&#x63;&#111;&#x6d;</a><br><strong>瑞克.莫恩（Rick Moen）</strong> <a href="mailto:&#114;&#101;&#115;&#112;&#x6f;&#x6e;&#x64;&#x2d;&#x61;&#x75;&#x74;&#111;&#x40;&#x6c;&#x69;&#110;&#x75;&#x78;&#109;&#x61;&#x66;&#x69;&#97;&#x2e;&#x63;&#x6f;&#109;" target="_blank" rel="noopener">&#114;&#101;&#115;&#112;&#x6f;&#x6e;&#x64;&#x2d;&#x61;&#x75;&#x74;&#111;&#x40;&#x6c;&#x69;&#110;&#x75;&#x78;&#109;&#x61;&#x66;&#x69;&#97;&#x2e;&#x63;&#x6f;&#109;</a><br>版权©2001, 2006 Eric S. Raymond, Rick Moen<br><a id="more"></a></p><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://github.com/tvvocold/How-To-Ask-Questions-The-Smart-Way/blob/master/README.md" target="_blank" rel="noopener">中文：《提问的智慧》</a>   </p><p><a href="http://www.catb.org/~esr/faqs/smart-questions.html" target="_blank" rel="noopener">原文：《How To Ask Questions The Smart Way》</a></p><p>要求声明：（我们不提供该项目的服务支持！）</p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-4ab43d3ebaf85698.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配一张图"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;《提问的智慧》&quot;&gt;&lt;a href=&quot;#《提问的智慧》&quot; class=&quot;headerlink&quot; title=&quot;《提问的智慧》&quot;&gt;&lt;/a&gt;《提问的智慧》&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;艾瑞克.史蒂文.雷蒙德（Eric Steven Raymond）&lt;/strong&gt;Thyrsus Enterprises &lt;a href=&quot;mailto:&amp;#x65;&amp;#115;&amp;#114;&amp;#x40;&amp;#x74;&amp;#104;&amp;#121;&amp;#114;&amp;#115;&amp;#x75;&amp;#x73;&amp;#46;&amp;#x63;&amp;#111;&amp;#x6d;&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x65;&amp;#115;&amp;#114;&amp;#x40;&amp;#x74;&amp;#104;&amp;#121;&amp;#114;&amp;#115;&amp;#x75;&amp;#x73;&amp;#46;&amp;#x63;&amp;#111;&amp;#x6d;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;瑞克.莫恩（Rick Moen）&lt;/strong&gt; &lt;a href=&quot;mailto:&amp;#114;&amp;#101;&amp;#115;&amp;#112;&amp;#x6f;&amp;#x6e;&amp;#x64;&amp;#x2d;&amp;#x61;&amp;#x75;&amp;#x74;&amp;#111;&amp;#x40;&amp;#x6c;&amp;#x69;&amp;#110;&amp;#x75;&amp;#x78;&amp;#109;&amp;#x61;&amp;#x66;&amp;#x69;&amp;#97;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#109;&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#114;&amp;#101;&amp;#115;&amp;#112;&amp;#x6f;&amp;#x6e;&amp;#x64;&amp;#x2d;&amp;#x61;&amp;#x75;&amp;#x74;&amp;#111;&amp;#x40;&amp;#x6c;&amp;#x69;&amp;#110;&amp;#x75;&amp;#x78;&amp;#109;&amp;#x61;&amp;#x66;&amp;#x69;&amp;#97;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#109;&lt;/a&gt;&lt;br&gt;版权©2001, 2006 Eric S. Raymond, Rick Moen&lt;br&gt;
    
    </summary>
    
    
      <category term="IT" scheme="https://wzmyyj.top/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>【图片】仅仅是几张图而已哦^_^</title>
    <link href="https://wzmyyj.top/2018/06/01/pic_1/"/>
    <id>https://wzmyyj.top/2018/06/01/pic_1/</id>
    <published>2018-06-01T13:20:06.000Z</published>
    <updated>2018-06-12T09:48:41.009Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3262738-0a5b030907019fd8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="gnnsss.jpg"></p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/3262738-1f1bcd714aa0813c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mobile.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-a3c676432cc233b9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="top.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-ead0b680c718d0f0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="asvj.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-a352875140dd6e56.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="timhjjjg.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-470a155a7e646aa9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="efth"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-88b2dbf8325fe9c1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="15029432"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-9fb08e3a3c7f56fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="14965"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-5adb08044438699f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pixi"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-3136460bca8a06e8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1467996192"></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-ca280ccc73362b20.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="xfzn"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/3262738-0a5b030907019fd8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;gnnsss.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="图片" scheme="https://wzmyyj.top/tags/%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>【android】封装使用Toast</title>
    <link href="https://wzmyyj.top/2018/05/22/android_2/"/>
    <id>https://wzmyyj.top/2018/05/22/android_2/</id>
    <published>2018-05-22T12:57:43.000Z</published>
    <updated>2018-06-05T04:01:42.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="android-widget-Toast类"><a href="#android-widget-Toast类" class="headerlink" title="android.widget.Toast类"></a>android.widget.Toast类</h2><p><strong>Toast</strong>是Android中用来显示显示信息的一种机制，和Dialog不一样的是，Toast是没有焦点的，而且Toast显示的时间有限，过一定的时间就会自动消失。而且Toast主要用于向用户显示提示消息。</p><h4 id="1-常规用法"><a href="#1-常规用法" class="headerlink" title="1,常规用法"></a>1,常规用法</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(context, <span class="string">"一条消息"</span>, Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(context, <span class="string">"一条消息"</span>, Toast.LENGTH_LONG)<span class="selector-class">.show</span>();</span><br></pre></td></tr></table></figure><p>其中<code>context</code>是上下文。</p><p>虽然只需要一行代码，但写起来并不方便。做个简单封装吧。</p><h4 id="2-封装Toast"><a href="#2-封装Toast" class="headerlink" title="2,封装Toast"></a>2,封装Toast</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">T</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Application app;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">T</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span>(<span class="params">Application app</span>) </span>&#123;</span><br><span class="line">        T.app = app;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">s</span>(<span class="params">String msg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (app == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        s(app, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">l</span>(<span class="params">String msg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (app == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        l(app, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">s</span>(<span class="params">Context context, String msg</span>) </span>&#123;</span><br><span class="line">        Toast.makeText(context, msg, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">l</span>(<span class="params">Context context, String msg</span>) </span>&#123;</span><br><span class="line">        Toast.makeText(context, msg, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时，先在自己写的<code>Application</code>中初始化。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="type">T</span>.init(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用时，只需：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">T</span><span class="selector-class">.s</span>(<span class="string">"一条消息"</span>);<span class="comment">// 时间较短</span></span><br><span class="line"> <span class="comment">//或</span></span><br><span class="line"><span class="selector-tag">T</span><span class="selector-class">.l</span>(<span class="string">"一条消息"</span>);<span class="comment">// 时间较长</span></span><br></pre></td></tr></table></figure></p><p>如果没有在<code>Application</code>中初始化。也可以：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">T</span><span class="selector-class">.s</span>(context,<span class="string">"一条消息"</span>);<span class="comment">// 时间较短</span></span><br><span class="line"> <span class="comment">//或</span></span><br><span class="line"><span class="selector-tag">T</span><span class="selector-class">.l</span>(context,<span class="string">"一条消息"</span>);<span class="comment">// 时间较长</span></span><br></pre></td></tr></table></figure></p><p>虽然<code>T</code>的命名是不规范的，但是用起来真是方便。当它比较特殊常用就好啦。</p><hr><p><img src="https://upload-images.jianshu.io/upload_images/3262738-9108eb06d7a7641b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配一张图"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>还有对<code>Log</code>的简单封装：<a href="https://www.jianshu.com/p/0509c2fed826" target="_blank" rel="noopener">Android中的Log类</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;android-widget-Toast类&quot;&gt;&lt;a href=&quot;#android-widget-Toast类&quot; class=&quot;headerlink&quot; title=&quot;android.widget.Toast类&quot;&gt;&lt;/a&gt;android.widget.Toast类&lt;/
      
    
    </summary>
    
    
      <category term="android" scheme="https://wzmyyj.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>【android】日志工具Log类</title>
    <link href="https://wzmyyj.top/2018/05/22/android_1/"/>
    <id>https://wzmyyj.top/2018/05/22/android_1/</id>
    <published>2018-05-22T12:43:30.000Z</published>
    <updated>2018-06-05T05:14:45.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="android-util-Log类"><a href="#android-util-Log类" class="headerlink" title="android.util.Log类"></a>android.util.Log类</h2><p><code>android.util.Log</code>常用的方法有以下5个：<code>Log.v()</code>， <code>Log.d()</code> ，<code>Log.i()</code> ，<code>Log.w()</code> 以及 <code>Log.e()</code> 。根据首字母对应VERBOSE，DEBUG，INFO， WARN，ERROR。</p><a id="more"></a><ul><li><p><code>Log.v</code> 的输出颜色为<strong>黑色</strong>的，任何消息都会输出，这里的v代表verbose啰嗦的意思。</p></li><li><p><code>Log.d</code>的输出颜色为<strong>蓝色</strong>的，仅输出debug调试的意思，但他会输出上层的信息，过滤起来可以通过DDMS的Logcat标签来选择。</p></li><li><p><code>Log.i</code>的输出颜色为<strong>绿色</strong>，一般提示性的消息information，它不会输出<code>Log.v</code>和<code>Log.d</code>的信息，但会显示<code>i</code>、<code>w</code>和<code>e</code>的信息。</p></li><li><p><code>Log.w</code>的输出颜色为<strong>橙色</strong>，可以看作为warning警告，一般需要我们注意优化Android代码，同时选择它后还会输出<code>Log.e</code>的信息。</p></li><li><p><code>Log.e</code>的输出颜色为<strong>红色</strong>，可以想到error错误，这里仅显示红色的错误信息，这些错误就需要我们认真的分析，查看栈的信息了。</p></li></ul><h4 id="1-常规用法"><a href="#1-常规用法" class="headerlink" title="1,常规用法"></a>1,常规用法</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Log</span>.v(<span class="built_in">TAG</span>,<span class="string">"一条啰嗦日志"</span>);</span><br><span class="line"><span class="keyword">Log</span>.d(<span class="built_in">TAG</span>,<span class="string">"一条调试日志"</span>);</span><br><span class="line"><span class="keyword">Log</span>.i(<span class="built_in">TAG</span>,<span class="string">"一条提示日志"</span>);</span><br><span class="line"><span class="keyword">Log</span>.w(<span class="built_in">TAG</span>,<span class="string">"一条警告日志"</span>);</span><br><span class="line"><span class="keyword">Log</span>.e(<span class="built_in">TAG</span>,<span class="string">"一条错误日志"</span>);</span><br></pre></td></tr></table></figure><p>其中<code>TAG</code>为字符串。用于标记。同一个应用<code>TAG</code>基本可以成一样。并且，应用打包发布时，最好把全部<code>Log</code>注释掉，否则将产生不必要的资源消耗（虽然很小）。</p><h4 id="2-分装Log"><a href="#2-分装Log" class="headerlink" title="2,分装Log"></a>2,分装Log</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class L &#123;</span><br><span class="line">    <span class="keyword">private</span> static <span class="built_in">String</span> <span class="built_in">TAG</span> = <span class="string">"WZM"</span>;</span><br><span class="line">    <span class="comment">// 开关</span></span><br><span class="line">    <span class="keyword">private</span> static <span class="built_in">boolean</span> debug = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> L() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="literal">void</span> setTAG(<span class="built_in">String</span> <span class="built_in">TAG</span>) &#123;</span><br><span class="line">        L.<span class="built_in">TAG</span> = <span class="built_in">TAG</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="literal">void</span> setDebug(<span class="built_in">boolean</span> debug) &#123;</span><br><span class="line">        L.debug = debug;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="literal">void</span> v(<span class="built_in">String</span> msg) &#123;</span><br><span class="line">        <span class="keyword">if</span> (debug)</span><br><span class="line">            <span class="keyword">Log</span>.v(<span class="built_in">TAG</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="literal">void</span> d(<span class="built_in">String</span> msg) &#123;</span><br><span class="line">        <span class="keyword">if</span> (debug)</span><br><span class="line">            <span class="keyword">Log</span>.d(<span class="built_in">TAG</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="literal">void</span> i(<span class="built_in">String</span> msg) &#123;</span><br><span class="line">        <span class="keyword">if</span> (debug)</span><br><span class="line">            <span class="keyword">Log</span>.i(<span class="built_in">TAG</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="literal">void</span> w(<span class="built_in">String</span> msg) &#123;</span><br><span class="line">        <span class="keyword">if</span> (debug)</span><br><span class="line">            <span class="keyword">Log</span>.w(<span class="built_in">TAG</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="literal">void</span> e(<span class="built_in">String</span> msg) &#123;</span><br><span class="line">        <span class="keyword">if</span> (debug)</span><br><span class="line">            <span class="keyword">Log</span>.e(<span class="built_in">TAG</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L.v(<span class="string">"一条啰嗦日志"</span>)<span class="comment">;</span></span><br><span class="line">L.d(<span class="string">"一条调试日志"</span>)<span class="comment">;</span></span><br><span class="line">L.i(<span class="string">"一条提示日志"</span>)<span class="comment">;</span></span><br><span class="line">L.w(<span class="string">"一条警告日志"</span>)<span class="comment">;</span></span><br><span class="line">L.e(<span class="string">"一条错误日志"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>并且，可在<code>Application</code>中设置开关（是否输出日志）或<code>TAG</code>（默认<code>WZM</code>）<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="type">L</span>.setTAG(<span class="string">"TAG"</span>);</span><br><span class="line">        <span class="type">L</span>.setDebug(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打包发布时，<code>debug</code>设为<code>false</code>即可。</p><hr><p><img src="https://upload-images.jianshu.io/upload_images/3262738-76f7c9e6fdc24a2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="无关配图"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>还有对<code>Toast</code>的简单封装：<a href="https://www.jianshu.com/p/7e51a0cc6c44" target="_blank" rel="noopener">Android 封装Toast</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;android-util-Log类&quot;&gt;&lt;a href=&quot;#android-util-Log类&quot; class=&quot;headerlink&quot; title=&quot;android.util.Log类&quot;&gt;&lt;/a&gt;android.util.Log类&lt;/h2&gt;&lt;p&gt;&lt;code&gt;android.util.Log&lt;/code&gt;常用的方法有以下5个：&lt;code&gt;Log.v()&lt;/code&gt;， &lt;code&gt;Log.d()&lt;/code&gt; ，&lt;code&gt;Log.i()&lt;/code&gt; ，&lt;code&gt;Log.w()&lt;/code&gt; 以及 &lt;code&gt;Log.e()&lt;/code&gt; 。根据首字母对应VERBOSE，DEBUG，INFO， WARN，ERROR。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://wzmyyj.top/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>【设计模式】工厂模式</title>
    <link href="https://wzmyyj.top/2018/05/18/design_3/"/>
    <id>https://wzmyyj.top/2018/05/18/design_3/</id>
    <published>2018-05-18T09:52:10.000Z</published>
    <updated>2018-05-30T09:38:24.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p><strong>工厂模式</strong>（Factory Pattern）就是专门负责将大量有共同接口的类实例化，而且不必事先知道每次是要实例化哪一个类的模式。它定义一个用于创建对象的接口，由子类决定实例化哪一个类。工厂模式相当于创建实例对象的new，经常要根据类Class生成实例对象，如A a=new A() 工厂模式也是用来创建实例对象的。</p><a id="more"></a><h4 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="https://upload-images.jianshu.io/upload_images/3262738-b1a29ff116e6f1ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="工厂方法模式"></p><ol><li>抽象产品类（AbstractProduct）：类中定义抽象一些方法，在子类中具体实现。</li><li>具体产品类（ProductX）：实现基类中的抽象方法（多个不同的具体产品，X=1,2,3..）。</li><li>抽象工厂类或接口（AbstractFactory）：定义具体工厂的公共接口。</li><li>具体工厂类（FactoryX）：定义创建对应具体产品实例的方法。（每个工厂对应一种具体产品，X=1,2,3…）。</li></ol><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><p>既然是工厂，当然是要生产产品。那我们来造什么好呢？，，嗯，，，造小孩？NO，NO，NO！我们还是来造英雄吧。</p><p>场景：玩《英雄联盟》（5v5 moba端游）新开一局游戏，游戏开始每个玩家需要选一个信赖的英雄。选好后，英雄会很兴奋，说一句专属的台词。那么程序上是<code>new</code>出该英雄的对象，执行该对象的<code>say()</code>方法。</p><h4 id="常规写法："><a href="#常规写法：" class="headerlink" title="常规写法："></a>常规写法：</h4><p>建立英雄类：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Hero</span> &#123;</span><br><span class="line"><span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">say</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>寒冰射手-艾希类（继承<code>Hero</code>类）：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Ashe</span> <span class="keyword">extends</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化构造方法，只弄个名字。</span></span><br><span class="line">public <span class="type">Ashe</span>() &#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">"寒冰射手-艾希"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 艾希台词</span></span><br><span class="line"><span class="comment">// 艾希台词</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public void say() &#123;</span><br><span class="line"><span class="type">System</span>.out.println(name + <span class="string">"："</span> + <span class="string">"世间万物皆系于一箭之上。"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>类似的写了亚索类，光辉类，盖伦类，剑圣类（全部英雄的话，还有好多）。再写个枚举（可以不需要，仅仅拿来当对应标识使用）。<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">Who</span> &#123;</span></span><br><span class="line">Ashe,</span><br><span class="line">Garen,</span><br><span class="line">Yi,</span><br><span class="line">Lux,</span><br><span class="line">Yasuo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后客户端调用：（菜鸟写法）<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">Scanner can = <span class="keyword">new</span> <span class="type">Scanner</span>(System.<span class="keyword">in</span>);</span><br><span class="line"><span class="keyword">String</span> name = can.next();</span><br><span class="line">can.close();</span><br><span class="line"><span class="keyword">switch</span> (Who.valueOf(name)) &#123;</span><br><span class="line"><span class="keyword">case</span> Ashe:<span class="type"></span></span><br><span class="line"><span class="type"></span>// 艾希</span><br><span class="line">Ashe ashe = <span class="keyword">new</span> <span class="type">Ashe</span>();</span><br><span class="line">ashe.say();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Yasuo:<span class="type"></span></span><br><span class="line"><span class="type"></span>// 亚索</span><br><span class="line">Yasuo yasuo = <span class="keyword">new</span> <span class="type">Yasuo</span>();</span><br><span class="line">yasuo.say();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Garen:<span class="type"></span></span><br><span class="line"><span class="type"></span>// 德玛</span><br><span class="line">Garen garen = <span class="keyword">new</span> <span class="type">Garen</span>();</span><br><span class="line">garen.say();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Lux:<span class="type"></span></span><br><span class="line"><span class="type"></span>// 光辉</span><br><span class="line">Lux lux = <span class="keyword">new</span> <span class="type">Lux</span>();</span><br><span class="line">lux.say();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Yi:<span class="type"></span></span><br><span class="line"><span class="type"></span>// 剑圣</span><br><span class="line">Yi yi = <span class="keyword">new</span> <span class="type">Yi</span>();</span><br><span class="line">yi.say();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-d675c52f807885a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="艾希"></p><p>客户端调用：（好学生写法，<strong>父类的子类引用</strong>）<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">Scanner can = <span class="keyword">new</span> <span class="type">Scanner</span>(System.<span class="keyword">in</span>);</span><br><span class="line"><span class="keyword">String</span> name = can.next();</span><br><span class="line">can.close();</span><br><span class="line">Hero hero = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">switch</span> (Who.valueOf(name)) &#123;</span><br><span class="line"><span class="keyword">case</span> Ashe:<span class="type"></span></span><br><span class="line"><span class="type"></span>// 艾希</span><br><span class="line">hero = <span class="keyword">new</span> <span class="type">Ashe</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Yasuo:<span class="type"></span></span><br><span class="line"><span class="type"></span>// 亚索</span><br><span class="line">hero = <span class="keyword">new</span> <span class="type">Yasuo</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Garen:<span class="type"></span></span><br><span class="line"><span class="type"></span>// 德玛</span><br><span class="line">hero = <span class="keyword">new</span> <span class="type">Garen</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Lux:<span class="type"></span></span><br><span class="line"><span class="type"></span>// 光辉</span><br><span class="line">hero = <span class="keyword">new</span> <span class="type">Lux</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Yi:<span class="type"></span></span><br><span class="line"><span class="type"></span>// 剑圣</span><br><span class="line">hero = <span class="keyword">new</span> <span class="type">Yi</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">hero.say();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里客户端需要知道：</p><ul><li>英雄怎么构造，怎么<code>new</code>出来。（事实上英雄的构造远没有这么简单。）</li><li>每个英雄的方法怎么调用。（这里都是<code>say()</code>方法）</li></ul><p>我们前面提到，利用工厂可以把创建对象的过程封装掉，客户端只要知道得到对象后调用其方法即可。用工厂代替<code>new</code>的过程。那就看看工厂方法怎么去实现吧。</p><h4 id="工厂模式写法"><a href="#工厂模式写法" class="headerlink" title="工厂模式写法"></a>工厂模式写法</h4><p>先建立一个工厂类的接口：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Factory</span> &#123;</span><br><span class="line"><span class="comment">//创建英雄的接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Hero <span class="title">create</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后建立不同英雄对应的工厂实现类。比如艾希工厂：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsheFactory</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Factory</span></span> </span>&#123;</span><br><span class="line"><span class="comment">//实现具体的创建英雄的方法。</span></span><br><span class="line"><span class="keyword">public</span> Hero create() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Ashe</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样的建立亚索工厂，光辉工厂，盖伦工厂，剑圣工厂等。</p><p>然后客户端调用：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Client3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">Scanner can = <span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</span><br><span class="line"><span class="built_in">String</span> name = can.next();</span><br><span class="line">can.close();</span><br><span class="line">Factory <span class="keyword">factory</span> = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">switch</span> (Who.valueOf(name)) &#123;</span><br><span class="line"><span class="keyword">case</span> Ashe:</span><br><span class="line"><span class="comment">// 艾希工厂</span></span><br><span class="line"><span class="keyword">factory</span> = <span class="keyword">new</span> AsheFactory();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Yasuo:</span><br><span class="line"><span class="comment">// 亚索工厂</span></span><br><span class="line"><span class="keyword">factory</span> = <span class="keyword">new</span> YasuoFactory();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Garen:</span><br><span class="line"><span class="comment">// 德玛工厂</span></span><br><span class="line"><span class="keyword">factory</span> = <span class="keyword">new</span> GarenFactory();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Lux:</span><br><span class="line"><span class="comment">// 光辉工厂</span></span><br><span class="line"><span class="keyword">factory</span> = <span class="keyword">new</span> LuxFactory();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Yi:</span><br><span class="line"><span class="comment">// 剑圣工厂</span></span><br><span class="line"><span class="keyword">factory</span> = <span class="keyword">new</span> YiFactory();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">Hero hero = <span class="keyword">factory</span>.create();</span><br><span class="line">hero.say();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>switch</code>中不再是英雄的创建过程，而是选择英雄工厂的过程。根据不同<code>name</code>选择不同的工厂，然后由工厂去实例化具体英雄对象。</p><p>新增一个英雄，就新增一个对应的工厂。需要修改的只有客户端代码。</p><p>如果不需要新增也不需要减少。我们是不是可以把工厂的选择封装起来。让多家工厂合并成一家工厂。那就是接下来要讲的<strong>简单工厂模式</strong></p><hr><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p><strong>简单工厂模式</strong>（Simple Factory Pattern）是类的创建模式，又叫做<strong>静态工厂方法模式</strong>。就是由一个工厂类根据传入的参量决定创建出哪一种产品类的实例。与上面<strong>工厂模式</strong>的区别就是它只需要一个工厂。</p><h4 id="UML类图-1"><a href="#UML类图-1" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="https://upload-images.jianshu.io/upload_images/3262738-0e5ef8eefbd001f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="简单工厂模式"></p><ol><li>抽象产品类（AbstractProduct）：类中定义抽象一些方法，在子类中具体实现。</li><li>具体产品类（ConcreteProduct）：实现基类中的抽象方法。</li><li>工厂类（Factory）：用以封装实例化对象过程，根据传入的参数决定生产不同的产品。</li></ol><h5 id="利用简单工厂的写法："><a href="#利用简单工厂的写法：" class="headerlink" title="利用简单工厂的写法："></a>利用简单工厂的写法：</h5><p>其他地方不变，将工厂合并成一个工厂类，并在内部写个静态方法，根据传入的参数决定创建不同的英雄对象：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Hero create(<span class="keyword">String</span> name) &#123;</span><br><span class="line">Hero hero = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">switch</span> (Who.valueOf(name)) &#123;</span><br><span class="line"><span class="keyword">case</span> Ashe:<span class="type"></span></span><br><span class="line"><span class="type"></span>// 艾希</span><br><span class="line">hero = <span class="keyword">new</span> <span class="type">Ashe</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Yasuo:<span class="type"></span></span><br><span class="line"><span class="type"></span>// 亚索</span><br><span class="line">hero = <span class="keyword">new</span> <span class="type">Yasuo</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Garen:<span class="type"></span></span><br><span class="line"><span class="type"></span>// 德玛</span><br><span class="line">hero = <span class="keyword">new</span> <span class="type">Garen</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Lux:<span class="type"></span></span><br><span class="line"><span class="type"></span>// 光辉</span><br><span class="line">hero = <span class="keyword">new</span> <span class="type">Lux</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Yi:<span class="type"></span></span><br><span class="line"><span class="type"></span>// 剑圣</span><br><span class="line">hero= <span class="keyword">new</span> <span class="type">Yi</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> hero;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端代码做简单修改：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client4</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">Scanner can = <span class="keyword">new</span> <span class="type">Scanner</span>(System.<span class="keyword">in</span>);</span><br><span class="line"><span class="keyword">String</span> name = can.next();</span><br><span class="line">can.close();</span><br><span class="line"><span class="comment">// 根据传入的名字构建不同的英雄。</span></span><br><span class="line">Hero hero = SimpleFactory.create(name);</span><br><span class="line">hero.say();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端不需要知道对象的构建过程，只要传入参数得到不同对象。</p><p>但是简单工厂是固定的，如果增减英雄他就要修改。不符合<strong>开闭原则</strong>。这时候用前面<strong>工厂模式</strong>好，把修改转移给客户端，而不修改工厂代码。</p><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>选个盖伦试试：</p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-4f670dad3f205f86.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="盖伦"></p><p>不能浪，不能浪。</p><hr><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p>请看下篇<a href="https://www.jianshu.com/p/06fd85ca913b" target="_blank" rel="noopener">【设计模式】抽象工厂模式</a>。</p><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>设计模式Demo<br>GitHub源码：<a href="https://github.com/wzmyyj/Design-Pattern" target="_blank" rel="noopener">https://github.com/wzmyyj/Design-Pattern</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;工厂模式&lt;/strong&gt;（Factory Pattern）就是专门负责将大量有共同接口的类实例化，而且不必事先知道每次是要实例化哪一个类的模式。它定义一个用于创建对象的接口，由子类决定实例化哪一个类。工厂模式相当于创建实例对象的new，经常要根据类Class生成实例对象，如A a=new A() 工厂模式也是用来创建实例对象的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://wzmyyj.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【设计模式】单例模式</title>
    <link href="https://wzmyyj.top/2018/04/17/design_2/"/>
    <id>https://wzmyyj.top/2018/04/17/design_2/</id>
    <published>2018-04-17T13:20:06.000Z</published>
    <updated>2018-05-30T09:38:49.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p><strong>单例模式</strong>（Singleton Pattern）是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例类的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。</p><a id="more"></a><ol><li>某个类只能有一个实例。</li><li>它必须自行创建这个实例。</li><li>它必须自行向整个系统提供这个实例。</li></ol><p>单例模式关键点：</p><ul><li>构造函数私有化（不让外部创建此类对象）。</li><li>通过一个静态方法或枚举返回单例类对象。</li><li>多线程环境下，确保单例（难点）。</li><li>反序列化不会重新构建对象。</li></ul><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="comment">// 单例对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="comment">// private final static Singleton INSTANCE;</span></span><br><span class="line"><span class="comment">// static &#123;</span></span><br><span class="line"><span class="comment">// INSTANCE = new Singleton();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公有静态方法用于获取单例对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程安全。但是没使用它时，就已经建立了对象，开销内存。</p><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="comment">// 单例对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// synchronized关键字修饰静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == INSTANCE) &#123;<span class="comment">// 空值判断</span></span><br><span class="line">INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第一次调用<code>getInstance()</code>时，创建单例对象。<code>synchronized</code>关键字修饰，使<code>getInstance()</code>是一个同步方法。保证多线程情况下单例对象的唯一。但是，同步会耗费资源。</p><h2 id="双检锁式（Double-Check-Lock（DCL））"><a href="#双检锁式（Double-Check-Lock（DCL））" class="headerlink" title="双检锁式（Double Check Lock（DCL））"></a>双检锁式（Double Check Lock（DCL））</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="comment">// 单例对象，volatile关键字保证INSTANCE的原子性</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两次空值检查，synchronized关键字同步</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == INSTANCE) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == INSTANCE) &#123;</span><br><span class="line">INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语句<code>INSTANCE = new Singleton();</code>在编译时的步骤如下：</p><ol><li>给Singleton的实例分配内存。</li><li>调用Singleton()的构造函数，初始化成员字段。</li><li>将INSTANCE 对象指向分配的内存空间（此时对象非空）。</li></ol><p>Java编译器允许处理器乱序执行。上诉的2，3两步的顺序可能被打乱。打乱后，非空判断的线程不安全。在JDK1.5之后，调整了JVM，具体化了<code>volatile</code>关键字，表示此操作是一个原子操作，不能中间被分割执行。使用<code>volatile</code>关键字会影响性能。</p><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="comment">// 内部类，包含单例的对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公有静态方法用于获取单例对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次加载<code>Singleton</code>时，<code>SingletonHolder</code>不会被加载。只用调用<code>getInstance()</code>时，才加载<code>SingletonHolder</code>，并创建<code>INSTANCE</code>。<em>推荐大家使用</em>。</p><h2 id="枚举式"><a href="#枚举式" class="headerlink" title="枚举式"></a>枚举式</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">SingletonEnum</span> &#123;</span></span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽说代码简单，<code>enum</code>的实质也是<code>class</code>（编译时，会先翻译成一个class）。优点是反序列化也不会重新生成新的实例。</p><p>前几种方式，如果要避免反序列化也不会重新生成新的实例。需要重写：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private Object readResolve() throws ObjectStreamException&#123;</span><br><span class="line">    return INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="单例管理类"><a href="#单例管理类" class="headerlink" title="单例管理类"></a>单例管理类</h2><p>一个程序可能有多个单例对象。先建立一个上诉管理类。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class SingletonManager &#123;</span><br><span class="line"><span class="comment">// 容器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; objMap = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有构造方法</span></span><br><span class="line"><span class="keyword">private</span> SingletonManager() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> ascendSingleton(<span class="keyword">String</span> <span class="built_in">key</span>, <span class="keyword">Object</span> instance) &#123;</span><br><span class="line"><span class="keyword">if</span> (!objMap.containsKey(<span class="built_in">key</span>)) &#123;</span><br><span class="line">objMap.put(<span class="built_in">key</span>, instance);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得单例对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">Object</span> getInstance(<span class="keyword">String</span> <span class="built_in">key</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> objMap.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过注册，可以管理多种类型的单例，使用统一接口，隐藏具体实现。<br>使用时：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册单例</span></span><br><span class="line"><span class="selector-tag">SingletonManager</span><span class="selector-class">.ascendSingleton</span>(<span class="string">"SingletonKey"</span>,Singleton.getInstance());</span><br></pre></td></tr></table></figure></p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得单例对象</span></span><br><span class="line">Singleton singleton = SingletonManager.getInstance(<span class="string">"SingletonKey"</span>);</span><br></pre></td></tr></table></figure><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>只有一个对象，全局使用。</li><li>只需要建立一次，占一个内存，节约资源。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>没有接口，难以扩展。</li><li>生命周期长，如果引用短生命周期对象会内存泄漏。</li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>通过<em>Java反射机制</em>是能够实例化构造方法为private的类的，那基本上会使所有的Java单例实现失效。</p><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>设计模式Demo<br>GitHub源码：<a href="https://github.com/wzmyyj/Design-Pattern" target="_blank" rel="noopener">https://github.com/wzmyyj/Design-Pattern</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;单例模式&lt;/strong&gt;（Singleton Pattern）是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例类的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://wzmyyj.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【设计模式】面向对象六大原则</title>
    <link href="https://wzmyyj.top/2018/04/15/design_1/"/>
    <id>https://wzmyyj.top/2018/04/15/design_1/</id>
    <published>2018-04-14T16:08:04.000Z</published>
    <updated>2018-05-30T09:37:50.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p><strong>设计模式</strong>（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化。设计模式分为三种类型，分别是：创建型模式、结构型模式，行为型模式。</p><a id="more"></a><h2 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h2><ul><li>创建型模式，共5种：<a href="https://www.jianshu.com/p/010bf3bc846e" target="_blank" rel="noopener">单例模式</a>、<a href="https://www.jianshu.com/p/539975502ad1" target="_blank" rel="noopener">工厂模式</a>、<a href="https://www.jianshu.com/p/06fd85ca913b" target="_blank" rel="noopener">抽象工厂模式</a>、建造者模式、原型模式。</li><li>结构型模式，共7种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</li><li>行为型模式，共11种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</li></ul><h2 id="六大原则"><a href="#六大原则" class="headerlink" title="六大原则"></a>六大原则</h2><h4 id="1，单一职责原则（Single-Responsibility-Principle-SRP）"><a href="#1，单一职责原则（Single-Responsibility-Principle-SRP）" class="headerlink" title="1，单一职责原则（Single Responsibility Principle, SRP）"></a>1，单一职责原则（Single Responsibility Principle, SRP）</h4><p>定义：一个类应只包含单一的职责。</p><ul><li>如果一个类职责过多，代码量就多，而使用起来显得过分冗余，不利于复用。</li><li>如果修改某个职责，可能影响另一个职责。</li></ul><h4 id="2，开放封闭原则-Open-ClosedPrinciple-OCP"><a href="#2，开放封闭原则-Open-ClosedPrinciple-OCP" class="headerlink" title="2，开放封闭原则(Open - ClosedPrinciple ,OCP)"></a>2，开放封闭原则(Open - ClosedPrinciple ,OCP)</h4><p>定义：一个模块、类、函数应当是对修改关闭，对扩展开放。</p><ul><li>修改原有的代码可能会导致原本正常的功能出现问题。</li><li>当需求改变时，最好通过扩展来实现，增加新的方法或类满足需求，而不是去修改原有代码。</li></ul><h4 id="3，里氏代换原则-Liskov-Substitution-Principle-LSP"><a href="#3，里氏代换原则-Liskov-Substitution-Principle-LSP" class="headerlink" title="3，里氏代换原则( Liskov Substitution Principle ,LSP )"></a>3，里氏代换原则( Liskov Substitution Principle ,LSP )</h4><p>定义：使用父类的地方能够使用子类来替换，反过来，则不行。</p><ul><li>使用子类对象去替换父类对象，程序将不会产生错误。</li><li>程序中尽量使用基类类型来对对象进行定义，如父类的子类引用，而在运行时再确定其子类类型，用子类对象来替换父类对象。</li></ul><h4 id="4，依赖倒转原则-Dependence-Inversion-Principle-DIP"><a href="#4，依赖倒转原则-Dependence-Inversion-Principle-DIP" class="headerlink" title="4，依赖倒转原则( Dependence Inversion Principle ,DIP )"></a>4，依赖倒转原则( Dependence Inversion Principle ,DIP )</h4><p>定义：抽象不应该依赖于细节，细节应当依赖于抽象。</p><ul><li>即要面向接口编程，而不是面向具体实现去编程。</li><li>高层模块不应该依赖低层模块，应该去依赖抽象。</li><li>方法定义时，传入对象用抽象类型，实际使用时传入子类对象。</li></ul><h4 id="5，接口隔离法则-Interface-Segregation-Principle，ISL）"><a href="#5，接口隔离法则-Interface-Segregation-Principle，ISL）" class="headerlink" title="5，接口隔离法则(Interface Segregation Principle，ISL）"></a>5，接口隔离法则(Interface Segregation Principle，ISL）</h4><p>定义：一个类对另一个类的依赖应该建立在最小的接口上。</p><ul><li>一个类不应该依赖他不需要的接口，接口的方法全要用得到。</li><li>接口粒度要尽可能小，尽量不能再分割。一个接口的方法过多，可以拆成多个接口。</li></ul><h4 id="6，迪米特法则-Law-of-Demeter-LoD"><a href="#6，迪米特法则-Law-of-Demeter-LoD" class="headerlink" title="6，迪米特法则(Law of Demeter, LoD)"></a>6，迪米特法则(Law of Demeter, LoD)</h4><p>定义：一个类尽量不要与其他类发生关系</p><ul><li>一个类对其他类知道的越少越好，耦合越小。导入的东西越少越好。</li><li>当修改一个类时，其他类的影响就越小，发生错误的可能性就越小。</li></ul><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>设计模式Demo<br>GitHub源码：<a href="https://github.com/wzmyyj/Design-Pattern" target="_blank" rel="noopener">https://github.com/wzmyyj/Design-Pattern</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;设计模式&lt;/strong&gt;（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化。设计模式分为三种类型，分别是：创建型模式、结构型模式，行为型模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://wzmyyj.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【java】归并排序算法</title>
    <link href="https://wzmyyj.top/2018/04/14/java_1/"/>
    <id>https://wzmyyj.top/2018/04/14/java_1/</id>
    <published>2018-04-14T13:35:08.000Z</published>
    <updated>2018-06-04T13:45:32.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><strong>归并排序</strong>（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用<a href="https://baike.sogou.com/v7824380.htm" target="_blank" rel="noopener">分治法</a>（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为<strong>二路归并</strong>。</p><a id="more"></a><p><img src="http://upload-images.jianshu.io/upload_images/3262738-dadc9d84b5c7c570?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="归并排序"></p><p>归并排序算法稳定，数组需要O(n)的额外空间，链表需要O(log(n))的额外空间，时间复杂度为O(nlog(n))，算法不是自适应的，不需要对数据的随机读取。</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ol><li><p>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列。</p></li><li><p>设定两个指针，最初位置分别为两个已经排序序列的起始位置。</p></li><li><p>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置。</p></li><li><p>重复步骤3直到某一指针达到序列尾。</p></li><li><p>将另一序列剩下的所有元素直接复制到合并序列尾。</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class MergeSortTest &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">//测试数据</span></span><br><span class="line"><span class="keyword">int</span> A[] = &#123; <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">56</span>, <span class="number">43</span>, <span class="number">99</span> &#125;;</span><br><span class="line"><span class="comment">// 排序前</span></span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"排序前："</span>);</span><br><span class="line"><span class="built_in">for</span> (<span class="keyword">int</span> a : A) &#123;</span><br><span class="line">System.out.<span class="built_in">print</span>(a + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.<span class="built_in">println</span>();</span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line">mergeSort(A);</span><br><span class="line"><span class="comment">// 排序后</span></span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"排序后："</span>);</span><br><span class="line"><span class="built_in">for</span> (<span class="keyword">int</span> a : A) &#123;</span><br><span class="line">System.out.<span class="built_in">print</span>(a + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.<span class="built_in">println</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序入口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> mergeSort(<span class="keyword">int</span>[] A) &#123;</span><br><span class="line">sort(A, <span class="number">0</span>, A.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> sort(<span class="keyword">int</span>[] A, <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>) &#123;</span><br><span class="line"><span class="built_in">if</span> (start &gt;= <span class="built_in">end</span>)</span><br><span class="line"><span class="built_in">return</span>;</span><br><span class="line"><span class="comment">// 找出中间索引</span></span><br><span class="line"><span class="keyword">int</span> mid = (start + <span class="built_in">end</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 对左边数组进行递归</span></span><br><span class="line">sort(A, start, mid);</span><br><span class="line"><span class="comment">// 对右边数组进行递归</span></span><br><span class="line">sort(A, mid + <span class="number">1</span>, <span class="built_in">end</span>);</span><br><span class="line"><span class="comment">// 合并</span></span><br><span class="line">merge(A, start, mid, <span class="built_in">end</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将两个数组进行归并，归并前面2个数组已有序，归并后依然有序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> merge(<span class="keyword">int</span>[] A, <span class="keyword">int</span> start, <span class="keyword">int</span> mid, <span class="keyword">int</span> <span class="built_in">end</span>) &#123;</span><br><span class="line"><span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[A.length];<span class="comment">// 临时数组</span></span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = start;</span><br><span class="line"><span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">while</span> (i &lt;= mid &amp;&amp; j &lt;= <span class="built_in">end</span>) &#123;</span><br><span class="line"><span class="comment">// 从两个数组中取出较小的放入临时数组</span></span><br><span class="line"><span class="built_in">if</span> (A[i] &lt;= A[j]) &#123;</span><br><span class="line">temp[k++] = A[i++];</span><br><span class="line">&#125; <span class="built_in">else</span> &#123;</span><br><span class="line">temp[k++] = A[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 剩余部分依次放入临时数组（实际上两个while只会执行其中一个）</span></span><br><span class="line"><span class="built_in">while</span> (i &lt;= mid) &#123;</span><br><span class="line">temp[k++] = A[i++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">while</span> (j &lt;= <span class="built_in">end</span>) &#123;</span><br><span class="line">temp[k++] = A[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将临时数组中的内容拷贝回原数组中 （left-right范围的内容）</span></span><br><span class="line"><span class="built_in">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; k; m++) &#123;</span><br><span class="line">A[m + start] = temp[m];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于算法，理解原理很重要。。。</p><p><img src="https://upload-images.jianshu.io/upload_images/3262738-56085d327795472c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配一张图"></p><h2 id="附页"><a href="#附页" class="headerlink" title="附页"></a>附页</h2><p>GitHub源码：<a href="https://github.com/wzmyyj/MergeSort" target="_blank" rel="noopener">https://github.com/wzmyyj/MergeSort</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;归并排序&lt;/strong&gt;（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用&lt;a href=&quot;https://baike.sogou.com/v7824380.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;分治法&lt;/a&gt;（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为&lt;strong&gt;二路归并&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://wzmyyj.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>【IT】L2TP/IPSec配置教程</title>
    <link href="https://wzmyyj.top/2018/04/10/it_2/"/>
    <id>https://wzmyyj.top/2018/04/10/it_2/</id>
    <published>2018-04-10T13:40:49.000Z</published>
    <updated>2018-06-05T04:00:57.423Z</updated>
    
    <content type="html"><![CDATA[<h2 id="L2TP-IPSec"><a href="#L2TP-IPSec" class="headerlink" title="L2TP/IPSec"></a>L2TP/IPSec</h2><p><strong>L2TP</strong>是一种工业标准的Internet隧道协议，功能大致和PPTP协议类似，比如同样可以对网络数据流进行加密。不过也有不同之处，比如PPTP要求网络为IP网络，L2TP要求面向数据包的点对点连接；PPTP使用单一隧道，L2TP使用多隧道；L2TP提供包头压缩、隧道验证，而PPTP不支持。</p><a id="more"></a><p><img src="http://upload-images.jianshu.io/upload_images/3262738-c27da917f2b58a59?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="要不要搭啊"></p><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>首先，需要一个境外服务器。我采用的是Vultr服务器（2.5刀每月）。购买方法见我的上篇博客：<a href="https://www.jianshu.com/p/0c8e5e6447bd" target="_blank" rel="noopener">购买Vultr境外服务器</a>。</p><h3 id="配置服务器端"><a href="#配置服务器端" class="headerlink" title="配置服务器端"></a>配置服务器端</h3><p>我们采用的是Github上<a href="https://github.com/hwdsl2/setup-ipsec-vpn" target="_blank" rel="noopener">setup-ipsec-vpn</a>这个脚本安装方法，不需要特别配置，简单安装。</p><h4 id="1-Ubuntu-amp-Debian："><a href="#1-Ubuntu-amp-Debian：" class="headerlink" title="1, Ubuntu &amp; Debian："></a>1, Ubuntu &amp; Debian：</h4><p>1, 远程连接到上诉买的服务器。（默认的用户名是<code>root</code>）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">root</span>@服务器<span class="keyword">ip</span>地址</span><br></pre></td></tr></table></figure><p>这里，下一步会让你输入密码。复制粘贴（右键粘贴，不能Ctrl+v）即可。（控制台上不会显示出密码，粘贴后直接回车即可）</p><p><img src="http://upload-images.jianshu.io/upload_images/3262738-4a27f8dd75caa916?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>等待连接完成。</p><p>2, 刷新一下。复制粘贴下行代码。<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure></p><p>3, 安装脚本。复制粘贴下行代码。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http<span class="variable">s:</span>//git.io/vpnsetup -O vpnsetup.<span class="keyword">sh</span> &amp;&amp; sudo <span class="keyword">sh</span> vpnsetup.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p>等待安装完成，需要点点时间。</p><p>安装好后，会自动分配 <code>Username</code>，<code>Password</code>，<code>Pre-Shared key</code>（一些参数，默认是一些随机数。）</p><p>4, 修改参数。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#所有变量值必须用 <span class="string">'单引号'</span> 括起来</span><br><span class="line">#*不要* 在值中使用这些字符：  \ <span class="comment">" ' </span></span><br><span class="line">wget http<span class="variable">s:</span>//git.io/vpnsetup -O vpnsetup.<span class="keyword">sh</span>&amp;&amp;sudo \</span><br><span class="line">VPN_IPSEC_PSK=<span class="string">'你的IPsec预共享密钥'</span>\</span><br><span class="line">VPN_USER=<span class="string">'你的VPN用户名'</span>\</span><br><span class="line">VPN_PASSWORD=<span class="string">'你的VPN密码'</span> <span class="keyword">sh</span> vpnsetup.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><h4 id="2-CentOS-amp-RHEL："><a href="#2-CentOS-amp-RHEL：" class="headerlink" title="2, CentOS &amp; RHEL："></a>2, CentOS &amp; RHEL：</h4><p>首先，更新你的系统。第一步改成：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yum update</span></span><br></pre></td></tr></table></figure></p><p>重启。这一步是可选的，但推荐。</p><p>按照与上面相同的步骤，但是</p><blockquote><p>将 <code>https://git.io/vpnsetup</code> 换成 <code>https://git.io/vpnsetup-centos</code>。</p></blockquote><p>到此，你的L2TP/IPSec类型VPN配置完成。</p><h3 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h3><h4 id="1-安卓手机"><a href="#1-安卓手机" class="headerlink" title="1, 安卓手机"></a>1, 安卓手机</h4><p>设置–&gt;连接–&gt;VPN连接–&gt;添加连接–&gt;名称随便取–&gt;类型选L2TP/IPSec PSK–&gt;输入IP地址，预用共享密钥（不是L2TP密钥，未使用的不要填），用户名，密码–&gt;连接（如果第一次连接失败，重试可能仍失败，建议删除连接，重新配置）。</p><h4 id="2-Windows电脑"><a href="#2-Windows电脑" class="headerlink" title="2, Windows电脑"></a>2, Windows电脑</h4><p>打开网络共享中心–&gt;设置新的连接或网络–&gt;连接到工作区–&gt;创建新的连接–&gt;使用我的Internet连接–&gt;填写地址和名称–&gt;填写用户名和密码（域不要填）–&gt;保存连接（不要立刻连接）–&gt;电脑上出现新的连接–&gt;右键–&gt;属性–&gt;安全–&gt;VPN类型（选L2TP/IPSec）–&gt;高级设置–&gt;填写密钥–&gt;保存，连接。</p><p>（不同win版本会有所不同。）</p><h4 id="3-其他"><a href="#3-其他" class="headerlink" title="3, 其他"></a>3, 其他</h4><p><a href="https://www.baidu.com/" target="_blank" rel="noopener">百度一下，你就知道。</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>连接完成后，你就可以上Google，Facebook，YouTube，Twitter等网站啦。玩韩服七骑士。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;L2TP-IPSec&quot;&gt;&lt;a href=&quot;#L2TP-IPSec&quot; class=&quot;headerlink&quot; title=&quot;L2TP/IPSec&quot;&gt;&lt;/a&gt;L2TP/IPSec&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;L2TP&lt;/strong&gt;是一种工业标准的Internet隧道协议，功能大致和PPTP协议类似，比如同样可以对网络数据流进行加密。不过也有不同之处，比如PPTP要求网络为IP网络，L2TP要求面向数据包的点对点连接；PPTP使用单一隧道，L2TP使用多隧道；L2TP提供包头压缩、隧道验证，而PPTP不支持。&lt;/p&gt;
    
    </summary>
    
    
      <category term="IT" scheme="https://wzmyyj.top/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>【IT】购买Vultr服务器</title>
    <link href="https://wzmyyj.top/2018/04/07/it_1/"/>
    <id>https://wzmyyj.top/2018/04/07/it_1/</id>
    <published>2018-04-07T08:11:50.000Z</published>
    <updated>2018-06-02T08:40:27.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vultr服务器"><a href="#Vultr服务器" class="headerlink" title="Vultr服务器"></a>Vultr服务器</h2><p><strong>Vultr</strong>是一家美国的服务器厂商,这个VPS服务商是按小时收费的。这意味着,架设一台VPS的成本较低。</p><a id="more"></a><p>##购买步骤</p><p>1, 登录官网：<a href="https://www.vultr.com/" target="_blank" rel="noopener">https://www.vultr.com/</a>。注册一个自己的账号。</p><p>2,  确定需要的服务器配置。一般而言，我们只需要最低配置选择$2.5/月（大约15元/月）的即可。（好多可能售完，只有Miami还有$2.5的）。系统选择推荐Ubuntu （16.04或14.04）。</p><p>2.1, 地点</p><p><img src="http://upload-images.jianshu.io/upload_images/3262738-cb519e7612b9d244?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>2.2, 系统</p><p><img src="http://upload-images.jianshu.io/upload_images/3262738-67ad678a266acf51?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>2.3, 附加服务</p><p><img src="http://upload-images.jianshu.io/upload_images/3262738-f916d456ca855a17?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>2.4, 主机名</p><p><img src="http://upload-images.jianshu.io/upload_images/3262738-cda6d55a8926bc71?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>3, 支付。选择支付宝扫码支付。至少支付$10（60多元）。</p><p><img src="http://upload-images.jianshu.io/upload_images/3262738-d5540ab72e625b3b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>4, 购买步骤2选的服务器。</p><p>到此。你的服务器购买完毕。</p><h2 id="管理Vultr服务器"><a href="#管理Vultr服务器" class="headerlink" title="管理Vultr服务器"></a>管理Vultr服务器</h2><p>1, 服务器管理界面。</p><p><img src="http://upload-images.jianshu.io/upload_images/3262738-da941d322e4a8494?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/3262738-3ffee9cfdca4af80?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>重点看ID，用户名和密码，以后需要用到。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vultr服务器&quot;&gt;&lt;a href=&quot;#Vultr服务器&quot; class=&quot;headerlink&quot; title=&quot;Vultr服务器&quot;&gt;&lt;/a&gt;Vultr服务器&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Vultr&lt;/strong&gt;是一家美国的服务器厂商,这个VPS服务商是按小时收费的。这意味着,架设一台VPS的成本较低。&lt;/p&gt;
    
    </summary>
    
    
      <category term="IT" scheme="https://wzmyyj.top/tags/IT/"/>
    
  </entry>
  
</feed>
